
WisNetPrefTestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012404  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001828  080125f0  080125f0  000225f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e18  08013e18  000302a8  2**0
                  CONTENTS
  4 .ARM          00000000  08013e18  08013e18  000302a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013e18  08013e18  000302a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e18  08013e18  00023e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e1c  08013e1c  00023e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08013e20  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  200002a8  080140c8  000302a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  080140c8  000313fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017167  00000000  00000000  000302d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003641  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0004aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c35c  00000000  00000000  0004bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a45d  00000000  00000000  000682bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a1b19  00000000  00000000  00082719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00124232  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013a0  00000000  00000000  00124288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006de4  00000000  00000000  00125628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200002a8 	.word	0x200002a8
 8000204:	00000000 	.word	0x00000000
 8000208:	080125d4 	.word	0x080125d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200002ac 	.word	0x200002ac
 8000224:	080125d4 	.word	0x080125d4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gesf2>:
 8000c40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c44:	e006      	b.n	8000c54 <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__lesf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	e002      	b.n	8000c54 <__cmpsf2+0x4>
 8000c4e:	bf00      	nop

08000c50 <__cmpsf2>:
 8000c50:	f04f 0c01 	mov.w	ip, #1
 8000c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d011      	beq.n	8000c90 <__cmpsf2+0x40>
 8000c6c:	b001      	add	sp, #4
 8000c6e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c72:	bf18      	it	ne
 8000c74:	ea90 0f01 	teqne	r0, r1
 8000c78:	bf58      	it	pl
 8000c7a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c7e:	bf88      	it	hi
 8000c80:	17c8      	asrhi	r0, r1, #31
 8000c82:	bf38      	it	cc
 8000c84:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c88:	bf18      	it	ne
 8000c8a:	f040 0001 	orrne.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	d102      	bne.n	8000c9c <__cmpsf2+0x4c>
 8000c96:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c9a:	d105      	bne.n	8000ca8 <__cmpsf2+0x58>
 8000c9c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ca0:	d1e4      	bne.n	8000c6c <__cmpsf2+0x1c>
 8000ca2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ca6:	d0e1      	beq.n	8000c6c <__cmpsf2+0x1c>
 8000ca8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cfrcmple>:
 8000cb0:	4684      	mov	ip, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	e7ff      	b.n	8000cb8 <__aeabi_cfcmpeq>

08000cb8 <__aeabi_cfcmpeq>:
 8000cb8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cba:	f7ff ffc9 	bl	8000c50 <__cmpsf2>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	bf48      	it	mi
 8000cc2:	f110 0f00 	cmnmi.w	r0, #0
 8000cc6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc8 <__aeabi_fcmpeq>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff fff4 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2001      	moveq	r0, #1
 8000cd4:	2000      	movne	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmplt>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffea 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000ce4:	bf34      	ite	cc
 8000ce6:	2001      	movcc	r0, #1
 8000ce8:	2000      	movcs	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmple>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffe0 	bl	8000cb8 <__aeabi_cfcmpeq>
 8000cf8:	bf94      	ite	ls
 8000cfa:	2001      	movls	r0, #1
 8000cfc:	2000      	movhi	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpge>:
 8000d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d08:	f7ff ffd2 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d0c:	bf94      	ite	ls
 8000d0e:	2001      	movls	r0, #1
 8000d10:	2000      	movhi	r0, #0
 8000d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d16:	bf00      	nop

08000d18 <__aeabi_fcmpgt>:
 8000d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__aeabi_cfrcmple>
 8000d20:	bf34      	ite	cc
 8000d22:	2001      	movcc	r0, #1
 8000d24:	2000      	movcs	r0, #0
 8000d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2a:	bf00      	nop

08000d2c <__aeabi_fcmpun>:
 8000d2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__aeabi_fcmpun+0x14>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fcmpun+0x26>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d102      	bne.n	8000d4c <__aeabi_fcmpun+0x20>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d102      	bne.n	8000d52 <__aeabi_fcmpun+0x26>
 8000d4c:	f04f 0000 	mov.w	r0, #0
 8000d50:	4770      	bx	lr
 8000d52:	f04f 0001 	mov.w	r0, #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4628      	mov	r0, r5
 8000d62:	2200      	movs	r2, #0
 8000d64:	2300      	movs	r3, #0
 8000d66:	f7ff fe95 	bl	8000a94 <__aeabi_dcmplt>
 8000d6a:	b928      	cbnz	r0, 8000d78 <__aeabi_d2lz+0x20>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	4621      	mov	r1, r4
 8000d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d74:	f000 b80a 	b.w	8000d8c <__aeabi_d2ulz>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d7e:	f000 f805 	bl	8000d8c <__aeabi_d2ulz>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop

08000d8c <__aeabi_d2ulz>:
 8000d8c:	b5d0      	push	{r4, r6, r7, lr}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__aeabi_d2ulz+0x34>)
 8000d92:	4606      	mov	r6, r0
 8000d94:	460f      	mov	r7, r1
 8000d96:	f7ff fc0b 	bl	80005b0 <__aeabi_dmul>
 8000d9a:	f7ff fee1 	bl	8000b60 <__aeabi_d2uiz>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	f7ff fb8c 	bl	80004bc <__aeabi_ui2d>
 8000da4:	2200      	movs	r2, #0
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <__aeabi_d2ulz+0x38>)
 8000da8:	f7ff fc02 	bl	80005b0 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4630      	mov	r0, r6
 8000db2:	4639      	mov	r1, r7
 8000db4:	f7ff fa44 	bl	8000240 <__aeabi_dsub>
 8000db8:	f7ff fed2 	bl	8000b60 <__aeabi_d2uiz>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000dc0:	3df00000 	.word	0x3df00000
 8000dc4:	41f00000 	.word	0x41f00000

08000dc8 <W5500_Select>:
uint8_t dhcp_buffer[1024];
// 1K seems to be enough for this buffer as well
uint8_t dns_buffer[1024];

//uint8_t dns[4];
void W5500_Select(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2110      	movs	r1, #16
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <W5500_Select+0x14>)
 8000dd2:	f002 ff7d 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010800 	.word	0x40010800

08000de0 <W5500_Unselect>:

void W5500_Unselect(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <W5500_Unselect+0x14>)
 8000dea:	f002 ff71 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010800 	.word	0x40010800

08000df8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <W5500_ReadBuff+0x24>)
 8000e0e:	f006 fce3 	bl	80077d8 <HAL_SPI_Receive>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000f30 	.word	0x20000f30

08000e20 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000e2c:	887a      	ldrh	r2, [r7, #2]
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <W5500_WriteBuff+0x24>)
 8000e36:	f006 fb83 	bl	8007540 <HAL_SPI_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000f30 	.word	0x20000f30

08000e48 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffd0 	bl	8000df8 <W5500_ReadBuff>
    return byte;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffd5 	bl	8000e20 <W5500_WriteBuff>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <initParameters>:
char var_f[30] = "Test b";
string_dimensions st_var_c = {.charsCount = 20};
string_dimensions st_var_f = {.charsCount = 30};

void initParameters()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i< PARAMS_COUNT; i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e00f      	b.n	8000eac <initParameters+0x2c>
		sprintf(params[i].name, "VAR_%c",('A'+i));
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <initParameters+0xa0>)
 8000e98:	1898      	adds	r0, r3, r2
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	3341      	adds	r3, #65	; 0x41
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4920      	ldr	r1, [pc, #128]	; (8000f24 <initParameters+0xa4>)
 8000ea2:	f00d fe55 	bl	800eb50 <siprintf>
	for(uint8_t i = 0; i< PARAMS_COUNT; i++)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d9ec      	bls.n	8000e8c <initParameters+0xc>
			 params[0].format = TYPE_CHAR;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <initParameters+0xa0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	741a      	strb	r2, [r3, #16]
			 params[1].format = TYPE_FLOAT;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <initParameters+0xa0>)
 8000eba:	2207      	movs	r2, #7
 8000ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			 params[2].format = TYPE_STRING;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <initParameters+0xa0>)
 8000ec2:	220a      	movs	r2, #10
 8000ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			 params[3].format = TYPE_UCHAR;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <initParameters+0xa0>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			 params[4].format = TYPE_DOUBLE;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <initParameters+0xa0>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			 params[5].format = TYPE_STRING;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <initParameters+0xa0>)
 8000eda:	220a      	movs	r2, #10
 8000edc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	params[0].value = &var_a;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <initParameters+0xa0>)
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <initParameters+0xa8>)
 8000ee4:	619a      	str	r2, [r3, #24]
	params[1].value = &var_b;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <initParameters+0xa0>)
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <initParameters+0xac>)
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
	params[2].value = &var_c;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <initParameters+0xa0>)
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <initParameters+0xb0>)
 8000ef0:	651a      	str	r2, [r3, #80]	; 0x50
	params[2].dimensions = &st_var_c;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <initParameters+0xa0>)
 8000ef4:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <initParameters+0xb4>)
 8000ef6:	64da      	str	r2, [r3, #76]	; 0x4c
	params[3].value = &var_d;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <initParameters+0xa0>)
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <initParameters+0xb8>)
 8000efc:	66da      	str	r2, [r3, #108]	; 0x6c
	params[4].value = &var_e;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <initParameters+0xa0>)
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <initParameters+0xbc>)
 8000f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	params[5].value = &var_f;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <initParameters+0xa0>)
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <initParameters+0xc0>)
 8000f0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	params[5].dimensions = &st_var_f;
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <initParameters+0xa0>)
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <initParameters+0xc4>)
 8000f12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000958 	.word	0x20000958
 8000f24:	080125f0 	.word	0x080125f0
 8000f28:	20000027 	.word	0x20000027
 8000f2c:	20000028 	.word	0x20000028
 8000f30:	2000002c 	.word	0x2000002c
 8000f34:	20000070 	.word	0x20000070
 8000f38:	20000040 	.word	0x20000040
 8000f3c:	20000048 	.word	0x20000048
 8000f40:	20000050 	.word	0x20000050
 8000f44:	20000074 	.word	0x20000074

08000f48 <Callback_IPAssigned>:

volatile char ip_assigned = 0;

void Callback_IPAssigned(void) {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    //UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
    ip_assigned = 1;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <Callback_IPAssigned+0x14>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200002c5 	.word	0x200002c5

08000f60 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    //UART_Printf("Callback: IP conflict!\r\n");
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <draw_menu>:

void draw_menu(int menu_index) {
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	6078      	str	r0, [r7, #4]
	 ssd1306_Clear();
 8000f74:	f001 fa4a 	bl	800240c <ssd1306_Clear>
     ssd1306_SetColor(White);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 ffcb 	bl	8001f14 <ssd1306_SetColor>
if (menu_index > 0){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dd0e      	ble.n	8000fa2 <draw_menu+0x36>
     ssd1306_SetCursor(0, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f001 fa1e 	bl	80023c8 <ssd1306_SetCursor>
	    sprintf(line,"%d", menu_index);
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4999      	ldr	r1, [pc, #612]	; (80011f4 <draw_menu+0x288>)
 8000f90:	4899      	ldr	r0, [pc, #612]	; (80011f8 <draw_menu+0x28c>)
 8000f92:	f00d fddd 	bl	800eb50 <siprintf>
	    ssd1306_WriteString(line, Font_7x10);
 8000f96:	4b99      	ldr	r3, [pc, #612]	; (80011fc <draw_menu+0x290>)
 8000f98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f9c:	4896      	ldr	r0, [pc, #600]	; (80011f8 <draw_menu+0x28c>)
 8000f9e:	f001 f9ed 	bl	800237c <ssd1306_WriteString>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	f200 8246 	bhi.w	8001438 <draw_menu+0x4cc>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <draw_menu+0x48>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	080010e7 	.word	0x080010e7
 8000fbc:	08001255 	.word	0x08001255
 8000fc0:	080012df 	.word	0x080012df
}
	switch (menu_index){
	case MENU_PHY_STATS: //PHY stats
		ssd1306_SetCursor(8, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2008      	movs	r0, #8
 8000fc8:	f001 f9fe 	bl	80023c8 <ssd1306_SetCursor>
		ssd1306_WriteString("PHY stats", Font_7x10);
 8000fcc:	4b8b      	ldr	r3, [pc, #556]	; (80011fc <draw_menu+0x290>)
 8000fce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fd2:	488b      	ldr	r0, [pc, #556]	; (8001200 <draw_menu+0x294>)
 8000fd4:	f001 f9d2 	bl	800237c <ssd1306_WriteString>
		ssd1306_SetCursor(80, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2050      	movs	r0, #80	; 0x50
 8000fdc:	f001 f9f4 	bl	80023c8 <ssd1306_SetCursor>
		if (PhyStatus.by == PHY_CONFBY_HW)
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <draw_menu+0x298>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <draw_menu+0x88>
				ssd1306_WriteString("by HW", Font_7x10);
 8000fe8:	4b84      	ldr	r3, [pc, #528]	; (80011fc <draw_menu+0x290>)
 8000fea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fee:	4886      	ldr	r0, [pc, #536]	; (8001208 <draw_menu+0x29c>)
 8000ff0:	f001 f9c4 	bl	800237c <ssd1306_WriteString>
		if (PhyStatus.by == PHY_CONFBY_SW)
 8000ff4:	4b83      	ldr	r3, [pc, #524]	; (8001204 <draw_menu+0x298>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <draw_menu+0x9c>
				ssd1306_WriteString("by SW", Font_7x10);
 8000ffc:	4b7f      	ldr	r3, [pc, #508]	; (80011fc <draw_menu+0x290>)
 8000ffe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001002:	4882      	ldr	r0, [pc, #520]	; (800120c <draw_menu+0x2a0>)
 8001004:	f001 f9ba 	bl	800237c <ssd1306_WriteString>

			    ssd1306_SetCursor(0, 11);
 8001008:	210b      	movs	r1, #11
 800100a:	2000      	movs	r0, #0
 800100c:	f001 f9dc 	bl	80023c8 <ssd1306_SetCursor>
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 8001010:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <draw_menu+0x2a4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461c      	mov	r4, r3
			    											 net_info.mac[1],
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <draw_menu+0x2a4>)
 8001018:	785b      	ldrb	r3, [r3, #1]
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 800101a:	461d      	mov	r5, r3
															 net_info.mac[2],
 800101c:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <draw_menu+0x2a4>)
 800101e:	789b      	ldrb	r3, [r3, #2]
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 8001020:	461a      	mov	r2, r3
															 net_info.mac[3],
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <draw_menu+0x2a4>)
 8001024:	78db      	ldrb	r3, [r3, #3]
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 8001026:	4619      	mov	r1, r3
															 net_info.mac[4],
 8001028:	4b79      	ldr	r3, [pc, #484]	; (8001210 <draw_menu+0x2a4>)
 800102a:	791b      	ldrb	r3, [r3, #4]
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 800102c:	4618      	mov	r0, r3
															 net_info.mac[5]);
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <draw_menu+0x2a4>)
 8001030:	795b      	ldrb	r3, [r3, #5]
			    sprintf(line,"%02X:%02X:%02X:%02X:%02X:%02X",net_info.mac[0],
 8001032:	9303      	str	r3, [sp, #12]
 8001034:	9002      	str	r0, [sp, #8]
 8001036:	9101      	str	r1, [sp, #4]
 8001038:	9200      	str	r2, [sp, #0]
 800103a:	462b      	mov	r3, r5
 800103c:	4622      	mov	r2, r4
 800103e:	4975      	ldr	r1, [pc, #468]	; (8001214 <draw_menu+0x2a8>)
 8001040:	486d      	ldr	r0, [pc, #436]	; (80011f8 <draw_menu+0x28c>)
 8001042:	f00d fd85 	bl	800eb50 <siprintf>
			    ssd1306_WriteString(line, Font_7x10);
 8001046:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <draw_menu+0x290>)
 8001048:	e893 0006 	ldmia.w	r3, {r1, r2}
 800104c:	486a      	ldr	r0, [pc, #424]	; (80011f8 <draw_menu+0x28c>)
 800104e:	f001 f995 	bl	800237c <ssd1306_WriteString>
			    ssd1306_SetCursor(0, 22);
 8001052:	2116      	movs	r1, #22
 8001054:	2000      	movs	r0, #0
 8001056:	f001 f9b7 	bl	80023c8 <ssd1306_SetCursor>
			    if (PhyStatus.speed == PHY_SPEED_10)
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <draw_menu+0x298>)
 800105c:	789b      	ldrb	r3, [r3, #2]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d105      	bne.n	800106e <draw_menu+0x102>
			    ssd1306_WriteString("10mBit", Font_7x8);
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <draw_menu+0x2ac>)
 8001064:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001068:	486c      	ldr	r0, [pc, #432]	; (800121c <draw_menu+0x2b0>)
 800106a:	f001 f987 	bl	800237c <ssd1306_WriteString>
			    if (PhyStatus.speed == PHY_SPEED_100)
 800106e:	4b65      	ldr	r3, [pc, #404]	; (8001204 <draw_menu+0x298>)
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d105      	bne.n	8001082 <draw_menu+0x116>
			    ssd1306_WriteString("100mBit", Font_7x8);
 8001076:	4b68      	ldr	r3, [pc, #416]	; (8001218 <draw_menu+0x2ac>)
 8001078:	e893 0006 	ldmia.w	r3, {r1, r2}
 800107c:	4868      	ldr	r0, [pc, #416]	; (8001220 <draw_menu+0x2b4>)
 800107e:	f001 f97d 	bl	800237c <ssd1306_WriteString>
			    ssd1306_SetCursor(0070, 22);
 8001082:	2116      	movs	r1, #22
 8001084:	2038      	movs	r0, #56	; 0x38
 8001086:	f001 f99f 	bl	80023c8 <ssd1306_SetCursor>
			    if (PhyStatus.duplex == PHY_DUPLEX_HALF)
 800108a:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <draw_menu+0x298>)
 800108c:	78db      	ldrb	r3, [r3, #3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <draw_menu+0x132>
			    ssd1306_WriteString("Half", Font_7x8);
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <draw_menu+0x2ac>)
 8001094:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001098:	4862      	ldr	r0, [pc, #392]	; (8001224 <draw_menu+0x2b8>)
 800109a:	f001 f96f 	bl	800237c <ssd1306_WriteString>
			   	if (PhyStatus.duplex == PHY_DUPLEX_FULL)
 800109e:	4b59      	ldr	r3, [pc, #356]	; (8001204 <draw_menu+0x298>)
 80010a0:	78db      	ldrb	r3, [r3, #3]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <draw_menu+0x146>
			   	ssd1306_WriteString("Full", Font_7x8);
 80010a6:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <draw_menu+0x2ac>)
 80010a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010ac:	485e      	ldr	r0, [pc, #376]	; (8001228 <draw_menu+0x2bc>)
 80010ae:	f001 f965 	bl	800237c <ssd1306_WriteString>
			   	ssd1306_SetCursor(90, 22);
 80010b2:	2116      	movs	r1, #22
 80010b4:	205a      	movs	r0, #90	; 0x5a
 80010b6:	f001 f987 	bl	80023c8 <ssd1306_SetCursor>
			   						    if (PhyStatus.mode == PHY_MODE_MANUAL)
 80010ba:	4b52      	ldr	r3, [pc, #328]	; (8001204 <draw_menu+0x298>)
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d105      	bne.n	80010ce <draw_menu+0x162>
			   						    ssd1306_WriteString("man", Font_7x8);
 80010c2:	4b55      	ldr	r3, [pc, #340]	; (8001218 <draw_menu+0x2ac>)
 80010c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010c8:	4858      	ldr	r0, [pc, #352]	; (800122c <draw_menu+0x2c0>)
 80010ca:	f001 f957 	bl	800237c <ssd1306_WriteString>
			   						   if (PhyStatus.mode == PHY_MODE_AUTONEGO)
 80010ce:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <draw_menu+0x298>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	f040 82c5 	bne.w	8001662 <draw_menu+0x6f6>
			   						   ssd1306_WriteString("auto", Font_7x8);
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <draw_menu+0x2ac>)
 80010da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010de:	4854      	ldr	r0, [pc, #336]	; (8001230 <draw_menu+0x2c4>)
 80010e0:	f001 f94c 	bl	800237c <ssd1306_WriteString>


	break;
 80010e4:	e2bd      	b.n	8001662 <draw_menu+0x6f6>
	case MENU_IP_STATS: //IPv4
		ssd1306_SetCursor(8, 0);
 80010e6:	2100      	movs	r1, #0
 80010e8:	2008      	movs	r0, #8
 80010ea:	f001 f96d 	bl	80023c8 <ssd1306_SetCursor>
        ssd1306_WriteString("IP stats", Font_7x10);
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <draw_menu+0x290>)
 80010f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010f4:	484f      	ldr	r0, [pc, #316]	; (8001234 <draw_menu+0x2c8>)
 80010f6:	f001 f941 	bl	800237c <ssd1306_WriteString>
        ssd1306_SetCursor(80, 0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2050      	movs	r0, #80	; 0x50
 80010fe:	f001 f963 	bl	80023c8 <ssd1306_SetCursor>
        		    if (ip_assigned){
 8001102:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <draw_menu+0x2cc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <draw_menu+0x1ae>
     			    ssd1306_WriteString("dhcp", Font_7x10);
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <draw_menu+0x290>)
 800110e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001112:	484a      	ldr	r0, [pc, #296]	; (800123c <draw_menu+0x2d0>)
 8001114:	f001 f932 	bl	800237c <ssd1306_WriteString>
 8001118:	e010      	b.n	800113c <draw_menu+0x1d0>
     			    } else {
     			    if (linkStatus == PHY_LINK_ON)
 800111a:	4b49      	ldr	r3, [pc, #292]	; (8001240 <draw_menu+0x2d4>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d106      	bne.n	8001130 <draw_menu+0x1c4>
     			    ssd1306_WriteString("stat", Font_7x10);
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <draw_menu+0x290>)
 8001124:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001128:	4846      	ldr	r0, [pc, #280]	; (8001244 <draw_menu+0x2d8>)
 800112a:	f001 f927 	bl	800237c <ssd1306_WriteString>
 800112e:	e005      	b.n	800113c <draw_menu+0x1d0>
     			    else {
     			    	ssd1306_WriteString("discon", Font_7x10);
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <draw_menu+0x290>)
 8001132:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001136:	4844      	ldr	r0, [pc, #272]	; (8001248 <draw_menu+0x2dc>)
 8001138:	f001 f920 	bl	800237c <ssd1306_WriteString>
     			    }
     			    }	uint32_t temp_sn = net_info.sn[0]<<24|net_info.sn[1]<<16|net_info.sn[2]<<8|net_info.sn[3];
 800113c:	4b34      	ldr	r3, [pc, #208]	; (8001210 <draw_menu+0x2a4>)
 800113e:	7a9b      	ldrb	r3, [r3, #10]
 8001140:	061a      	lsls	r2, r3, #24
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <draw_menu+0x2a4>)
 8001144:	7adb      	ldrb	r3, [r3, #11]
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	431a      	orrs	r2, r3
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <draw_menu+0x2a4>)
 800114c:	7b1b      	ldrb	r3, [r3, #12]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	4313      	orrs	r3, r2
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <draw_menu+0x2a4>)
 8001154:	7b52      	ldrb	r2, [r2, #13]
 8001156:	4313      	orrs	r3, r2
 8001158:	60bb      	str	r3, [r7, #8]
	    char sn_slashed = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	    ssd1306_SetColor(White);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fed8 	bl	8001f14 <ssd1306_SetColor>
   	  	ssd1306_SetCursor(0, 11);
 8001164:	210b      	movs	r1, #11
 8001166:	2000      	movs	r0, #0
 8001168:	f001 f92e 	bl	80023c8 <ssd1306_SetCursor>

	    for( char i =0; i < 32;i++){sn_slashed += (temp_sn>>i)&0x00000001;}
 800116c:	2300      	movs	r3, #0
 800116e:	73bb      	strb	r3, [r7, #14]
 8001170:	e00d      	b.n	800118e <draw_menu+0x222>
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	fa22 f303 	lsr.w	r3, r2, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4413      	add	r3, r2
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	3301      	adds	r3, #1
 800118c:	73bb      	strb	r3, [r7, #14]
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b1f      	cmp	r3, #31
 8001192:	d9ee      	bls.n	8001172 <draw_menu+0x206>
	  	sprintf(line,"%03d.%03d.%03d.%03d/%02d", net_info.ip[0],net_info.ip[1],net_info.ip[2],net_info.ip[3],sn_slashed);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <draw_menu+0x2a4>)
 8001196:	799b      	ldrb	r3, [r3, #6]
 8001198:	4618      	mov	r0, r3
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <draw_menu+0x2a4>)
 800119c:	79db      	ldrb	r3, [r3, #7]
 800119e:	461c      	mov	r4, r3
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <draw_menu+0x2a4>)
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <draw_menu+0x2a4>)
 80011a8:	7a5b      	ldrb	r3, [r3, #9]
 80011aa:	4619      	mov	r1, r3
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	9101      	str	r1, [sp, #4]
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	4623      	mov	r3, r4
 80011b6:	4602      	mov	r2, r0
 80011b8:	4924      	ldr	r1, [pc, #144]	; (800124c <draw_menu+0x2e0>)
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <draw_menu+0x28c>)
 80011bc:	f00d fcc8 	bl	800eb50 <siprintf>
	    ssd1306_WriteString(line, Font_7x8);
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <draw_menu+0x2ac>)
 80011c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <draw_menu+0x28c>)
 80011c8:	f001 f8d8 	bl	800237c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 22);
 80011cc:	2116      	movs	r1, #22
 80011ce:	2000      	movs	r0, #0
 80011d0:	f001 f8fa 	bl	80023c8 <ssd1306_SetCursor>
	    sprintf(line,"lease:%li", getDHCPLeasetime());
 80011d4:	f009 fed0 	bl	800af78 <getDHCPLeasetime>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	491c      	ldr	r1, [pc, #112]	; (8001250 <draw_menu+0x2e4>)
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <draw_menu+0x28c>)
 80011e0:	f00d fcb6 	bl	800eb50 <siprintf>
	  	ssd1306_WriteString(line, Font_7x8);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <draw_menu+0x2ac>)
 80011e6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <draw_menu+0x28c>)
 80011ec:	f001 f8c6 	bl	800237c <ssd1306_WriteString>

	break;
 80011f0:	e23a      	b.n	8001668 <draw_menu+0x6fc>
 80011f2:	bf00      	nop
 80011f4:	080125f8 	.word	0x080125f8
 80011f8:	20000acc 	.word	0x20000acc
 80011fc:	20000008 	.word	0x20000008
 8001200:	080125fc 	.word	0x080125fc
 8001204:	20000940 	.word	0x20000940
 8001208:	08012608 	.word	0x08012608
 800120c:	08012610 	.word	0x08012610
 8001210:	20000010 	.word	0x20000010
 8001214:	08012618 	.word	0x08012618
 8001218:	20000000 	.word	0x20000000
 800121c:	08012638 	.word	0x08012638
 8001220:	08012640 	.word	0x08012640
 8001224:	08012648 	.word	0x08012648
 8001228:	08012650 	.word	0x08012650
 800122c:	08012658 	.word	0x08012658
 8001230:	0801265c 	.word	0x0801265c
 8001234:	08012664 	.word	0x08012664
 8001238:	200002c5 	.word	0x200002c5
 800123c:	08012670 	.word	0x08012670
 8001240:	20000ac8 	.word	0x20000ac8
 8001244:	08012678 	.word	0x08012678
 8001248:	08012680 	.word	0x08012680
 800124c:	08012688 	.word	0x08012688
 8001250:	080126a4 	.word	0x080126a4
	case MENU_DNS:
			ssd1306_SetCursor(8, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	2008      	movs	r0, #8
 8001258:	f001 f8b6 	bl	80023c8 <ssd1306_SetCursor>
			ssd1306_WriteString("DNS stats", Font_7x10);
 800125c:	4bc2      	ldr	r3, [pc, #776]	; (8001568 <draw_menu+0x5fc>)
 800125e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001262:	48c2      	ldr	r0, [pc, #776]	; (800156c <draw_menu+0x600>)
 8001264:	f001 f88a 	bl	800237c <ssd1306_WriteString>
		    ssd1306_SetCursor(0, 11);
 8001268:	210b      	movs	r1, #11
 800126a:	2000      	movs	r0, #0
 800126c:	f001 f8ac 	bl	80023c8 <ssd1306_SetCursor>
			sprintf(line,"dns%3d.%3d.%3d.%3d", net_info.dns[0],net_info.dns[1],net_info.dns[2],net_info.dns[3]);
 8001270:	4bbf      	ldr	r3, [pc, #764]	; (8001570 <draw_menu+0x604>)
 8001272:	7c9b      	ldrb	r3, [r3, #18]
 8001274:	4619      	mov	r1, r3
 8001276:	4bbe      	ldr	r3, [pc, #760]	; (8001570 <draw_menu+0x604>)
 8001278:	7cdb      	ldrb	r3, [r3, #19]
 800127a:	4618      	mov	r0, r3
 800127c:	4bbc      	ldr	r3, [pc, #752]	; (8001570 <draw_menu+0x604>)
 800127e:	7d1b      	ldrb	r3, [r3, #20]
 8001280:	461a      	mov	r2, r3
 8001282:	4bbb      	ldr	r3, [pc, #748]	; (8001570 <draw_menu+0x604>)
 8001284:	7d5b      	ldrb	r3, [r3, #21]
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	49b9      	ldr	r1, [pc, #740]	; (8001574 <draw_menu+0x608>)
 8001290:	48b9      	ldr	r0, [pc, #740]	; (8001578 <draw_menu+0x60c>)
 8001292:	f00d fc5d 	bl	800eb50 <siprintf>
		    ssd1306_WriteString(line, Font_7x8);
 8001296:	4bb9      	ldr	r3, [pc, #740]	; (800157c <draw_menu+0x610>)
 8001298:	e893 0006 	ldmia.w	r3, {r1, r2}
 800129c:	48b6      	ldr	r0, [pc, #728]	; (8001578 <draw_menu+0x60c>)
 800129e:	f001 f86d 	bl	800237c <ssd1306_WriteString>
		    ssd1306_SetCursor(0, 22);
 80012a2:	2116      	movs	r1, #22
 80012a4:	2000      	movs	r0, #0
 80012a6:	f001 f88f 	bl	80023c8 <ssd1306_SetCursor>
		    sprintf(line,"gw:%03d.%03d.%03d.%03d", net_info.gw[0],net_info.gw[1],net_info.gw[2],net_info.gw[3]);
 80012aa:	4bb1      	ldr	r3, [pc, #708]	; (8001570 <draw_menu+0x604>)
 80012ac:	7b9b      	ldrb	r3, [r3, #14]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4baf      	ldr	r3, [pc, #700]	; (8001570 <draw_menu+0x604>)
 80012b2:	7bdb      	ldrb	r3, [r3, #15]
 80012b4:	4618      	mov	r0, r3
 80012b6:	4bae      	ldr	r3, [pc, #696]	; (8001570 <draw_menu+0x604>)
 80012b8:	7c1b      	ldrb	r3, [r3, #16]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4bac      	ldr	r3, [pc, #688]	; (8001570 <draw_menu+0x604>)
 80012be:	7c5b      	ldrb	r3, [r3, #17]
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	4603      	mov	r3, r0
 80012c6:	460a      	mov	r2, r1
 80012c8:	49ad      	ldr	r1, [pc, #692]	; (8001580 <draw_menu+0x614>)
 80012ca:	48ab      	ldr	r0, [pc, #684]	; (8001578 <draw_menu+0x60c>)
 80012cc:	f00d fc40 	bl	800eb50 <siprintf>
		    ssd1306_WriteString(line, Font_7x8);
 80012d0:	4baa      	ldr	r3, [pc, #680]	; (800157c <draw_menu+0x610>)
 80012d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012d6:	48a8      	ldr	r0, [pc, #672]	; (8001578 <draw_menu+0x60c>)
 80012d8:	f001 f850 	bl	800237c <ssd1306_WriteString>

		break;
 80012dc:	e1c4      	b.n	8001668 <draw_menu+0x6fc>
	case MENU_TELNET:
			ssd1306_SetCursor(8, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	2008      	movs	r0, #8
 80012e2:	f001 f871 	bl	80023c8 <ssd1306_SetCursor>
			ssd1306_WriteString("TCP Server", Font_7x10);
 80012e6:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <draw_menu+0x5fc>)
 80012e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012ec:	48a5      	ldr	r0, [pc, #660]	; (8001584 <draw_menu+0x618>)
 80012ee:	f001 f845 	bl	800237c <ssd1306_WriteString>
		    ssd1306_SetCursor(80, 0);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2050      	movs	r0, #80	; 0x50
 80012f6:	f001 f867 	bl	80023c8 <ssd1306_SetCursor>
			sprintf(line,"(%5d)", telnetConfigServer_getPort());
 80012fa:	f00b ff51 	bl	800d1a0 <telnetConfigServer_getPort>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	49a1      	ldr	r1, [pc, #644]	; (8001588 <draw_menu+0x61c>)
 8001304:	489c      	ldr	r0, [pc, #624]	; (8001578 <draw_menu+0x60c>)
 8001306:	f00d fc23 	bl	800eb50 <siprintf>
		    ssd1306_WriteString(line, Font_7x8);
 800130a:	4b9c      	ldr	r3, [pc, #624]	; (800157c <draw_menu+0x610>)
 800130c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001310:	4899      	ldr	r0, [pc, #612]	; (8001578 <draw_menu+0x60c>)
 8001312:	f001 f833 	bl	800237c <ssd1306_WriteString>
		    ssd1306_SetCursor(0, 11);
 8001316:	210b      	movs	r1, #11
 8001318:	2000      	movs	r0, #0
 800131a:	f001 f855 	bl	80023c8 <ssd1306_SetCursor>
		    switch (telnetConfigServer_SocketStatus()){
 800131e:	f00b ff49 	bl	800d1b4 <telnetConfigServer_SocketStatus>
 8001322:	4603      	mov	r3, r0
 8001324:	2b1c      	cmp	r3, #28
 8001326:	d860      	bhi.n	80013ea <draw_menu+0x47e>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <draw_menu+0x3c4>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	080013dd 	.word	0x080013dd
 8001334:	080013eb 	.word	0x080013eb
 8001338:	080013eb 	.word	0x080013eb
 800133c:	080013eb 	.word	0x080013eb
 8001340:	080013eb 	.word	0x080013eb
 8001344:	080013eb 	.word	0x080013eb
 8001348:	080013eb 	.word	0x080013eb
 800134c:	080013eb 	.word	0x080013eb
 8001350:	080013eb 	.word	0x080013eb
 8001354:	080013eb 	.word	0x080013eb
 8001358:	080013eb 	.word	0x080013eb
 800135c:	080013eb 	.word	0x080013eb
 8001360:	080013eb 	.word	0x080013eb
 8001364:	080013eb 	.word	0x080013eb
 8001368:	080013eb 	.word	0x080013eb
 800136c:	080013eb 	.word	0x080013eb
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013eb 	.word	0x080013eb
 8001378:	080013eb 	.word	0x080013eb
 800137c:	080013a5 	.word	0x080013a5
 8001380:	080013b3 	.word	0x080013b3
 8001384:	080013eb 	.word	0x080013eb
 8001388:	080013eb 	.word	0x080013eb
 800138c:	080013c1 	.word	0x080013c1
 8001390:	080013eb 	.word	0x080013eb
 8001394:	080013eb 	.word	0x080013eb
 8001398:	080013eb 	.word	0x080013eb
 800139c:	080013eb 	.word	0x080013eb
 80013a0:	080013cf 	.word	0x080013cf
		    case SOCK_INIT:
		    	ssd1306_WriteString("Status:INIT", Font_7x8);
 80013a4:	4b75      	ldr	r3, [pc, #468]	; (800157c <draw_menu+0x610>)
 80013a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013aa:	4878      	ldr	r0, [pc, #480]	; (800158c <draw_menu+0x620>)
 80013ac:	f000 ffe6 	bl	800237c <ssd1306_WriteString>
		    	break;
 80013b0:	e01b      	b.n	80013ea <draw_menu+0x47e>
		    case SOCK_LISTEN:
		    	ssd1306_WriteString("Status:LISTEN", Font_7x8);
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <draw_menu+0x610>)
 80013b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013b8:	4875      	ldr	r0, [pc, #468]	; (8001590 <draw_menu+0x624>)
 80013ba:	f000 ffdf 	bl	800237c <ssd1306_WriteString>
		    	break;
 80013be:	e014      	b.n	80013ea <draw_menu+0x47e>
		    case SOCK_ESTABLISHED:
		    	ssd1306_WriteString("Status:ESTABLISHED", Font_7x8);
 80013c0:	4b6e      	ldr	r3, [pc, #440]	; (800157c <draw_menu+0x610>)
 80013c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013c6:	4873      	ldr	r0, [pc, #460]	; (8001594 <draw_menu+0x628>)
 80013c8:	f000 ffd8 	bl	800237c <ssd1306_WriteString>
		    	break;
 80013cc:	e00d      	b.n	80013ea <draw_menu+0x47e>
		    case SOCK_CLOSE_WAIT:
		   		    	ssd1306_WriteString("Status:CLOSE_WAIT", Font_7x8);
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <draw_menu+0x610>)
 80013d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013d4:	4870      	ldr	r0, [pc, #448]	; (8001598 <draw_menu+0x62c>)
 80013d6:	f000 ffd1 	bl	800237c <ssd1306_WriteString>
		   		    	break;
 80013da:	e006      	b.n	80013ea <draw_menu+0x47e>
		    case SOCK_CLOSED:
		   		    	ssd1306_WriteString("Status:CLOSED", Font_7x8);
 80013dc:	4b67      	ldr	r3, [pc, #412]	; (800157c <draw_menu+0x610>)
 80013de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013e2:	486e      	ldr	r0, [pc, #440]	; (800159c <draw_menu+0x630>)
 80013e4:	f000 ffca 	bl	800237c <ssd1306_WriteString>
		   		    	break;
 80013e8:	bf00      	nop
		   		    }
		    ssd1306_SetCursor(0, 22);
 80013ea:	2116      	movs	r1, #22
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 ffeb 	bl	80023c8 <ssd1306_SetCursor>
		    switch (telnetConfigServer_SocketProcess()){
 80013f2:	f00b fee9 	bl	800d1c8 <telnetConfigServer_SocketProcess>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d015      	beq.n	8001428 <draw_menu+0x4bc>
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	f300 8132 	bgt.w	8001666 <draw_menu+0x6fa>
 8001402:	2b01      	cmp	r3, #1
 8001404:	d002      	beq.n	800140c <draw_menu+0x4a0>
 8001406:	2b02      	cmp	r3, #2
 8001408:	d007      	beq.n	800141a <draw_menu+0x4ae>
		    case SOCKET_RECEIVE: ssd1306_WriteString("Process:RECEIVE", Font_7x8); break;
		    case SOCKET_TRANSMIT: ssd1306_WriteString("Process:TRANSMIT", Font_7x8); 	break;
		    }


		break;
 800140a:	e12c      	b.n	8001666 <draw_menu+0x6fa>
		    case SOCKET_IDLE: ssd1306_WriteString("Process:IDLE", Font_7x8); break;
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <draw_menu+0x610>)
 800140e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001412:	4863      	ldr	r0, [pc, #396]	; (80015a0 <draw_menu+0x634>)
 8001414:	f000 ffb2 	bl	800237c <ssd1306_WriteString>
 8001418:	e00d      	b.n	8001436 <draw_menu+0x4ca>
		    case SOCKET_RECEIVE: ssd1306_WriteString("Process:RECEIVE", Font_7x8); break;
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <draw_menu+0x610>)
 800141c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001420:	4860      	ldr	r0, [pc, #384]	; (80015a4 <draw_menu+0x638>)
 8001422:	f000 ffab 	bl	800237c <ssd1306_WriteString>
 8001426:	e006      	b.n	8001436 <draw_menu+0x4ca>
		    case SOCKET_TRANSMIT: ssd1306_WriteString("Process:TRANSMIT", Font_7x8); 	break;
 8001428:	4b54      	ldr	r3, [pc, #336]	; (800157c <draw_menu+0x610>)
 800142a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800142e:	485e      	ldr	r0, [pc, #376]	; (80015a8 <draw_menu+0x63c>)
 8001430:	f000 ffa4 	bl	800237c <ssd1306_WriteString>
 8001434:	bf00      	nop
		break;
 8001436:	e116      	b.n	8001666 <draw_menu+0x6fa>

	case MENU_IDLE:
	default:
		   if (linkStatus == PHY_LINK_ON){
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <draw_menu+0x640>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <draw_menu+0x4e6>
		   	   	ssd1306_DrawBitmap(0, 0, 13, 8, icon_13x8_link_conn);
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <draw_menu+0x644>)
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2308      	movs	r3, #8
 8001446:	220d      	movs	r2, #13
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f000 feac 	bl	80021a8 <ssd1306_DrawBitmap>
 8001450:	e007      	b.n	8001462 <draw_menu+0x4f6>
		        } else {
		        ssd1306_DrawBitmap(0, 0, 13, 8, icon_13x8_link_empty);
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <draw_menu+0x648>)
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2308      	movs	r3, #8
 8001458:	220d      	movs	r2, #13
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fea3 	bl	80021a8 <ssd1306_DrawBitmap>
		        }
			    if (ip_assigned){
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <draw_menu+0x64c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <draw_menu+0x512>
			    	ssd1306_DrawBitmap(15, 0, 12, 8, icon_12x8_dhcp);
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <draw_menu+0x650>)
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2308      	movs	r3, #8
 8001472:	220c      	movs	r2, #12
 8001474:	2100      	movs	r1, #0
 8001476:	200f      	movs	r0, #15
 8001478:	f000 fe96 	bl	80021a8 <ssd1306_DrawBitmap>
 800147c:	e014      	b.n	80014a8 <draw_menu+0x53c>
			    } else {
			    if (linkStatus == PHY_LINK_ON)
 800147e:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <draw_menu+0x640>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <draw_menu+0x52c>
			    	ssd1306_DrawBitmap(15, 0, 12, 8, icon_12x8_static);
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <draw_menu+0x654>)
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2308      	movs	r3, #8
 800148c:	220c      	movs	r2, #12
 800148e:	2100      	movs	r1, #0
 8001490:	200f      	movs	r0, #15
 8001492:	f000 fe89 	bl	80021a8 <ssd1306_DrawBitmap>
 8001496:	e007      	b.n	80014a8 <draw_menu+0x53c>
			    else {
			    	ssd1306_DrawBitmap(15, 0, 12, 8, icon_12x8_discon);
 8001498:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <draw_menu+0x658>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2308      	movs	r3, #8
 800149e:	220c      	movs	r2, #12
 80014a0:	2100      	movs	r1, #0
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 fe80 	bl	80021a8 <ssd1306_DrawBitmap>
			    }
			    }
			    switch (telnetConfigServer_SocketStatus()){
 80014a8:	f00b fe84 	bl	800d1b4 <telnetConfigServer_SocketStatus>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b1c      	cmp	r3, #28
 80014b0:	f200 809b 	bhi.w	80015ea <draw_menu+0x67e>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <draw_menu+0x550>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080015e1 	.word	0x080015e1
 80014c0:	080015eb 	.word	0x080015eb
 80014c4:	080015eb 	.word	0x080015eb
 80014c8:	080015eb 	.word	0x080015eb
 80014cc:	080015eb 	.word	0x080015eb
 80014d0:	080015eb 	.word	0x080015eb
 80014d4:	080015eb 	.word	0x080015eb
 80014d8:	080015eb 	.word	0x080015eb
 80014dc:	080015eb 	.word	0x080015eb
 80014e0:	080015eb 	.word	0x080015eb
 80014e4:	080015eb 	.word	0x080015eb
 80014e8:	080015eb 	.word	0x080015eb
 80014ec:	080015eb 	.word	0x080015eb
 80014f0:	080015eb 	.word	0x080015eb
 80014f4:	080015eb 	.word	0x080015eb
 80014f8:	080015eb 	.word	0x080015eb
 80014fc:	080015eb 	.word	0x080015eb
 8001500:	080015eb 	.word	0x080015eb
 8001504:	080015eb 	.word	0x080015eb
 8001508:	08001531 	.word	0x08001531
 800150c:	0800153b 	.word	0x0800153b
 8001510:	080015eb 	.word	0x080015eb
 8001514:	080015eb 	.word	0x080015eb
 8001518:	08001545 	.word	0x08001545
 800151c:	080015eb 	.word	0x080015eb
 8001520:	080015eb 	.word	0x080015eb
 8001524:	080015eb 	.word	0x080015eb
 8001528:	080015eb 	.word	0x080015eb
 800152c:	0800155f 	.word	0x0800155f
			    case SOCK_INIT:
			    	sprintf(TelnetStatus,"Telnet init");
 8001530:	4925      	ldr	r1, [pc, #148]	; (80015c8 <draw_menu+0x65c>)
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <draw_menu+0x660>)
 8001534:	f00d fb0c 	bl	800eb50 <siprintf>
			    break;
 8001538:	e057      	b.n	80015ea <draw_menu+0x67e>
			    case SOCK_LISTEN:
			    	sprintf(TelnetStatus,"Telnet listen");
 800153a:	4925      	ldr	r1, [pc, #148]	; (80015d0 <draw_menu+0x664>)
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <draw_menu+0x660>)
 800153e:	f00d fb07 	bl	800eb50 <siprintf>
			    	break;
 8001542:	e052      	b.n	80015ea <draw_menu+0x67e>
			    case SOCK_ESTABLISHED:
			    	sprintf(TelnetStatus,"Client connected");
 8001544:	4923      	ldr	r1, [pc, #140]	; (80015d4 <draw_menu+0x668>)
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <draw_menu+0x660>)
 8001548:	f00d fb02 	bl	800eb50 <siprintf>
			    	ssd1306_DrawBitmap(30, 0, 12, 8, icon_12x8_connector);break;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <draw_menu+0x66c>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2308      	movs	r3, #8
 8001552:	220c      	movs	r2, #12
 8001554:	2100      	movs	r1, #0
 8001556:	201e      	movs	r0, #30
 8001558:	f000 fe26 	bl	80021a8 <ssd1306_DrawBitmap>
 800155c:	e045      	b.n	80015ea <draw_menu+0x67e>
			    case SOCK_CLOSE_WAIT:
			    			    	sprintf(TelnetStatus,"Client disconnect");
 800155e:	491f      	ldr	r1, [pc, #124]	; (80015dc <draw_menu+0x670>)
 8001560:	481a      	ldr	r0, [pc, #104]	; (80015cc <draw_menu+0x660>)
 8001562:	f00d faf5 	bl	800eb50 <siprintf>
			    			    	break;
 8001566:	e040      	b.n	80015ea <draw_menu+0x67e>
 8001568:	20000008 	.word	0x20000008
 800156c:	080126b0 	.word	0x080126b0
 8001570:	20000010 	.word	0x20000010
 8001574:	080126bc 	.word	0x080126bc
 8001578:	20000acc 	.word	0x20000acc
 800157c:	20000000 	.word	0x20000000
 8001580:	080126d0 	.word	0x080126d0
 8001584:	080126e8 	.word	0x080126e8
 8001588:	080126f4 	.word	0x080126f4
 800158c:	080126fc 	.word	0x080126fc
 8001590:	08012708 	.word	0x08012708
 8001594:	08012718 	.word	0x08012718
 8001598:	0801272c 	.word	0x0801272c
 800159c:	08012740 	.word	0x08012740
 80015a0:	08012750 	.word	0x08012750
 80015a4:	08012760 	.word	0x08012760
 80015a8:	08012770 	.word	0x08012770
 80015ac:	20000ac8 	.word	0x20000ac8
 80015b0:	080138e0 	.word	0x080138e0
 80015b4:	080138d0 	.word	0x080138d0
 80015b8:	200002c5 	.word	0x200002c5
 80015bc:	080138f0 	.word	0x080138f0
 80015c0:	080138fc 	.word	0x080138fc
 80015c4:	08013908 	.word	0x08013908
 80015c8:	08012784 	.word	0x08012784
 80015cc:	20000944 	.word	0x20000944
 80015d0:	08012790 	.word	0x08012790
 80015d4:	080127a0 	.word	0x080127a0
 80015d8:	08013938 	.word	0x08013938
 80015dc:	080127b4 	.word	0x080127b4
			    case SOCK_CLOSED:
			    			    	sprintf(TelnetStatus," ");
 80015e0:	4924      	ldr	r1, [pc, #144]	; (8001674 <draw_menu+0x708>)
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <draw_menu+0x70c>)
 80015e4:	f00d fab4 	bl	800eb50 <siprintf>
			    			    	break;
 80015e8:	bf00      	nop
			    			    }
			    switch (telnetConfigServer_SocketProcess()){
 80015ea:	f00b fded 	bl	800d1c8 <telnetConfigServer_SocketProcess>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d018      	beq.n	8001626 <draw_menu+0x6ba>
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	dc1f      	bgt.n	8001638 <draw_menu+0x6cc>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d002      	beq.n	8001602 <draw_menu+0x696>
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d009      	beq.n	8001614 <draw_menu+0x6a8>
 8001600:	e01a      	b.n	8001638 <draw_menu+0x6cc>
			    case SOCKET_IDLE:
			    			   			    	ssd1306_DrawBitmap(44, 0, 12, 8, icon_12x8_TRX);
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <draw_menu+0x710>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2308      	movs	r3, #8
 8001608:	220c      	movs	r2, #12
 800160a:	2100      	movs	r1, #0
 800160c:	202c      	movs	r0, #44	; 0x2c
 800160e:	f000 fdcb 	bl	80021a8 <ssd1306_DrawBitmap>
			    			   			    	break;
 8001612:	e011      	b.n	8001638 <draw_menu+0x6cc>
			    case SOCKET_RECEIVE:
			    			   			    	ssd1306_DrawBitmap(44, 0, 12, 8, icon_12x8_RX);
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <draw_menu+0x714>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2308      	movs	r3, #8
 800161a:	220c      	movs	r2, #12
 800161c:	2100      	movs	r1, #0
 800161e:	202c      	movs	r0, #44	; 0x2c
 8001620:	f000 fdc2 	bl	80021a8 <ssd1306_DrawBitmap>
			    			   			    	break;
 8001624:	e008      	b.n	8001638 <draw_menu+0x6cc>
			    case SOCKET_TRANSMIT:
			    			   			    	ssd1306_DrawBitmap(44, 0, 12, 8, icon_12x8_TX);
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <draw_menu+0x718>)
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2308      	movs	r3, #8
 800162c:	220c      	movs	r2, #12
 800162e:	2100      	movs	r1, #0
 8001630:	202c      	movs	r0, #44	; 0x2c
 8001632:	f000 fdb9 	bl	80021a8 <ssd1306_DrawBitmap>
			    			   			    	break;
 8001636:	bf00      	nop
			    			   			    }

			    ssd1306_SetCursor(00, 11);
 8001638:	210b      	movs	r1, #11
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fec4 	bl	80023c8 <ssd1306_SetCursor>
			    ssd1306_WriteString(TelnetStatus, Font_7x8);
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <draw_menu+0x71c>)
 8001642:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <draw_menu+0x70c>)
 8001648:	f000 fe98 	bl	800237c <ssd1306_WriteString>
			    ssd1306_SetCursor(00, 22);
 800164c:	2116      	movs	r1, #22
 800164e:	2000      	movs	r0, #0
 8001650:	f000 feba 	bl	80023c8 <ssd1306_SetCursor>
			    ssd1306_WriteString(status, Font_7x8);
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <draw_menu+0x71c>)
 8001656:	e893 0006 	ldmia.w	r3, {r1, r2}
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <draw_menu+0x720>)
 800165c:	f000 fe8e 	bl	800237c <ssd1306_WriteString>
 8001660:	e002      	b.n	8001668 <draw_menu+0x6fc>
	break;
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <draw_menu+0x6fc>
		break;
 8001666:	bf00      	nop
	}

	ssd1306_UpdateScreen();
 8001668:	f000 fcfe 	bl	8002068 <ssd1306_UpdateScreen>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	080127c8 	.word	0x080127c8
 8001678:	20000944 	.word	0x20000944
 800167c:	08013920 	.word	0x08013920
 8001680:	08013914 	.word	0x08013914
 8001684:	0801392c 	.word	0x0801392c
 8001688:	20000000 	.word	0x20000000
 800168c:	200013b0 	.word	0x200013b0

08001690 <w5500_init>:
void w5500_init() {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
	//registration callbacks
	 reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001696:	4920      	ldr	r1, [pc, #128]	; (8001718 <w5500_init+0x88>)
 8001698:	4820      	ldr	r0, [pc, #128]	; (800171c <w5500_init+0x8c>)
 800169a:	f00c f90f 	bl	800d8bc <reg_wizchip_cs_cbfunc>
	    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800169e:	4920      	ldr	r1, [pc, #128]	; (8001720 <w5500_init+0x90>)
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <w5500_init+0x94>)
 80016a2:	f00c f92f 	bl	800d904 <reg_wizchip_spi_cbfunc>
	    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80016a6:	4920      	ldr	r1, [pc, #128]	; (8001728 <w5500_init+0x98>)
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <w5500_init+0x9c>)
 80016aa:	f00c f957 	bl	800d95c <reg_wizchip_spiburst_cbfunc>
	    draw_menu(menu_idx);
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <w5500_init+0xa0>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fc5a 	bl	8000f6c <draw_menu>
	    //Calling wizchip_init()...
	       uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <w5500_init+0xa4>)
 80016ba:	463b      	mov	r3, r7
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	e883 0003 	stmia.w	r3, {r0, r1}
	       wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80016c4:	463a      	mov	r2, r7
 80016c6:	463b      	mov	r3, r7
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00c f9be 	bl	800da4c <wizchip_init>
	       draw_menu(menu_idx);
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <w5500_init+0xa0>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fc49 	bl	8000f6c <draw_menu>
	       setSHAR(net_info.mac);
 80016da:	2206      	movs	r2, #6
 80016dc:	4916      	ldr	r1, [pc, #88]	; (8001738 <w5500_init+0xa8>)
 80016de:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80016e2:	f00b fe9b 	bl	800d41c <WIZCHIP_WRITE_BUF>
	       getSHAR(net_info.mac);
 80016e6:	2206      	movs	r2, #6
 80016e8:	4913      	ldr	r1, [pc, #76]	; (8001738 <w5500_init+0xa8>)
 80016ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80016ee:	f00b fe35 	bl	800d35c <WIZCHIP_READ_BUF>
	       draw_menu(menu_idx);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <w5500_init+0xa0>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc38 	bl	8000f6c <draw_menu>
	       reg_dhcp_cbfunc(
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <w5500_init+0xac>)
 80016fe:	4910      	ldr	r1, [pc, #64]	; (8001740 <w5500_init+0xb0>)
 8001700:	480f      	ldr	r0, [pc, #60]	; (8001740 <w5500_init+0xb0>)
 8001702:	f008 f869 	bl	80097d8 <reg_dhcp_cbfunc>
	       			              Callback_IPAssigned,
	       			              Callback_IPAssigned,
	       			              Callback_IPConflict
	       );

          sprintf(status,"Init complete");
 8001706:	490f      	ldr	r1, [pc, #60]	; (8001744 <w5500_init+0xb4>)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <w5500_init+0xb8>)
 800170a:	f00d fa21 	bl	800eb50 <siprintf>

}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	08000de1 	.word	0x08000de1
 800171c:	08000dc9 	.word	0x08000dc9
 8001720:	08000e63 	.word	0x08000e63
 8001724:	08000e49 	.word	0x08000e49
 8001728:	08000e21 	.word	0x08000e21
 800172c:	08000df9 	.word	0x08000df9
 8001730:	20000f2c 	.word	0x20000f2c
 8001734:	080127dc 	.word	0x080127dc
 8001738:	20000010 	.word	0x20000010
 800173c:	08000f61 	.word	0x08000f61
 8001740:	08000f49 	.word	0x08000f49
 8001744:	080127cc 	.word	0x080127cc
 8001748:	200013b0 	.word	0x200013b0

0800174c <INTkeyMenu_handler>:

void INTkeyMenu_handler() {menu_idx= 0;}
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <INTkeyMenu_handler+0x14>)
 8001752:	2200      	movs	r2, #0
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000f2c 	.word	0x20000f2c

08001764 <INTkeyUp_handler>:
void INTkeyUp_handler() {menu_idx++; menu_idx %=5;}
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <INTkeyUp_handler+0x34>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <INTkeyUp_handler+0x34>)
 8001772:	801a      	strh	r2, [r3, #0]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <INTkeyUp_handler+0x34>)
 8001776:	881a      	ldrh	r2, [r3, #0]
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <INTkeyUp_handler+0x38>)
 800177a:	fba3 1302 	umull	r1, r3, r3, r2
 800177e:	0899      	lsrs	r1, r3, #2
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <INTkeyUp_handler+0x34>)
 800178c:	801a      	strh	r2, [r3, #0]
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000f2c 	.word	0x20000f2c
 800179c:	cccccccd 	.word	0xcccccccd

080017a0 <INTkeyDown_handler>:
void INTkeyDown_handler() {menu_idx +=4;menu_idx %=5;}
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <INTkeyDown_handler+0x34>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	3304      	adds	r3, #4
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <INTkeyDown_handler+0x34>)
 80017ae:	801a      	strh	r2, [r3, #0]
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <INTkeyDown_handler+0x34>)
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <INTkeyDown_handler+0x38>)
 80017b6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ba:	0899      	lsrs	r1, r3, #2
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <INTkeyDown_handler+0x34>)
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000f2c 	.word	0x20000f2c
 80017d8:	cccccccd 	.word	0xcccccccd

080017dc <INTW5500_Handler>:
void INTW5500_Handler() {  sprintf(status,"INT W5500"); telnetConfigServer_InterruptCallback();}
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4903      	ldr	r1, [pc, #12]	; (80017f0 <INTW5500_Handler+0x14>)
 80017e2:	4804      	ldr	r0, [pc, #16]	; (80017f4 <INTW5500_Handler+0x18>)
 80017e4:	f00d f9b4 	bl	800eb50 <siprintf>
 80017e8:	f00b fbc0 	bl	800cf6c <telnetConfigServer_InterruptCallback>
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	080127e4 	.word	0x080127e4
 80017f4:	200013b0 	.word	0x200013b0

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f001 f8e5 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f93b 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 faa1 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 800180a:	f000 fa81 	bl	8001d10 <MX_DMA_Init>
  MX_I2C1_Init();
 800180e:	f000 f97d 	bl	8001b0c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001812:	f000 f9a9 	bl	8001b68 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001816:	f000 f9dd 	bl	8001bd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800181a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181e:	f001 f937 	bl	8002a90 <HAL_Delay>
  ssd1306_Init();
 8001822:	f000 fb87 	bl	8001f34 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8001826:	f000 fde7 	bl	80023f8 <ssd1306_FlipScreenVertically>
  ssd1306_UpdateScreen();
 800182a:	f000 fc1d 	bl	8002068 <ssd1306_UpdateScreen>
  sprintf(status,"Init display");
 800182e:	4978      	ldr	r1, [pc, #480]	; (8001a10 <main+0x218>)
 8001830:	4878      	ldr	r0, [pc, #480]	; (8001a14 <main+0x21c>)
 8001832:	f00d f98d 	bl	800eb50 <siprintf>
  draw_menu(0);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fb98 	bl	8000f6c <draw_menu>
  HAL_SPI_Init(&hspi1);
 800183c:	4876      	ldr	r0, [pc, #472]	; (8001a18 <main+0x220>)
 800183e:	f005 fcc7 	bl	80071d0 <HAL_SPI_Init>
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001848:	4874      	ldr	r0, [pc, #464]	; (8001a1c <main+0x224>)
 800184a:	f002 fa41 	bl	8003cd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f001 f91e 	bl	8002a90 <HAL_Delay>
  HAL_GPIO_WritePin(W5500_RESET_GPIO_Port, W5500_RESET_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800185a:	4870      	ldr	r0, [pc, #448]	; (8001a1c <main+0x224>)
 800185c:	f002 fa38 	bl	8003cd0 <HAL_GPIO_WritePin>
  sprintf(status,"Reset W5500");
 8001860:	496f      	ldr	r1, [pc, #444]	; (8001a20 <main+0x228>)
 8001862:	486c      	ldr	r0, [pc, #432]	; (8001a14 <main+0x21c>)
 8001864:	f00d f974 	bl	800eb50 <siprintf>
  draw_menu(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fb7f 	bl	8000f6c <draw_menu>

  sprintf(status,"Init W5500");
 800186e:	496d      	ldr	r1, [pc, #436]	; (8001a24 <main+0x22c>)
 8001870:	4868      	ldr	r0, [pc, #416]	; (8001a14 <main+0x21c>)
 8001872:	f00d f96d 	bl	800eb50 <siprintf>

  w5500_init();
 8001876:	f7ff ff0b 	bl	8001690 <w5500_init>
  linkParametersStorage(&params,PARAMS_COUNT);
 800187a:	2106      	movs	r1, #6
 800187c:	486a      	ldr	r0, [pc, #424]	; (8001a28 <main+0x230>)
 800187e:	f009 fb9d 	bl	800afbc <linkParametersStorage>
  initParameters();
 8001882:	f7ff fafd 	bl	8000e80 <initParameters>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // loop();
	  HAL_Delay(100);
 8001886:	2064      	movs	r0, #100	; 0x64
 8001888:	f001 f902 	bl	8002a90 <HAL_Delay>
	  draw_menu(menu_idx);
 800188c:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <main+0x234>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb6b 	bl	8000f6c <draw_menu>
	  linkStatus = wizphy_getphylink();
 8001896:	f00c f965 	bl	800db64 <wizphy_getphylink>
 800189a:	4603      	mov	r3, r0
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <main+0x238>)
 80018a0:	701a      	strb	r2, [r3, #0]
	  wizphy_getphystat(&PhyStatus);
 80018a2:	4864      	ldr	r0, [pc, #400]	; (8001a34 <main+0x23c>)
 80018a4:	f00c f974 	bl	800db90 <wizphy_getphystat>
	  if (linkStatus != oldlinkStatus  && linkStatus == PHY_LINK_OFF) { // Кабель подключили
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <main+0x238>)
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <main+0x240>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d00f      	beq.n	80018d4 <main+0xdc>
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <main+0x238>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10b      	bne.n	80018d4 <main+0xdc>
	       sprintf(status,"Cable disconnected");
 80018bc:	495f      	ldr	r1, [pc, #380]	; (8001a3c <main+0x244>)
 80018be:	4855      	ldr	r0, [pc, #340]	; (8001a14 <main+0x21c>)
 80018c0:	f00d f946 	bl	800eb50 <siprintf>
			       draw_menu(0);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fb51 	bl	8000f6c <draw_menu>
			       telnetConfigServer_SocketClose();
 80018ca:	f00b fc93 	bl	800d1f4 <telnetConfigServer_SocketClose>
			       ip_assigned = 0;
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <main+0x248>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

	  }
	  if (linkStatus != oldlinkStatus  && linkStatus == PHY_LINK_ON) { // Кабель подключили
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <main+0x238>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <main+0x240>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f000 808f 	beq.w	8001a00 <main+0x208>
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <main+0x238>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 808a 	bne.w	8001a00 <main+0x208>
		  sprintf(status,"Cable connected");
 80018ec:	4955      	ldr	r1, [pc, #340]	; (8001a44 <main+0x24c>)
 80018ee:	4849      	ldr	r0, [pc, #292]	; (8001a14 <main+0x21c>)
 80018f0:	f00d f92e 	bl	800eb50 <siprintf>
		  draw_menu(0);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fb39 	bl	8000f6c <draw_menu>
		  net_info.dhcp = NETINFO_DHCP;
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <main+0x250>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	759a      	strb	r2, [r3, #22]
		  wizchip_setnetinfo(&net_info);
 8001900:	4851      	ldr	r0, [pc, #324]	; (8001a48 <main+0x250>)
 8001902:	f00c f963 	bl	800dbcc <wizchip_setnetinfo>

		    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8001906:	4951      	ldr	r1, [pc, #324]	; (8001a4c <main+0x254>)
 8001908:	2000      	movs	r0, #0
 800190a:	f009 fa05 	bl	800ad18 <DHCP_init>
			       sprintf(status,"DHCP discovering");
 800190e:	4950      	ldr	r1, [pc, #320]	; (8001a50 <main+0x258>)
 8001910:	4840      	ldr	r0, [pc, #256]	; (8001a14 <main+0x21c>)
 8001912:	f00d f91d 	bl	800eb50 <siprintf>
			       draw_menu(0);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fb28 	bl	8000f6c <draw_menu>
			       uint32_t ctr = 10000;
 800191c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001920:	607b      	str	r3, [r7, #4]
			        while((!ip_assigned) && (ctr > 0)) {
 8001922:	e007      	b.n	8001934 <main+0x13c>
			            DHCP_run();
 8001924:	f009 f840 	bl	800a9a8 <DHCP_run>
			            ctr--;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
			            HAL_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f001 f8ae 	bl	8002a90 <HAL_Delay>
			        while((!ip_assigned) && (ctr > 0)) {
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <main+0x248>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <main+0x14c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ef      	bne.n	8001924 <main+0x12c>
			        }
			        if(!ip_assigned && retries < 5) {
 8001944:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <main+0x248>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11b      	bne.n	8001986 <main+0x18e>
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <main+0x25c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d817      	bhi.n	8001986 <main+0x18e>
			        	draw_menu(0);
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fb08 	bl	8000f6c <draw_menu>
			        	retries++;
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <main+0x25c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <main+0x25c>)
 8001966:	701a      	strb	r2, [r3, #0]
			        	linkStatus = PHY_LINK_OFF; //инициируем retry
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <main+0x238>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
					       sprintf(status,"DHCP not found");
 800196e:	493a      	ldr	r1, [pc, #232]	; (8001a58 <main+0x260>)
 8001970:	4828      	ldr	r0, [pc, #160]	; (8001a14 <main+0x21c>)
 8001972:	f00d f8ed 	bl	800eb50 <siprintf>
					       draw_menu(0);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff faf8 	bl	8000f6c <draw_menu>
					       HAL_Delay(300);
 800197c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001980:	f001 f886 	bl	8002a90 <HAL_Delay>
 8001984:	e03c      	b.n	8001a00 <main+0x208>
					 }
			        else {
			        	if(ip_assigned){
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <main+0x248>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01d      	beq.n	80019cc <main+0x1d4>
			        	retries = 0;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <main+0x25c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
                   sprintf(status,"Assign network");
 8001996:	4931      	ldr	r1, [pc, #196]	; (8001a5c <main+0x264>)
 8001998:	481e      	ldr	r0, [pc, #120]	; (8001a14 <main+0x21c>)
 800199a:	f00d f8d9 	bl	800eb50 <siprintf>
			       draw_menu(0);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fae4 	bl	8000f6c <draw_menu>

			       getIPfromDHCP(net_info.ip);
 80019a4:	482e      	ldr	r0, [pc, #184]	; (8001a60 <main+0x268>)
 80019a6:	f009 fa6f 	bl	800ae88 <getIPfromDHCP>
			       getGWfromDHCP(net_info.gw);
 80019aa:	482e      	ldr	r0, [pc, #184]	; (8001a64 <main+0x26c>)
 80019ac:	f009 fa8a 	bl	800aec4 <getGWfromDHCP>
			       getSNfromDHCP(net_info.sn);
 80019b0:	482d      	ldr	r0, [pc, #180]	; (8001a68 <main+0x270>)
 80019b2:	f009 faa5 	bl	800af00 <getSNfromDHCP>
			       sprintf(status,"Find DNS server");
 80019b6:	492d      	ldr	r1, [pc, #180]	; (8001a6c <main+0x274>)
 80019b8:	4816      	ldr	r0, [pc, #88]	; (8001a14 <main+0x21c>)
 80019ba:	f00d f8c9 	bl	800eb50 <siprintf>
			       draw_menu(0);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fad4 	bl	8000f6c <draw_menu>

			       getDNSfromDHCP(net_info.dns);
 80019c4:	482a      	ldr	r0, [pc, #168]	; (8001a70 <main+0x278>)
 80019c6:	f009 fab9 	bl	800af3c <getDNSfromDHCP>
 80019ca:	e002      	b.n	80019d2 <main+0x1da>
			       } else {net_info.dhcp = NETINFO_STATIC;}
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <main+0x250>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	759a      	strb	r2, [r3, #22]
			       sprintf(status,"Store Net config");
 80019d2:	4928      	ldr	r1, [pc, #160]	; (8001a74 <main+0x27c>)
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <main+0x21c>)
 80019d6:	f00d f8bb 	bl	800eb50 <siprintf>
			       draw_menu(0);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fac6 	bl	8000f6c <draw_menu>
			       wizchip_setnetinfo(&net_info);
 80019e0:	4819      	ldr	r0, [pc, #100]	; (8001a48 <main+0x250>)
 80019e2:	f00c f8f3 	bl	800dbcc <wizchip_setnetinfo>
			       sprintf(status,"Ready");
 80019e6:	4924      	ldr	r1, [pc, #144]	; (8001a78 <main+0x280>)
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <main+0x21c>)
 80019ea:	f00d f8b1 	bl	800eb50 <siprintf>
			       			       draw_menu(0);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fabc 	bl	8000f6c <draw_menu>
			       			    telnetConfigServer_Init(3324);
 80019f4:	f640 40fc 	movw	r0, #3324	; 0xcfc
 80019f8:	f00b fbb0 	bl	800d15c <telnetConfigServer_Init>
			       			    telnetConfigServer_SocketOpen();
 80019fc:	f00b fbee 	bl	800d1dc <telnetConfigServer_SocketOpen>
			       }
	  }
	  oldlinkStatus = linkStatus;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <main+0x238>)
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <main+0x240>)
 8001a06:	701a      	strb	r2, [r3, #0]
	  telnetConfigServer_InterruptCallback();
 8001a08:	f00b fab0 	bl	800cf6c <telnetConfigServer_InterruptCallback>
	  HAL_Delay(100);
 8001a0c:	e73b      	b.n	8001886 <main+0x8e>
 8001a0e:	bf00      	nop
 8001a10:	080127f0 	.word	0x080127f0
 8001a14:	200013b0 	.word	0x200013b0
 8001a18:	20000f30 	.word	0x20000f30
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	08012800 	.word	0x08012800
 8001a24:	0801280c 	.word	0x0801280c
 8001a28:	20000958 	.word	0x20000958
 8001a2c:	20000f2c 	.word	0x20000f2c
 8001a30:	20000ac8 	.word	0x20000ac8
 8001a34:	20000940 	.word	0x20000940
 8001a38:	20000ee0 	.word	0x20000ee0
 8001a3c:	08012818 	.word	0x08012818
 8001a40:	200002c5 	.word	0x200002c5
 8001a44:	0801282c 	.word	0x0801282c
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	20000540 	.word	0x20000540
 8001a50:	0801283c 	.word	0x0801283c
 8001a54:	200002c4 	.word	0x200002c4
 8001a58:	08012850 	.word	0x08012850
 8001a5c:	08012860 	.word	0x08012860
 8001a60:	20000016 	.word	0x20000016
 8001a64:	2000001e 	.word	0x2000001e
 8001a68:	2000001a 	.word	0x2000001a
 8001a6c:	08012870 	.word	0x08012870
 8001a70:	20000022 	.word	0x20000022
 8001a74:	08012880 	.word	0x08012880
 8001a78:	08012894 	.word	0x08012894

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	2228      	movs	r2, #40	; 0x28
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00c f92c 	bl	800dce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001abc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac2:	f107 0318 	add.w	r3, r7, #24
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fdc0 	bl	800664c <HAL_RCC_OscConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001ad2:	f000 f9f3 	bl	8001ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ada:	2302      	movs	r3, #2
 8001adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2102      	movs	r1, #2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 f91b 	bl	8006d2c <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001afc:	f000 f9de 	bl	8001ebc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001b00:	f005 faa4 	bl	800704c <HAL_RCC_EnableCSS>
}
 8001b04:	bf00      	nop
 8001b06:	3740      	adds	r7, #64	; 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_I2C1_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b4a:	f002 f915 	bl	8003d78 <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 f9b2 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000a44 	.word	0x20000a44
 8001b60:	40005400 	.word	0x40005400
 8001b64:	00061a80 	.word	0x00061a80

08001b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <MX_SPI1_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bba:	f005 fb09 	bl	80071d0 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f97a 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000f30 	.word	0x20000f30
 8001bd0:	40013000 	.word	0x40013000

08001bd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b096      	sub	sp, #88	; 0x58
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2220      	movs	r2, #32
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00c f86b 	bl	800dce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c14:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <MX_TIM1_Init+0x138>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c18:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c3e:	4832      	ldr	r0, [pc, #200]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c40:	f006 fac8 	bl	80081d4 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c4a:	f000 f937 	bl	8001ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c58:	4619      	mov	r1, r3
 8001c5a:	482b      	ldr	r0, [pc, #172]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c5c:	f006 fd7e 	bl	800875c <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c66:	f000 f929 	bl	8001ebc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001c6a:	4827      	ldr	r0, [pc, #156]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c6c:	f006 fb78 	bl	8008360 <HAL_TIM_OC_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c76:	f000 f921 	bl	8001ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c86:	4619      	mov	r1, r3
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001c8a:	f007 fbc3 	bl	8009414 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c94:	f000 f912 	bl	8001ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001cbe:	f006 fc1f 	bl	8008500 <HAL_TIM_OC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001cc8:	f000 f8f8 	bl	8001ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_TIM1_Init+0x134>)
 8001cf0:	f007 fc60 	bl	80095b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001cfa:	f000 f8df 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3758      	adds	r7, #88	; 0x58
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000ee4 	.word	0x20000ee4
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_DMA_Init+0x38>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2010      	movs	r0, #16
 8001d34:	f000 ffbc 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d38:	2010      	movs	r0, #16
 8001d3a:	f000 ffe5 	bl	8002d08 <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001dae:	f043 0320 	orr.w	r3, r3, #32
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <MX_GPIO_Init+0x158>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|W5500_RESET_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001dc6:	4838      	ldr	r0, [pc, #224]	; (8001ea8 <MX_GPIO_Init+0x15c>)
 8001dc8:	f001 ff82 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2110      	movs	r1, #16
 8001dd0:	4836      	ldr	r0, [pc, #216]	; (8001eac <MX_GPIO_Init+0x160>)
 8001dd2:	f001 ff7d 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin W5500_RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|W5500_RESET_Pin;
 8001dd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	482e      	ldr	r0, [pc, #184]	; (8001ea8 <MX_GPIO_Init+0x15c>)
 8001df0:	f001 fcda 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_MENU_TOGGLE_Pin */
  GPIO_InitStruct.Pin = KEY_MENU_TOGGLE_Pin;
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_GPIO_Init+0x164>)
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_MENU_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0x15c>)
 8001e08:	f001 fcce 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4822      	ldr	r0, [pc, #136]	; (8001eac <MX_GPIO_Init+0x160>)
 8001e24:	f001 fcc0 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin;
 8001e28:	f248 0302 	movw	r3, #32770	; 0x8002
 8001e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MX_GPIO_Init+0x164>)
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <MX_GPIO_Init+0x168>)
 8001e3e:	f001 fcb3 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001e42:	2340      	movs	r3, #64	; 0x40
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_GPIO_Init+0x164>)
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_GPIO_Init+0x16c>)
 8001e56:	f001 fca7 	bl	80037a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2006      	movs	r0, #6
 8001e60:	f000 ff26 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e64:	2006      	movs	r0, #6
 8001e66:	f000 ff4f 	bl	8002d08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2007      	movs	r0, #7
 8001e70:	f000 ff1e 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e74:	2007      	movs	r0, #7
 8001e76:	f000 ff47 	bl	8002d08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2017      	movs	r0, #23
 8001e80:	f000 ff16 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e84:	2017      	movs	r0, #23
 8001e86:	f000 ff3f 	bl	8002d08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2028      	movs	r0, #40	; 0x28
 8001e90:	f000 ff0e 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e94:	2028      	movs	r0, #40	; 0x28
 8001e96:	f000 ff37 	bl	8002d08 <HAL_NVIC_EnableIRQ>

}
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40011400 	.word	0x40011400

08001ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <Error_Handler+0x8>

08001ec6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	2320      	movs	r3, #32
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8001efa:	2380      	movs	r3, #128	; 0x80
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8001f08:	2320      	movs	r3, #32
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <ssd1306_SetColor+0x1c>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	7153      	strb	r3, [r2, #5]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200002c8 	.word	0x200002c8

08001f34 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	2178      	movs	r1, #120	; 0x78
 8001f40:	4846      	ldr	r0, [pc, #280]	; (800205c <ssd1306_Init+0x128>)
 8001f42:	f002 fa77 	bl	8004434 <HAL_I2C_IsDeviceReady>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8001f4c:	4b44      	ldr	r3, [pc, #272]	; (8002060 <ssd1306_Init+0x12c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e07f      	b.n	8002056 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f000 fd9a 	bl	8002a90 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001f5c:	20ae      	movs	r0, #174	; 0xae
 8001f5e:	f000 fa61 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8001f62:	20d5      	movs	r0, #213	; 0xd5
 8001f64:	f000 fa5e 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001f68:	20f0      	movs	r0, #240	; 0xf0
 8001f6a:	f000 fa5b 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001f6e:	20a8      	movs	r0, #168	; 0xa8
 8001f70:	f000 fa58 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8001f74:	f7ff ffb8 	bl	8001ee8 <height>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fa4f 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8001f86:	20d3      	movs	r0, #211	; 0xd3
 8001f88:	f000 fa4c 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 fa49 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8001f92:	2040      	movs	r0, #64	; 0x40
 8001f94:	f000 fa46 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001f98:	208d      	movs	r0, #141	; 0x8d
 8001f9a:	f000 fa43 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001f9e:	2014      	movs	r0, #20
 8001fa0:	f000 fa40 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	f000 fa3d 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 fa3a 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001fb0:	20a0      	movs	r0, #160	; 0xa0
 8001fb2:	f000 fa37 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8001fb6:	20c0      	movs	r0, #192	; 0xc0
 8001fb8:	f000 fa34 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8001fbc:	20da      	movs	r0, #218	; 0xda
 8001fbe:	f000 fa31 	bl	8002424 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <ssd1306_Init+0x130>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 8001fca:	2012      	movs	r0, #18
 8001fcc:	f000 fa2a 	bl	8002424 <ssd1306_WriteCommand>
 8001fd0:	e006      	b.n	8001fe0 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <ssd1306_Init+0x130>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f000 fa22 	bl	8002424 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 8001fe0:	2081      	movs	r0, #129	; 0x81
 8001fe2:	f000 fa1f 	bl	8002424 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <ssd1306_Init+0x130>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 8001fee:	20cf      	movs	r0, #207	; 0xcf
 8001ff0:	f000 fa18 	bl	8002424 <ssd1306_WriteCommand>
 8001ff4:	e006      	b.n	8002004 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <ssd1306_Init+0x130>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 8001ffe:	208f      	movs	r0, #143	; 0x8f
 8002000:	f000 fa10 	bl	8002424 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8002004:	20d9      	movs	r0, #217	; 0xd9
 8002006:	f000 fa0d 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800200a:	20f1      	movs	r0, #241	; 0xf1
 800200c:	f000 fa0a 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8002010:	20db      	movs	r0, #219	; 0xdb
 8002012:	f000 fa07 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8002016:	2040      	movs	r0, #64	; 0x40
 8002018:	f000 fa04 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800201c:	20a4      	movs	r0, #164	; 0xa4
 800201e:	f000 fa01 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8002022:	20a6      	movs	r0, #166	; 0xa6
 8002024:	f000 f9fe 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8002028:	202e      	movs	r0, #46	; 0x2e
 800202a:	f000 f9fb 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800202e:	20af      	movs	r0, #175	; 0xaf
 8002030:	f000 f9f8 	bl	8002424 <ssd1306_WriteCommand>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <ssd1306_Init+0x12c>)
 8002036:	2200      	movs	r2, #0
 8002038:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <ssd1306_Init+0x12c>)
 800203c:	2200      	movs	r2, #0
 800203e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <ssd1306_Init+0x12c>)
 8002042:	2200      	movs	r2, #0
 8002044:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8002046:	f000 f9e1 	bl	800240c <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800204a:	f000 f80d 	bl	8002068 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <ssd1306_Init+0x12c>)
 8002050:	2201      	movs	r2, #1
 8002052:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000a44 	.word	0x20000a44
 8002060:	200002c8 	.word	0x200002c8
 8002064:	20000075 	.word	0x20000075

08002068 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e019      	b.n	80020a8 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	3b50      	subs	r3, #80	; 0x50
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f9d2 	bl	8002424 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f9cf 	bl	8002424 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8002086:	2010      	movs	r0, #16
 8002088:	f000 f9cc 	bl	8002424 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <ssd1306_UpdateScreen+0x50>)
 8002092:	189c      	adds	r4, r3, r2
 8002094:	f7ff ff21 	bl	8001eda <width>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f000 f9dd 	bl	800245c <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	3301      	adds	r3, #1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b07      	cmp	r3, #7
 80020ac:	d9e2      	bls.n	8002074 <ssd1306_UpdateScreen+0xc>
	}
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	200002d0 	.word	0x200002d0

080020bc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	460a      	mov	r2, r1
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	4613      	mov	r3, r2
 80020ca:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <ssd1306_DrawPixel+0xe4>)
 80020ce:	795b      	ldrb	r3, [r3, #5]
 80020d0:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	b29c      	uxth	r4, r3
 80020d6:	f7ff ff0e 	bl	8001ef6 <ssd1306_GetWidth>
 80020da:	4603      	mov	r3, r0
 80020dc:	429c      	cmp	r4, r3
 80020de:	d25a      	bcs.n	8002196 <ssd1306_DrawPixel+0xda>
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	b29c      	uxth	r4, r3
 80020e4:	f7ff ff0e 	bl	8001f04 <ssd1306_GetHeight>
 80020e8:	4603      	mov	r3, r0
 80020ea:	429c      	cmp	r4, r3
 80020ec:	d253      	bcs.n	8002196 <ssd1306_DrawPixel+0xda>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <ssd1306_DrawPixel+0xe4>)
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d121      	bne.n	800214e <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 800210a:	79fc      	ldrb	r4, [r7, #7]
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	b2dd      	uxtb	r5, r3
 8002112:	462e      	mov	r6, r5
 8002114:	f7ff fee1 	bl	8001eda <width>
 8002118:	4603      	mov	r3, r0
 800211a:	4618      	mov	r0, r3
 800211c:	4603      	mov	r3, r0
 800211e:	fb03 f306 	mul.w	r3, r3, r6
 8002122:	4423      	add	r3, r4
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <ssd1306_DrawPixel+0xe8>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	b25a      	sxtb	r2, r3
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	b25b      	sxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b259      	sxtb	r1, r3
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	462b      	mov	r3, r5
 8002140:	fb00 f303 	mul.w	r3, r0, r3
 8002144:	4413      	add	r3, r2
 8002146:	b2c9      	uxtb	r1, r1
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <ssd1306_DrawPixel+0xe8>)
 800214a:	54d1      	strb	r1, [r2, r3]
 800214c:	e024      	b.n	8002198 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 800214e:	79fc      	ldrb	r4, [r7, #7]
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	b2dd      	uxtb	r5, r3
 8002156:	462e      	mov	r6, r5
 8002158:	f7ff febf 	bl	8001eda <width>
 800215c:	4603      	mov	r3, r0
 800215e:	4618      	mov	r0, r3
 8002160:	4603      	mov	r3, r0
 8002162:	fb03 f306 	mul.w	r3, r3, r6
 8002166:	4423      	add	r3, r4
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <ssd1306_DrawPixel+0xe8>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	b25a      	sxtb	r2, r3
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	b25b      	sxtb	r3, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	b25b      	sxtb	r3, r3
 8002180:	4013      	ands	r3, r2
 8002182:	b259      	sxtb	r1, r3
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	462b      	mov	r3, r5
 8002188:	fb00 f303 	mul.w	r3, r0, r3
 800218c:	4413      	add	r3, r2
 800218e:	b2c9      	uxtb	r1, r1
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <ssd1306_DrawPixel+0xe8>)
 8002192:	54d1      	strb	r1, [r2, r3]
 8002194:	e000      	b.n	8002198 <ssd1306_DrawPixel+0xdc>
		return;
 8002196:	bf00      	nop
	}
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002c8 	.word	0x200002c8
 80021a4:	200002d0 	.word	0x200002d0

080021a8 <ssd1306_DrawBitmap>:
//   pBMP - pointer to array containing bitmap
// note: each '1' bit in the bitmap will be drawn as a pixel
//       each '0' bit in the will not be drawn (transparent bitmap)
// bitmap: one byte per 8 vertical pixels, LSB top, truncate bottom bits
void ssd1306_DrawBitmap(uint8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	4603      	mov	r3, r0
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	460b      	mov	r3, r1
 80021c0:	717b      	strb	r3, [r7, #5]
 80021c2:	4613      	mov	r3, r2
 80021c4:	713b      	strb	r3, [r7, #4]
	uint8_t pX;
	uint8_t pY;
	uint8_t tmpCh;
	uint8_t bL;

	pY = Y;
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 80021ca:	e039      	b.n	8002240 <ssd1306_DrawBitmap+0x98>
	{
		pX = X;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 80021d0:	e02d      	b.n	800222e <ssd1306_DrawBitmap+0x86>
		{
			bL = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	733b      	strb	r3, [r7, #12]
			tmpCh = *pBMP++;
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	623a      	str	r2, [r7, #32]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	737b      	strb	r3, [r7, #13]
			if (tmpCh)
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d020      	beq.n	8002228 <ssd1306_DrawBitmap+0x80>
			{
				while (bL < 8)
 80021e6:	e01b      	b.n	8002220 <ssd1306_DrawBitmap+0x78>
				{
					if (tmpCh & 0x01) ssd1306_DrawPixel(pX,pY + bL);
 80021e8:	7b7b      	ldrb	r3, [r7, #13]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <ssd1306_DrawBitmap+0x5c>
 80021f2:	7bba      	ldrb	r2, [r7, #14]
 80021f4:	7b3b      	ldrb	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff5c 	bl	80020bc <ssd1306_DrawPixel>
					tmpCh >>= 1;
 8002204:	7b7b      	ldrb	r3, [r7, #13]
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	737b      	strb	r3, [r7, #13]
					if (tmpCh)
 800220a:	7b7b      	ldrb	r3, [r7, #13]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <ssd1306_DrawBitmap+0x70>
					{
						bL++;
 8002210:	7b3b      	ldrb	r3, [r7, #12]
 8002212:	3301      	adds	r3, #1
 8002214:	733b      	strb	r3, [r7, #12]
 8002216:	e003      	b.n	8002220 <ssd1306_DrawBitmap+0x78>
					}
					else
					{
						pX++;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
						break;
 800221e:	e006      	b.n	800222e <ssd1306_DrawBitmap+0x86>
				while (bL < 8)
 8002220:	7b3b      	ldrb	r3, [r7, #12]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9e0      	bls.n	80021e8 <ssd1306_DrawBitmap+0x40>
 8002226:	e002      	b.n	800222e <ssd1306_DrawBitmap+0x86>
					}
				}
			}
			else
			{
				pX++;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
		while (pX < X + W)
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	79f9      	ldrb	r1, [r7, #7]
 8002232:	797b      	ldrb	r3, [r7, #5]
 8002234:	440b      	add	r3, r1
 8002236:	429a      	cmp	r2, r3
 8002238:	dbcb      	blt.n	80021d2 <ssd1306_DrawBitmap+0x2a>
			}
		}
		pY += 8;
 800223a:	7bbb      	ldrb	r3, [r7, #14]
 800223c:	3308      	adds	r3, #8
 800223e:	73bb      	strb	r3, [r7, #14]
	while (pY < Y + H)
 8002240:	7bba      	ldrb	r2, [r7, #14]
 8002242:	79b9      	ldrb	r1, [r7, #6]
 8002244:	793b      	ldrb	r3, [r7, #4]
 8002246:	440b      	add	r3, r1
 8002248:	429a      	cmp	r2, r3
 800224a:	dbbf      	blt.n	80021cc <ssd1306_DrawBitmap+0x24>
	}
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
	...

08002258 <ssd1306_WriteChar>:

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	e883 0006 	stmia.w	r3, {r1, r2}
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002268:	f7ff fe37 	bl	8001eda <width>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <ssd1306_WriteChar+0x120>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	793b      	ldrb	r3, [r7, #4]
 8002278:	440b      	add	r3, r1
 800227a:	429a      	cmp	r2, r3
 800227c:	dd0a      	ble.n	8002294 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 800227e:	f7ff fe33 	bl	8001ee8 <height>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <ssd1306_WriteChar+0x120>)
 8002288:	885b      	ldrh	r3, [r3, #2]
 800228a:	4619      	mov	r1, r3
 800228c:	797b      	ldrb	r3, [r7, #5]
 800228e:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	dc01      	bgt.n	8002298 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e06a      	b.n	800236e <ssd1306_WriteChar+0x116>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	e059      	b.n	8002352 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	3b20      	subs	r3, #32
 80022a4:	7979      	ldrb	r1, [r7, #5]
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	440b      	add	r3, r1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e041      	b.n	8002342 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d011      	beq.n	80022f2 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <ssd1306_WriteChar+0x120>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4413      	add	r3, r2
 80022da:	b2d8      	uxtb	r0, r3
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <ssd1306_WriteChar+0x120>)
 80022de:	885b      	ldrh	r3, [r3, #2]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7ff fee6 	bl	80020bc <ssd1306_DrawPixel>
 80022f0:	e024      	b.n	800233c <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <ssd1306_WriteChar+0x120>)
 80022f4:	795b      	ldrb	r3, [r3, #5]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf0c      	ite	eq
 80022fa:	2301      	moveq	r3, #1
 80022fc:	2300      	movne	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <ssd1306_WriteChar+0x120>)
 8002304:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <ssd1306_WriteChar+0x120>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b2d8      	uxtb	r0, r3
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <ssd1306_WriteChar+0x120>)
 8002316:	885b      	ldrh	r3, [r3, #2]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff feca 	bl	80020bc <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <ssd1306_WriteChar+0x120>)
 800232a:	795b      	ldrb	r3, [r3, #5]
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <ssd1306_WriteChar+0x120>)
 800233a:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3301      	adds	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	793b      	ldrb	r3, [r7, #4]
 8002344:	461a      	mov	r2, r3
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4293      	cmp	r3, r2
 800234a:	d3b8      	bcc.n	80022be <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	461a      	mov	r2, r3
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4293      	cmp	r3, r2
 800235a:	d3a0      	bcc.n	800229e <ssd1306_WriteChar+0x46>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <ssd1306_WriteChar+0x120>)
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	793b      	ldrb	r3, [r7, #4]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <ssd1306_WriteChar+0x120>)
 800236a:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200002c8 	.word	0x200002c8

0800237c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 800238a:	e012      	b.n	80023b2 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	7818      	ldrb	r0, [r3, #0]
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002396:	f7ff ff5f 	bl	8002258 <ssd1306_WriteChar>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d002      	beq.n	80023ac <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	e008      	b.n	80023be <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
	while (*str)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e8      	bne.n	800238c <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	781b      	ldrb	r3, [r3, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	460a      	mov	r2, r1
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <ssd1306_SetCursor+0x2c>)
 80023de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <ssd1306_SetCursor+0x2c>)
 80023e6:	805a      	strh	r2, [r3, #2]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200002c8 	.word	0x200002c8

080023f8 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}

void ssd1306_FlipScreenVertically()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 80023fc:	20a1      	movs	r0, #161	; 0xa1
 80023fe:	f000 f811 	bl	8002424 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8002402:	20c8      	movs	r0, #200	; 0xc8
 8002404:	f000 f80e 	bl	8002424 <ssd1306_WriteCommand>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8002410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002414:	2100      	movs	r1, #0
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <ssd1306_Clear+0x14>)
 8002418:	f00b fc66 	bl	800dce8 <memset>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200002d0 	.word	0x200002d0

08002424 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 800242e:	bf00      	nop
 8002430:	4809      	ldr	r0, [pc, #36]	; (8002458 <ssd1306_WriteCommand+0x34>)
 8002432:	f002 fba2 	bl	8004b7a <HAL_I2C_GetState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b20      	cmp	r3, #32
 800243a:	d1f9      	bne.n	8002430 <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 800243c:	2301      	movs	r3, #1
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	2200      	movs	r2, #0
 8002448:	2178      	movs	r1, #120	; 0x78
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <ssd1306_WriteCommand+0x34>)
 800244c:	f001 fe96 	bl	800417c <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000a44 	.word	0x20000a44

0800245c <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8002468:	bf00      	nop
 800246a:	480a      	ldr	r0, [pc, #40]	; (8002494 <ssd1306_WriteData+0x38>)
 800246c:	f002 fb85 	bl	8004b7a <HAL_I2C_GetState>
 8002470:	4603      	mov	r3, r0
 8002472:	2b20      	cmp	r3, #32
 8002474:	d1f9      	bne.n	800246a <ssd1306_WriteData+0xe>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2301      	movs	r3, #1
 8002480:	2240      	movs	r2, #64	; 0x40
 8002482:	2178      	movs	r1, #120	; 0x78
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <ssd1306_WriteData+0x38>)
 8002486:	f001 fe79 	bl	800417c <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000a44 	.word	0x20000a44

08002498 <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_MspInit+0x5c>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_MspInit+0x5c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_MspInit+0x5c>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_MspInit+0x5c>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_MspInit+0x5c>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_MspInit+0x5c>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_MspInit+0x60>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_MspInit+0x60>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000

08002510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a30      	ldr	r2, [pc, #192]	; (80025ec <HAL_I2C_MspInit+0xdc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d159      	bne.n	80025e4 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a2e      	ldr	r2, [pc, #184]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23c0      	movs	r3, #192	; 0xc0
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	4826      	ldr	r0, [pc, #152]	; (80025f4 <HAL_I2C_MspInit+0xe4>)
 800255c:	f001 f924 	bl	80037a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 8002566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_I2C_MspInit+0xe0>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 800257a:	4a20      	ldr	r2, [pc, #128]	; (80025fc <HAL_I2C_MspInit+0xec>)
 800257c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 8002580:	2210      	movs	r2, #16
 8002582:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80025a8:	4813      	ldr	r0, [pc, #76]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 80025aa:	f000 fbd1 	bl	8002d50 <HAL_DMA_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80025b4:	f7ff fc82 	bl	8001ebc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_I2C_MspInit+0xe8>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	201f      	movs	r0, #31
 80025ca:	f000 fb71 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025ce:	201f      	movs	r0, #31
 80025d0:	f000 fb9a 	bl	8002d08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2020      	movs	r0, #32
 80025da:	f000 fb69 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80025de:	2020      	movs	r0, #32
 80025e0:	f000 fb92 	bl	8002d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025e4:	bf00      	nop
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40005400 	.word	0x40005400
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010c00 	.word	0x40010c00
 80025f8:	20000a00 	.word	0x20000a00
 80025fc:	4002006c 	.word	0x4002006c

08002600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_SPI_MspInit+0x98>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d137      	bne.n	8002690 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_SPI_MspInit+0x9c>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_SPI_MspInit+0x9c>)
 8002626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_SPI_MspInit+0x9c>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_SPI_MspInit+0x9c>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_SPI_MspInit+0x9c>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_SPI_MspInit+0x9c>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = W5500_SCK_Pin|W5500_MO_Pin;
 8002650:	23a0      	movs	r3, #160	; 0xa0
 8002652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4619      	mov	r1, r3
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <HAL_SPI_MspInit+0xa0>)
 8002664:	f001 f8a0 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W5500_MI_Pin;
 8002668:	2340      	movs	r3, #64	; 0x40
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002670:	2301      	movs	r3, #1
 8002672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(W5500_MI_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	4809      	ldr	r0, [pc, #36]	; (80026a0 <HAL_SPI_MspInit+0xa0>)
 800267c:	f001 f894 	bl	80037a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2023      	movs	r0, #35	; 0x23
 8002686:	f000 fb13 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800268a:	2023      	movs	r0, #35	; 0x23
 800268c:	f000 fb3c 	bl	8002d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40013000 	.word	0x40013000
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800

080026a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_TIM_Base_MspInit+0x34>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10b      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_TIM_Base_MspInit+0x38>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40021000 	.word	0x40021000

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80026e4:	f004 fd3c 	bl	8007160 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <NMI_Handler+0x8>

080026ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <MemManage_Handler+0x4>

080026f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <BusFault_Handler+0x4>

080026fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <UsageFault_Handler+0x4>

08002702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <SysTick_Handler+0x2c>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <SysTick_Handler+0x2c>)
 8002736:	801a      	strh	r2, [r3, #0]
	if(ticks == 1000) {
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SysTick_Handler+0x2c>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002740:	d104      	bne.n	800274c <SysTick_Handler+0x24>
	  DHCP_time_handler();
 8002742:	f008 fb93 	bl	800ae6c <DHCP_time_handler>
	  ticks = 0;
 8002746:	4b03      	ldr	r3, [pc, #12]	; (8002754 <SysTick_Handler+0x2c>)
 8002748:	2200      	movs	r2, #0
 800274a:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 f984 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200004d0 	.word	0x200004d0

08002758 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//  HAL_Delay(50);
	//  if (HAL_GPIO_ReadPin(KEY_MENU_TOGGLE_GPIO_Port, KEY_MENU_TOGGLE_Pin) == GPIO_PIN_SET)
		{INTkeyMenu_handler();}
 800275c:	f7fe fff6 	bl	800174c <INTkeyMenu_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_MENU_TOGGLE_Pin);
 8002760:	2001      	movs	r0, #1
 8002762:	f001 fae7 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}

0800276a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	//  HAL_Delay(50);
	 // if (HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin) == GPIO_PIN_SET)
	  {INTkeyDown_handler();}
 800276e:	f7ff f817 	bl	80017a0 <INTkeyDown_handler>


  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_DN_Pin);
 8002772:	2002      	movs	r0, #2
 8002774:	f001 fade 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <DMA1_Channel6_IRQHandler+0x10>)
 8002782:	f000 fd9b 	bl	80032bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000a00 	.word	0x20000a00

08002790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	INTW5500_Handler();
 8002794:	f7ff f822 	bl	80017dc <INTW5500_Handler>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_MI_Pin);
 8002798:	2040      	movs	r0, #64	; 0x40
 800279a:	f001 facb 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <I2C1_EV_IRQHandler+0x10>)
 80027aa:	f001 ff71 	bl	8004690 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000a44 	.word	0x20000a44

080027b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <I2C1_ER_IRQHandler+0x10>)
 80027be:	f002 f8d8 	bl	8004972 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000a44 	.word	0x20000a44

080027cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <SPI1_IRQHandler+0x10>)
 80027d2:	f005 fac1 	bl	8007d58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000f30 	.word	0x20000f30

080027e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//  HAL_Delay(50);
		//  if (HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) == GPIO_PIN_SET)
		  {INTkeyUp_handler();}
 80027e4:	f7fe ffbe 	bl	8001764 <INTkeyUp_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 80027e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027ec:	f001 faa2 	bl	8003d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <_kill>:

int _kill(int pid, int sig)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800280c:	f00b fa2c 	bl	800dc68 <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	2216      	movs	r2, #22
 8002814:	601a      	str	r2, [r3, #0]
	return -1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_exit>:

void _exit (int status)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800282a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffe7 	bl	8002802 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002834:	e7fe      	b.n	8002834 <_exit+0x12>

08002836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e00a      	b.n	800285e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002848:	f3af 8000 	nop.w
 800284c:	4601      	mov	r1, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	dbf0      	blt.n	8002848 <_read+0x12>
	}

return len;
 8002866:	687b      	ldr	r3, [r7, #4]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e009      	b.n	8002896 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	dbf1      	blt.n	8002882 <_write+0x12>
	}
	return len;
 800289e:	687b      	ldr	r3, [r7, #4]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_close>:

int _close(int file)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	return -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ce:	605a      	str	r2, [r3, #4]
	return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <_isatty>:

int _isatty(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <_sbrk+0x5c>)
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <_sbrk+0x60>)
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <_sbrk+0x64>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <_sbrk+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d207      	bcs.n	8002948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002938:	f00b f996 	bl	800dc68 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	220c      	movs	r2, #12
 8002940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002946:	e009      	b.n	800295c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <_sbrk+0x64>)
 8002958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20010000 	.word	0x20010000
 8002968:	00000400 	.word	0x00000400
 800296c:	200004d4 	.word	0x200004d4
 8002970:	20001400 	.word	0x20001400

08002974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029a6:	f7ff ffe5 	bl	8002974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f00b f963 	bl	800dc74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ae:	f7fe ff23 	bl	80017f8 <main>
  bx lr
 80029b2:	4770      	bx	lr
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 80029bc:	08013e20 	.word	0x08013e20
  ldr r2, =_sbss
 80029c0:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80029c4:	200013fc 	.word	0x200013fc

080029c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_2_IRQHandler>
	...

080029cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_Init+0x28>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_Init+0x28>)
 80029d6:	f043 0310 	orr.w	r3, r3, #16
 80029da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f000 f947 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f808 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fd60 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x54>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f98e 	bl	8002d38 <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a34:	f000 f93c 	bl	8002cb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	; (8002a54 <HAL_InitTick+0x5c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000078 	.word	0x20000078
 8002a50:	20000080 	.word	0x20000080
 8002a54:	2000007c 	.word	0x2000007c

08002a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_IncTick+0x1c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_IncTick+0x20>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <HAL_IncTick+0x20>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000080 	.word	0x20000080
 8002a78:	200013c4 	.word	0x200013c4

08002a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_GetTick+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	200013c4 	.word	0x200013c4

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffe0 	bl	8002a7c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000080 	.word	0x20000080

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <__NVIC_EnableIRQ+0x34>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c3c:	d301      	bcc.n	8002c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00f      	b.n	8002c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <SysTick_Config+0x40>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c50:	f7ff ff90 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SysTick_Config+0x40>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SysTick_Config+0x40>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	d00f      	beq.n	8002c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b06      	cmp	r3, #6
 8002c82:	d00c      	beq.n	8002c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d009      	beq.n	8002c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d006      	beq.n	8002c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d003      	beq.n	8002c9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c96:	2192      	movs	r1, #146	; 0x92
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002c9a:	f7ff f914 	bl	8001ec6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff1a 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	0801289c 	.word	0x0801289c

08002cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d903      	bls.n	8002cd0 <HAL_NVIC_SetPriority+0x20>
 8002cc8:	21aa      	movs	r1, #170	; 0xaa
 8002cca:	480e      	ldr	r0, [pc, #56]	; (8002d04 <HAL_NVIC_SetPriority+0x54>)
 8002ccc:	f7ff f8fb 	bl	8001ec6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d903      	bls.n	8002cde <HAL_NVIC_SetPriority+0x2e>
 8002cd6:	21ab      	movs	r1, #171	; 0xab
 8002cd8:	480a      	ldr	r0, [pc, #40]	; (8002d04 <HAL_NVIC_SetPriority+0x54>)
 8002cda:	f7ff f8f4 	bl	8001ec6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cde:	f7ff ff1f 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	6978      	ldr	r0, [r7, #20]
 8002cea:	f7ff ff6d 	bl	8002bc8 <NVIC_EncodePriority>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff3c 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	0801289c 	.word	0x0801289c

08002d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da03      	bge.n	8002d22 <HAL_NVIC_EnableIRQ+0x1a>
 8002d1a:	21be      	movs	r1, #190	; 0xbe
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_NVIC_EnableIRQ+0x2c>)
 8002d1e:	f7ff f8d2 	bl	8001ec6 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff08 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	0801289c 	.word	0x0801289c

08002d38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff73 	bl	8002c2c <SysTick_Config>
 8002d46:	4603      	mov	r3, r0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e109      	b.n	8002f7a <HAL_DMA_Init+0x22a>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a86      	ldr	r2, [pc, #536]	; (8002f84 <HAL_DMA_Init+0x234>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d03a      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a84      	ldr	r2, [pc, #528]	; (8002f88 <HAL_DMA_Init+0x238>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d035      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a83      	ldr	r2, [pc, #524]	; (8002f8c <HAL_DMA_Init+0x23c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d030      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a81      	ldr	r2, [pc, #516]	; (8002f90 <HAL_DMA_Init+0x240>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_DMA_Init+0x244>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d026      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a7e      	ldr	r2, [pc, #504]	; (8002f98 <HAL_DMA_Init+0x248>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d021      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7d      	ldr	r2, [pc, #500]	; (8002f9c <HAL_DMA_Init+0x24c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01c      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7b      	ldr	r2, [pc, #492]	; (8002fa0 <HAL_DMA_Init+0x250>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d017      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7a      	ldr	r2, [pc, #488]	; (8002fa4 <HAL_DMA_Init+0x254>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a78      	ldr	r2, [pc, #480]	; (8002fa8 <HAL_DMA_Init+0x258>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00d      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a77      	ldr	r2, [pc, #476]	; (8002fac <HAL_DMA_Init+0x25c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_DMA_Init+0x260>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <HAL_DMA_Init+0x96>
 8002dde:	219a      	movs	r1, #154	; 0x9a
 8002de0:	4874      	ldr	r0, [pc, #464]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002de2:	f7ff f870 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <HAL_DMA_Init+0xb8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d008      	beq.n	8002e08 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfe:	d003      	beq.n	8002e08 <HAL_DMA_Init+0xb8>
 8002e00:	219b      	movs	r1, #155	; 0x9b
 8002e02:	486c      	ldr	r0, [pc, #432]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e04:	f7ff f85f 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d007      	beq.n	8002e20 <HAL_DMA_Init+0xd0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Init+0xd0>
 8002e18:	219c      	movs	r1, #156	; 0x9c
 8002e1a:	4866      	ldr	r0, [pc, #408]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e1c:	f7ff f853 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Init+0xe8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_Init+0xe8>
 8002e30:	219d      	movs	r1, #157	; 0x9d
 8002e32:	4860      	ldr	r0, [pc, #384]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e34:	f7ff f847 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <HAL_DMA_Init+0x10c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e48:	d008      	beq.n	8002e5c <HAL_DMA_Init+0x10c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_Init+0x10c>
 8002e54:	219e      	movs	r1, #158	; 0x9e
 8002e56:	4857      	ldr	r0, [pc, #348]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e58:	f7ff f835 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_DMA_Init+0x130>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d008      	beq.n	8002e80 <HAL_DMA_Init+0x130>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_Init+0x130>
 8002e78:	219f      	movs	r1, #159	; 0x9f
 8002e7a:	484e      	ldr	r0, [pc, #312]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e7c:	f7ff f823 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_DMA_Init+0x148>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_Init+0x148>
 8002e90:	21a0      	movs	r1, #160	; 0xa0
 8002e92:	4848      	ldr	r0, [pc, #288]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002e94:	f7ff f817 	bl	8001ec6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_DMA_Init+0x176>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_DMA_Init+0x176>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Init+0x176>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ebc:	d003      	beq.n	8002ec6 <HAL_DMA_Init+0x176>
 8002ebe:	21a1      	movs	r1, #161	; 0xa1
 8002ec0:	483c      	ldr	r0, [pc, #240]	; (8002fb4 <HAL_DMA_Init+0x264>)
 8002ec2:	f7ff f800 	bl	8001ec6 <assert_failed>

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <HAL_DMA_Init+0x268>)
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d80f      	bhi.n	8002ef2 <HAL_DMA_Init+0x1a2>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_DMA_Init+0x26c>)
 8002eda:	4413      	add	r3, r2
 8002edc:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <HAL_DMA_Init+0x270>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <HAL_DMA_Init+0x274>)
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef0:	e00e      	b.n	8002f10 <HAL_DMA_Init+0x1c0>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_DMA_Init+0x278>)
 8002efa:	4413      	add	r3, r2
 8002efc:	4a30      	ldr	r2, [pc, #192]	; (8002fc0 <HAL_DMA_Init+0x270>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	009a      	lsls	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_DMA_Init+0x27c>)
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40020008 	.word	0x40020008
 8002f88:	4002001c 	.word	0x4002001c
 8002f8c:	40020030 	.word	0x40020030
 8002f90:	40020044 	.word	0x40020044
 8002f94:	40020058 	.word	0x40020058
 8002f98:	4002006c 	.word	0x4002006c
 8002f9c:	40020080 	.word	0x40020080
 8002fa0:	40020408 	.word	0x40020408
 8002fa4:	4002041c 	.word	0x4002041c
 8002fa8:	40020430 	.word	0x40020430
 8002fac:	40020444 	.word	0x40020444
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	080128d8 	.word	0x080128d8
 8002fb8:	40020407 	.word	0x40020407
 8002fbc:	bffdfff8 	.word	0xbffdfff8
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	bffdfbf8 	.word	0xbffdfbf8
 8002fcc:	40020400 	.word	0x40020400

08002fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x20>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d304      	bcc.n	8002ffa <HAL_DMA_Start_IT+0x2a>
 8002ff0:	f240 116f 	movw	r1, #367	; 0x16f
 8002ff4:	482c      	ldr	r0, [pc, #176]	; (80030a8 <HAL_DMA_Start_IT+0xd8>)
 8002ff6:	f7fe ff66 	bl	8001ec6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_DMA_Start_IT+0x38>
 8003004:	2302      	movs	r3, #2
 8003006:	e04a      	b.n	800309e <HAL_DMA_Start_IT+0xce>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003016:	2b01      	cmp	r3, #1
 8003018:	d13a      	bne.n	8003090 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fb84 	bl	800374c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 020e 	orr.w	r2, r2, #14
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e00f      	b.n	800307e <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0204 	bic.w	r2, r2, #4
 800306c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 020a 	orr.w	r2, r2, #10
 800307c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e005      	b.n	800309c <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003098:	2302      	movs	r3, #2
 800309a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	080128d8 	.word	0x080128d8

080030ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d005      	beq.n	80030ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e0d6      	b.n	800327c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020e 	bic.w	r2, r2, #14
 80030dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_DMA_Abort_IT+0x1dc>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d958      	bls.n	80031ac <HAL_DMA_Abort_IT+0x100>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a63      	ldr	r2, [pc, #396]	; (800328c <HAL_DMA_Abort_IT+0x1e0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d04f      	beq.n	80031a4 <HAL_DMA_Abort_IT+0xf8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_DMA_Abort_IT+0x1e4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d048      	beq.n	80031a0 <HAL_DMA_Abort_IT+0xf4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_DMA_Abort_IT+0x1e8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d040      	beq.n	800319a <HAL_DMA_Abort_IT+0xee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_DMA_Abort_IT+0x1ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d038      	beq.n	8003194 <HAL_DMA_Abort_IT+0xe8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5d      	ldr	r2, [pc, #372]	; (800329c <HAL_DMA_Abort_IT+0x1f0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d030      	beq.n	800318e <HAL_DMA_Abort_IT+0xe2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5b      	ldr	r2, [pc, #364]	; (80032a0 <HAL_DMA_Abort_IT+0x1f4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d028      	beq.n	8003188 <HAL_DMA_Abort_IT+0xdc>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_DMA_Abort_IT+0x1dc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d020      	beq.n	8003182 <HAL_DMA_Abort_IT+0xd6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a57      	ldr	r2, [pc, #348]	; (80032a4 <HAL_DMA_Abort_IT+0x1f8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_DMA_Abort_IT+0xd2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_DMA_Abort_IT+0x1fc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d012      	beq.n	800317a <HAL_DMA_Abort_IT+0xce>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_DMA_Abort_IT+0x200>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00a      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_DMA_Abort_IT+0x204>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d102      	bne.n	800316e <HAL_DMA_Abort_IT+0xc2>
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316c:	e01b      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 800316e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003172:	e018      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 8003174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003178:	e015      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 800317a:	2310      	movs	r3, #16
 800317c:	e013      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 800317e:	2301      	movs	r3, #1
 8003180:	e011      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 8003182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003186:	e00e      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 8003188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800318c:	e00b      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 800318e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003192:	e008      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 8003194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003198:	e005      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 800319a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800319e:	e002      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 80031a0:	2310      	movs	r3, #16
 80031a2:	e000      	b.n	80031a6 <HAL_DMA_Abort_IT+0xfa>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4a43      	ldr	r2, [pc, #268]	; (80032b4 <HAL_DMA_Abort_IT+0x208>)
 80031a8:	6053      	str	r3, [r2, #4]
 80031aa:	e057      	b.n	800325c <HAL_DMA_Abort_IT+0x1b0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a36      	ldr	r2, [pc, #216]	; (800328c <HAL_DMA_Abort_IT+0x1e0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04f      	beq.n	8003256 <HAL_DMA_Abort_IT+0x1aa>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a35      	ldr	r2, [pc, #212]	; (8003290 <HAL_DMA_Abort_IT+0x1e4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d048      	beq.n	8003252 <HAL_DMA_Abort_IT+0x1a6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a33      	ldr	r2, [pc, #204]	; (8003294 <HAL_DMA_Abort_IT+0x1e8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d040      	beq.n	800324c <HAL_DMA_Abort_IT+0x1a0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a32      	ldr	r2, [pc, #200]	; (8003298 <HAL_DMA_Abort_IT+0x1ec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d038      	beq.n	8003246 <HAL_DMA_Abort_IT+0x19a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_DMA_Abort_IT+0x1f0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d030      	beq.n	8003240 <HAL_DMA_Abort_IT+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <HAL_DMA_Abort_IT+0x1f4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d028      	beq.n	800323a <HAL_DMA_Abort_IT+0x18e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a26      	ldr	r2, [pc, #152]	; (8003288 <HAL_DMA_Abort_IT+0x1dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d020      	beq.n	8003234 <HAL_DMA_Abort_IT+0x188>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <HAL_DMA_Abort_IT+0x1f8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d019      	beq.n	8003230 <HAL_DMA_Abort_IT+0x184>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_DMA_Abort_IT+0x1fc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d012      	beq.n	800322c <HAL_DMA_Abort_IT+0x180>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_DMA_Abort_IT+0x200>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00a      	beq.n	8003226 <HAL_DMA_Abort_IT+0x17a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_DMA_Abort_IT+0x204>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d102      	bne.n	8003220 <HAL_DMA_Abort_IT+0x174>
 800321a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321e:	e01b      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003224:	e018      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322a:	e015      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 800322c:	2310      	movs	r3, #16
 800322e:	e013      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003230:	2301      	movs	r3, #1
 8003232:	e011      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003238:	e00e      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 800323a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800323e:	e00b      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003244:	e008      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324a:	e005      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 800324c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003250:	e002      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003252:	2310      	movs	r3, #16
 8003254:	e000      	b.n	8003258 <HAL_DMA_Abort_IT+0x1ac>
 8003256:	2301      	movs	r3, #1
 8003258:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_DMA_Abort_IT+0x20c>)
 800325a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
    } 
  }
  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40020080 	.word	0x40020080
 800328c:	40020008 	.word	0x40020008
 8003290:	4002001c 	.word	0x4002001c
 8003294:	40020030 	.word	0x40020030
 8003298:	40020044 	.word	0x40020044
 800329c:	40020058 	.word	0x40020058
 80032a0:	4002006c 	.word	0x4002006c
 80032a4:	40020408 	.word	0x40020408
 80032a8:	4002041c 	.word	0x4002041c
 80032ac:	40020430 	.word	0x40020430
 80032b0:	40020444 	.word	0x40020444
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020000 	.word	0x40020000

080032bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80d6 	beq.w	8003492 <HAL_DMA_IRQHandler+0x1d6>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80d0 	beq.w	8003492 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b9b      	ldr	r3, [pc, #620]	; (8003584 <HAL_DMA_IRQHandler+0x2c8>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d958      	bls.n	80033ce <HAL_DMA_IRQHandler+0x112>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a99      	ldr	r2, [pc, #612]	; (8003588 <HAL_DMA_IRQHandler+0x2cc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04f      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x10a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a98      	ldr	r2, [pc, #608]	; (800358c <HAL_DMA_IRQHandler+0x2d0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d048      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x106>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a96      	ldr	r2, [pc, #600]	; (8003590 <HAL_DMA_IRQHandler+0x2d4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_DMA_IRQHandler+0x100>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a95      	ldr	r2, [pc, #596]	; (8003594 <HAL_DMA_IRQHandler+0x2d8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d038      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xfa>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a93      	ldr	r2, [pc, #588]	; (8003598 <HAL_DMA_IRQHandler+0x2dc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d030      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xf4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a92      	ldr	r2, [pc, #584]	; (800359c <HAL_DMA_IRQHandler+0x2e0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d028      	beq.n	80033aa <HAL_DMA_IRQHandler+0xee>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a89      	ldr	r2, [pc, #548]	; (8003584 <HAL_DMA_IRQHandler+0x2c8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d020      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xe8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a8e      	ldr	r2, [pc, #568]	; (80035a0 <HAL_DMA_IRQHandler+0x2e4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d019      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xe4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a8c      	ldr	r2, [pc, #560]	; (80035a4 <HAL_DMA_IRQHandler+0x2e8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d012      	beq.n	800339c <HAL_DMA_IRQHandler+0xe0>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a8b      	ldr	r2, [pc, #556]	; (80035a8 <HAL_DMA_IRQHandler+0x2ec>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00a      	beq.n	8003396 <HAL_DMA_IRQHandler+0xda>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a89      	ldr	r2, [pc, #548]	; (80035ac <HAL_DMA_IRQHandler+0x2f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d102      	bne.n	8003390 <HAL_DMA_IRQHandler+0xd4>
 800338a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800338e:	e01b      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 8003390:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003394:	e018      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 8003396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339a:	e015      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 800339c:	2340      	movs	r3, #64	; 0x40
 800339e:	e013      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e011      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033a8:	e00e      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ae:	e00b      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033b4:	e008      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ba:	e005      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c0:	e002      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033c2:	2340      	movs	r3, #64	; 0x40
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_IRQHandler+0x10c>
 80033c6:	2304      	movs	r3, #4
 80033c8:	4a79      	ldr	r2, [pc, #484]	; (80035b0 <HAL_DMA_IRQHandler+0x2f4>)
 80033ca:	6053      	str	r3, [r2, #4]
 80033cc:	e057      	b.n	800347e <HAL_DMA_IRQHandler+0x1c2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6d      	ldr	r2, [pc, #436]	; (8003588 <HAL_DMA_IRQHandler+0x2cc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04f      	beq.n	8003478 <HAL_DMA_IRQHandler+0x1bc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_DMA_IRQHandler+0x2d0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d048      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1b8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6a      	ldr	r2, [pc, #424]	; (8003590 <HAL_DMA_IRQHandler+0x2d4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d040      	beq.n	800346e <HAL_DMA_IRQHandler+0x1b2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_DMA_IRQHandler+0x2d8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d038      	beq.n	8003468 <HAL_DMA_IRQHandler+0x1ac>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a67      	ldr	r2, [pc, #412]	; (8003598 <HAL_DMA_IRQHandler+0x2dc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d030      	beq.n	8003462 <HAL_DMA_IRQHandler+0x1a6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a65      	ldr	r2, [pc, #404]	; (800359c <HAL_DMA_IRQHandler+0x2e0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d028      	beq.n	800345c <HAL_DMA_IRQHandler+0x1a0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5d      	ldr	r2, [pc, #372]	; (8003584 <HAL_DMA_IRQHandler+0x2c8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d020      	beq.n	8003456 <HAL_DMA_IRQHandler+0x19a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a61      	ldr	r2, [pc, #388]	; (80035a0 <HAL_DMA_IRQHandler+0x2e4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_DMA_IRQHandler+0x196>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a60      	ldr	r2, [pc, #384]	; (80035a4 <HAL_DMA_IRQHandler+0x2e8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d012      	beq.n	800344e <HAL_DMA_IRQHandler+0x192>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_DMA_IRQHandler+0x2ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00a      	beq.n	8003448 <HAL_DMA_IRQHandler+0x18c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <HAL_DMA_IRQHandler+0x2f0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d102      	bne.n	8003442 <HAL_DMA_IRQHandler+0x186>
 800343c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003440:	e01b      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003442:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003446:	e018      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344c:	e015      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	e013      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003452:	2304      	movs	r3, #4
 8003454:	e011      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800345a:	e00e      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 800345c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003460:	e00b      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003462:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003466:	e008      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800346c:	e005      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 800346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003472:	e002      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	e000      	b.n	800347a <HAL_DMA_IRQHandler+0x1be>
 8003478:	2304      	movs	r3, #4
 800347a:	4a4e      	ldr	r2, [pc, #312]	; (80035b4 <HAL_DMA_IRQHandler+0x2f8>)
 800347c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8136 	beq.w	80036f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003490:	e130      	b.n	80036f4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2202      	movs	r2, #2
 8003498:	409a      	lsls	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80f8 	beq.w	8003694 <HAL_DMA_IRQHandler+0x3d8>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80f2 	beq.w	8003694 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020a 	bic.w	r2, r2, #10
 80034cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <HAL_DMA_IRQHandler+0x2c8>)
 80034de:	429a      	cmp	r2, r3
 80034e0:	d973      	bls.n	80035ca <HAL_DMA_IRQHandler+0x30e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_DMA_IRQHandler+0x2cc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d06a      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x306>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_DMA_IRQHandler+0x2d0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d063      	beq.n	80035be <HAL_DMA_IRQHandler+0x302>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a25      	ldr	r2, [pc, #148]	; (8003590 <HAL_DMA_IRQHandler+0x2d4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x2fc>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_DMA_IRQHandler+0x2d8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d038      	beq.n	800357c <HAL_DMA_IRQHandler+0x2c0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_DMA_IRQHandler+0x2dc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d030      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ba>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_DMA_IRQHandler+0x2e0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d028      	beq.n	8003570 <HAL_DMA_IRQHandler+0x2b4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_DMA_IRQHandler+0x2c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d020      	beq.n	800356a <HAL_DMA_IRQHandler+0x2ae>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_DMA_IRQHandler+0x2e4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_DMA_IRQHandler+0x2aa>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_DMA_IRQHandler+0x2e8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d012      	beq.n	8003562 <HAL_DMA_IRQHandler+0x2a6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_DMA_IRQHandler+0x2ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00a      	beq.n	800355c <HAL_DMA_IRQHandler+0x2a0>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_DMA_IRQHandler+0x2f0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d102      	bne.n	8003556 <HAL_DMA_IRQHandler+0x29a>
 8003550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003554:	e036      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355a:	e033      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 800355c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003560:	e030      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003562:	2320      	movs	r3, #32
 8003564:	e02e      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003566:	2302      	movs	r3, #2
 8003568:	e02c      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 800356a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356e:	e029      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003574:	e026      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357a:	e023      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 800357c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003580:	e020      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 8003582:	bf00      	nop
 8003584:	40020080 	.word	0x40020080
 8003588:	40020008 	.word	0x40020008
 800358c:	4002001c 	.word	0x4002001c
 8003590:	40020030 	.word	0x40020030
 8003594:	40020044 	.word	0x40020044
 8003598:	40020058 	.word	0x40020058
 800359c:	4002006c 	.word	0x4002006c
 80035a0:	40020408 	.word	0x40020408
 80035a4:	4002041c 	.word	0x4002041c
 80035a8:	40020430 	.word	0x40020430
 80035ac:	40020444 	.word	0x40020444
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020000 	.word	0x40020000
 80035b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035bc:	e002      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 80035be:	2320      	movs	r3, #32
 80035c0:	e000      	b.n	80035c4 <HAL_DMA_IRQHandler+0x308>
 80035c2:	2302      	movs	r3, #2
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_DMA_IRQHandler+0x444>)
 80035c6:	6053      	str	r3, [r2, #4]
 80035c8:	e057      	b.n	800367a <HAL_DMA_IRQHandler+0x3be>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <HAL_DMA_IRQHandler+0x448>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04f      	beq.n	8003674 <HAL_DMA_IRQHandler+0x3b8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_DMA_IRQHandler+0x44c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d048      	beq.n	8003670 <HAL_DMA_IRQHandler+0x3b4>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_DMA_IRQHandler+0x450>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0x3ae>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a48      	ldr	r2, [pc, #288]	; (8003710 <HAL_DMA_IRQHandler+0x454>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d038      	beq.n	8003664 <HAL_DMA_IRQHandler+0x3a8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_DMA_IRQHandler+0x458>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d030      	beq.n	800365e <HAL_DMA_IRQHandler+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a45      	ldr	r2, [pc, #276]	; (8003718 <HAL_DMA_IRQHandler+0x45c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d028      	beq.n	8003658 <HAL_DMA_IRQHandler+0x39c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a44      	ldr	r2, [pc, #272]	; (800371c <HAL_DMA_IRQHandler+0x460>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d020      	beq.n	8003652 <HAL_DMA_IRQHandler+0x396>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a42      	ldr	r2, [pc, #264]	; (8003720 <HAL_DMA_IRQHandler+0x464>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_DMA_IRQHandler+0x392>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_DMA_IRQHandler+0x468>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d012      	beq.n	800364a <HAL_DMA_IRQHandler+0x38e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3f      	ldr	r2, [pc, #252]	; (8003728 <HAL_DMA_IRQHandler+0x46c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00a      	beq.n	8003644 <HAL_DMA_IRQHandler+0x388>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3e      	ldr	r2, [pc, #248]	; (800372c <HAL_DMA_IRQHandler+0x470>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d102      	bne.n	800363e <HAL_DMA_IRQHandler+0x382>
 8003638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800363c:	e01b      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 800363e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003642:	e018      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003648:	e015      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 800364a:	2320      	movs	r3, #32
 800364c:	e013      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 800364e:	2302      	movs	r3, #2
 8003650:	e011      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003656:	e00e      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800365c:	e00b      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 800365e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003662:	e008      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003668:	e005      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 800366a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366e:	e002      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003670:	2320      	movs	r3, #32
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x3ba>
 8003674:	2302      	movs	r3, #2
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_DMA_IRQHandler+0x474>)
 8003678:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d034      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003692:	e02f      	b.n	80036f4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x43a>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d023      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 020e 	bic.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
    }
  }
  return;
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
}
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40020400 	.word	0x40020400
 8003704:	40020008 	.word	0x40020008
 8003708:	4002001c 	.word	0x4002001c
 800370c:	40020030 	.word	0x40020030
 8003710:	40020044 	.word	0x40020044
 8003714:	40020058 	.word	0x40020058
 8003718:	4002006c 	.word	0x4002006c
 800371c:	40020080 	.word	0x40020080
 8003720:	40020408 	.word	0x40020408
 8003724:	4002041c 	.word	0x4002041c
 8003728:	40020430 	.word	0x40020430
 800372c:	40020444 	.word	0x40020444
 8003730:	40020000 	.word	0x40020000

08003734 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f202 	lsl.w	r2, r1, r2
 8003768:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b10      	cmp	r3, #16
 8003778:	d108      	bne.n	800378c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800378a:	e007      	b.n	800379c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037b6:	2300      	movs	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4aa9      	ldr	r2, [pc, #676]	; (8003a64 <HAL_GPIO_Init+0x2bc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01b      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4aa8      	ldr	r2, [pc, #672]	; (8003a68 <HAL_GPIO_Init+0x2c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4aa7      	ldr	r2, [pc, #668]	; (8003a6c <HAL_GPIO_Init+0x2c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4aa6      	ldr	r2, [pc, #664]	; (8003a70 <HAL_GPIO_Init+0x2c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4aa5      	ldr	r2, [pc, #660]	; (8003a74 <HAL_GPIO_Init+0x2cc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4aa4      	ldr	r2, [pc, #656]	; (8003a78 <HAL_GPIO_Init+0x2d0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4aa3      	ldr	r2, [pc, #652]	; (8003a7c <HAL_GPIO_Init+0x2d4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x52>
 80037f2:	21bd      	movs	r1, #189	; 0xbd
 80037f4:	48a2      	ldr	r0, [pc, #648]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 80037f6:	f7fe fb66 	bl	8001ec6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_GPIO_Init+0x68>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x70>
 8003810:	21be      	movs	r1, #190	; 0xbe
 8003812:	489b      	ldr	r0, [pc, #620]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 8003814:	f7fe fb57 	bl	8001ec6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8235 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	f000 8230 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b11      	cmp	r3, #17
 8003832:	f000 822b 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	f000 8226 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b12      	cmp	r3, #18
 8003846:	f000 8221 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a8d      	ldr	r2, [pc, #564]	; (8003a84 <HAL_GPIO_Init+0x2dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	f000 821b 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a8b      	ldr	r2, [pc, #556]	; (8003a88 <HAL_GPIO_Init+0x2e0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	f000 8215 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a89      	ldr	r2, [pc, #548]	; (8003a8c <HAL_GPIO_Init+0x2e4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	f000 820f 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a87      	ldr	r2, [pc, #540]	; (8003a90 <HAL_GPIO_Init+0x2e8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	f000 8209 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a85      	ldr	r2, [pc, #532]	; (8003a94 <HAL_GPIO_Init+0x2ec>)
 8003880:	4293      	cmp	r3, r2
 8003882:	f000 8203 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a83      	ldr	r2, [pc, #524]	; (8003a98 <HAL_GPIO_Init+0x2f0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	f000 81fd 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b03      	cmp	r3, #3
 8003898:	f000 81f8 	beq.w	8003c8c <HAL_GPIO_Init+0x4e4>
 800389c:	21bf      	movs	r1, #191	; 0xbf
 800389e:	4878      	ldr	r0, [pc, #480]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 80038a0:	f7fe fb11 	bl	8001ec6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a4:	e1f2      	b.n	8003c8c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038a6:	2201      	movs	r2, #1
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	429a      	cmp	r2, r3
 80038c0:	f040 81e1 	bne.w	8003c86 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a67      	ldr	r2, [pc, #412]	; (8003a64 <HAL_GPIO_Init+0x2bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01b      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <HAL_GPIO_Init+0x2c0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d017      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a65      	ldr	r2, [pc, #404]	; (8003a6c <HAL_GPIO_Init+0x2c4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a64      	ldr	r2, [pc, #400]	; (8003a70 <HAL_GPIO_Init+0x2c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00f      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_GPIO_Init+0x2cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00b      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a62      	ldr	r2, [pc, #392]	; (8003a78 <HAL_GPIO_Init+0x2d0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a61      	ldr	r2, [pc, #388]	; (8003a7c <HAL_GPIO_Init+0x2d4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <HAL_GPIO_Init+0x15c>
 80038fc:	21cd      	movs	r1, #205	; 0xcd
 80038fe:	4860      	ldr	r0, [pc, #384]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 8003900:	f7fe fae1 	bl	8001ec6 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a63      	ldr	r2, [pc, #396]	; (8003a98 <HAL_GPIO_Init+0x2f0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	f000 80c6 	beq.w	8003a9c <HAL_GPIO_Init+0x2f4>
 8003910:	4a61      	ldr	r2, [pc, #388]	; (8003a98 <HAL_GPIO_Init+0x2f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f200 80ec 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003918:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <HAL_GPIO_Init+0x2e4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	f000 80be 	beq.w	8003a9c <HAL_GPIO_Init+0x2f4>
 8003920:	4a5a      	ldr	r2, [pc, #360]	; (8003a8c <HAL_GPIO_Init+0x2e4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	f200 80e4 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003928:	4a5a      	ldr	r2, [pc, #360]	; (8003a94 <HAL_GPIO_Init+0x2ec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 80b6 	beq.w	8003a9c <HAL_GPIO_Init+0x2f4>
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_GPIO_Init+0x2ec>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f200 80dc 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003938:	4a53      	ldr	r2, [pc, #332]	; (8003a88 <HAL_GPIO_Init+0x2e0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	f000 80ae 	beq.w	8003a9c <HAL_GPIO_Init+0x2f4>
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_GPIO_Init+0x2e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f200 80d4 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003948:	4a51      	ldr	r2, [pc, #324]	; (8003a90 <HAL_GPIO_Init+0x2e8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f000 80a6 	beq.w	8003a9c <HAL_GPIO_Init+0x2f4>
 8003950:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <HAL_GPIO_Init+0x2e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f200 80cc 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003958:	2b12      	cmp	r3, #18
 800395a:	d82b      	bhi.n	80039b4 <HAL_GPIO_Init+0x20c>
 800395c:	2b12      	cmp	r3, #18
 800395e:	f200 80c7 	bhi.w	8003af0 <HAL_GPIO_Init+0x348>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_GPIO_Init+0x1c0>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003a9d 	.word	0x08003a9d
 800396c:	080039bd 	.word	0x080039bd
 8003970:	08003a0f 	.word	0x08003a0f
 8003974:	08003aeb 	.word	0x08003aeb
 8003978:	08003af1 	.word	0x08003af1
 800397c:	08003af1 	.word	0x08003af1
 8003980:	08003af1 	.word	0x08003af1
 8003984:	08003af1 	.word	0x08003af1
 8003988:	08003af1 	.word	0x08003af1
 800398c:	08003af1 	.word	0x08003af1
 8003990:	08003af1 	.word	0x08003af1
 8003994:	08003af1 	.word	0x08003af1
 8003998:	08003af1 	.word	0x08003af1
 800399c:	08003af1 	.word	0x08003af1
 80039a0:	08003af1 	.word	0x08003af1
 80039a4:	08003af1 	.word	0x08003af1
 80039a8:	08003af1 	.word	0x08003af1
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	08003a39 	.word	0x08003a39
 80039b4:	4a33      	ldr	r2, [pc, #204]	; (8003a84 <HAL_GPIO_Init+0x2dc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d070      	beq.n	8003a9c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039ba:	e099      	b.n	8003af0 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00b      	beq.n	80039dc <HAL_GPIO_Init+0x234>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x234>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x234>
 80039d4:	21d5      	movs	r1, #213	; 0xd5
 80039d6:	482a      	ldr	r0, [pc, #168]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 80039d8:	f7fe fa75 	bl	8001ec6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	623b      	str	r3, [r7, #32]
          break;
 80039e2:	e086      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d00b      	beq.n	8003a04 <HAL_GPIO_Init+0x25c>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d007      	beq.n	8003a04 <HAL_GPIO_Init+0x25c>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x25c>
 80039fc:	21dc      	movs	r1, #220	; 0xdc
 80039fe:	4820      	ldr	r0, [pc, #128]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 8003a00:	f7fe fa61 	bl	8001ec6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	623b      	str	r3, [r7, #32]
          break;
 8003a0c:	e071      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d00b      	beq.n	8003a2e <HAL_GPIO_Init+0x286>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x286>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x286>
 8003a26:	21e3      	movs	r1, #227	; 0xe3
 8003a28:	4815      	ldr	r0, [pc, #84]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 8003a2a:	f7fe fa4c 	bl	8001ec6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	3308      	adds	r3, #8
 8003a34:	623b      	str	r3, [r7, #32]
          break;
 8003a36:	e05c      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d00b      	beq.n	8003a58 <HAL_GPIO_Init+0x2b0>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d007      	beq.n	8003a58 <HAL_GPIO_Init+0x2b0>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2b0>
 8003a50:	21ea      	movs	r1, #234	; 0xea
 8003a52:	480b      	ldr	r0, [pc, #44]	; (8003a80 <HAL_GPIO_Init+0x2d8>)
 8003a54:	f7fe fa37 	bl	8001ec6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	623b      	str	r3, [r7, #32]
          break;
 8003a60:	e047      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
 8003a62:	bf00      	nop
 8003a64:	40010800 	.word	0x40010800
 8003a68:	40010c00 	.word	0x40010c00
 8003a6c:	40011000 	.word	0x40011000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	40011800 	.word	0x40011800
 8003a78:	40011c00 	.word	0x40011c00
 8003a7c:	40012000 	.word	0x40012000
 8003a80:	08012910 	.word	0x08012910
 8003a84:	10110000 	.word	0x10110000
 8003a88:	10210000 	.word	0x10210000
 8003a8c:	10310000 	.word	0x10310000
 8003a90:	10120000 	.word	0x10120000
 8003a94:	10220000 	.word	0x10220000
 8003a98:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_GPIO_Init+0x314>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d007      	beq.n	8003abc <HAL_GPIO_Init+0x314>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x314>
 8003ab4:	21f7      	movs	r1, #247	; 0xf7
 8003ab6:	487c      	ldr	r0, [pc, #496]	; (8003ca8 <HAL_GPIO_Init+0x500>)
 8003ab8:	f7fe fa05 	bl	8001ec6 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	623b      	str	r3, [r7, #32]
          break;
 8003ac8:	e013      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	611a      	str	r2, [r3, #16]
          break;
 8003adc:	e009      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	615a      	str	r2, [r3, #20]
          break;
 8003ae8:	e003      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
          break;
 8003aee:	e000      	b.n	8003af2 <HAL_GPIO_Init+0x34a>
          break;
 8003af0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2bff      	cmp	r3, #255	; 0xff
 8003af6:	d801      	bhi.n	8003afc <HAL_GPIO_Init+0x354>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	e001      	b.n	8003b00 <HAL_GPIO_Init+0x358>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2bff      	cmp	r3, #255	; 0xff
 8003b06:	d802      	bhi.n	8003b0e <HAL_GPIO_Init+0x366>
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	e002      	b.n	8003b14 <HAL_GPIO_Init+0x36c>
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	3b08      	subs	r3, #8
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	6a39      	ldr	r1, [r7, #32]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a2 	beq.w	8003c86 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b42:	4b5a      	ldr	r3, [pc, #360]	; (8003cac <HAL_GPIO_Init+0x504>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	4a59      	ldr	r2, [pc, #356]	; (8003cac <HAL_GPIO_Init+0x504>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6193      	str	r3, [r2, #24]
 8003b4e:	4b57      	ldr	r3, [pc, #348]	; (8003cac <HAL_GPIO_Init+0x504>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b5a:	4a55      	ldr	r2, [pc, #340]	; (8003cb0 <HAL_GPIO_Init+0x508>)
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	220f      	movs	r2, #15
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <HAL_GPIO_Init+0x50c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x41e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_GPIO_Init+0x510>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_GPIO_Init+0x41a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_GPIO_Init+0x514>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_GPIO_Init+0x416>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a49      	ldr	r2, [pc, #292]	; (8003cc0 <HAL_GPIO_Init+0x518>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_Init+0x412>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_GPIO_Init+0x51c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_Init+0x40e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_GPIO_Init+0x520>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_Init+0x40a>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e00a      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x420>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	f002 0203 	and.w	r2, r2, #3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bd8:	4935      	ldr	r1, [pc, #212]	; (8003cb0 <HAL_GPIO_Init+0x508>)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3302      	adds	r3, #2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4935      	ldr	r1, [pc, #212]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	e006      	b.n	8003c0e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	4930      	ldr	r1, [pc, #192]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	492b      	ldr	r1, [pc, #172]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
 8003c26:	e006      	b.n	8003c36 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	4926      	ldr	r1, [pc, #152]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	4921      	ldr	r1, [pc, #132]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c50:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	491c      	ldr	r1, [pc, #112]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	4917      	ldr	r1, [pc, #92]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60cb      	str	r3, [r1, #12]
 8003c76:	e006      	b.n	8003c86 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	4912      	ldr	r1, [pc, #72]	; (8003ccc <HAL_GPIO_Init+0x524>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	3301      	adds	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f ae05 	bne.w	80038a6 <HAL_GPIO_Init+0xfe>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3728      	adds	r7, #40	; 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	08012910 	.word	0x08012910
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40010800 	.word	0x40010800
 8003cb8:	40010c00 	.word	0x40010c00
 8003cbc:	40011000 	.word	0x40011000
 8003cc0:	40011400 	.word	0x40011400
 8003cc4:	40011800 	.word	0x40011800
 8003cc8:	40011c00 	.word	0x40011c00
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_GPIO_WritePin+0x20>
 8003ce6:	887b      	ldrh	r3, [r7, #2]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_GPIO_WritePin+0x2a>
 8003cf0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003cf4:	480e      	ldr	r0, [pc, #56]	; (8003d30 <HAL_GPIO_WritePin+0x60>)
 8003cf6:	f7fe f8e6 	bl	8001ec6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003cfa:	787b      	ldrb	r3, [r7, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_GPIO_WritePin+0x40>
 8003d00:	787b      	ldrb	r3, [r7, #1]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d004      	beq.n	8003d10 <HAL_GPIO_WritePin+0x40>
 8003d06:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003d0a:	4809      	ldr	r0, [pc, #36]	; (8003d30 <HAL_GPIO_WritePin+0x60>)
 8003d0c:	f7fe f8db 	bl	8001ec6 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d1c:	e003      	b.n	8003d26 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d1e:	887b      	ldrh	r3, [r7, #2]
 8003d20:	041a      	lsls	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	08012910 	.word	0x08012910

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f806 	bl	8003d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40010400 	.word	0x40010400

08003d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1f3      	b.n	8004172 <HAL_I2C_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a99      	ldr	r2, [pc, #612]	; (8003ff4 <HAL_I2C_Init+0x27c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_I2C_Init+0x30>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a97      	ldr	r2, [pc, #604]	; (8003ff8 <HAL_I2C_Init+0x280>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_I2C_Init+0x30>
 8003d9e:	f240 11d1 	movw	r1, #465	; 0x1d1
 8003da2:	4896      	ldr	r0, [pc, #600]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003da4:	f7fe f88f 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_I2C_Init+0x42>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a92      	ldr	r2, [pc, #584]	; (8004000 <HAL_I2C_Init+0x288>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d904      	bls.n	8003dc4 <HAL_I2C_Init+0x4c>
 8003dba:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003dbe:	488f      	ldr	r0, [pc, #572]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003dc0:	f7fe f881 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_I2C_Init+0x68>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd4:	d004      	beq.n	8003de0 <HAL_I2C_Init+0x68>
 8003dd6:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003dda:	4888      	ldr	r0, [pc, #544]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003ddc:	f7fe f873 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_I2C_Init+0x82>
 8003df0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003df4:	4881      	ldr	r0, [pc, #516]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003df6:	f7fe f866 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e02:	d009      	beq.n	8003e18 <HAL_I2C_Init+0xa0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e0c:	d004      	beq.n	8003e18 <HAL_I2C_Init+0xa0>
 8003e0e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003e12:	487a      	ldr	r0, [pc, #488]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e14:	f7fe f857 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_I2C_Init+0xba>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d004      	beq.n	8003e32 <HAL_I2C_Init+0xba>
 8003e28:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003e2c:	4873      	ldr	r0, [pc, #460]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e2e:	f7fe f84a 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_I2C_Init+0xd0>
 8003e3e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003e42:	486e      	ldr	r0, [pc, #440]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e44:	f7fe f83f 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_I2C_Init+0xea>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d004      	beq.n	8003e62 <HAL_I2C_Init+0xea>
 8003e58:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003e5c:	4867      	ldr	r0, [pc, #412]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e5e:	f7fe f832 	bl	8001ec6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_I2C_Init+0x104>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d004      	beq.n	8003e7c <HAL_I2C_Init+0x104>
 8003e72:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003e76:	4861      	ldr	r0, [pc, #388]	; (8003ffc <HAL_I2C_Init+0x284>)
 8003e78:	f7fe f825 	bl	8001ec6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12c      	bne.n	8003ee2 <HAL_I2C_Init+0x16a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <HAL_I2C_Init+0x28c>)
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a5b      	ldr	r2, [pc, #364]	; (8004008 <HAL_I2C_Init+0x290>)
 8003e9a:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a5b      	ldr	r2, [pc, #364]	; (800400c <HAL_I2C_Init+0x294>)
 8003ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <HAL_I2C_Init+0x298>)
 8003ea6:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a5a      	ldr	r2, [pc, #360]	; (8004014 <HAL_I2C_Init+0x29c>)
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_I2C_Init+0x2a0>)
 8003eb2:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_I2C_Init+0x2a4>)
 8003eb8:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_I2C_Init+0x2a8>)
 8003ebe:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_I2C_Init+0x2ac>)
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_I2C_Init+0x2b0>)
 8003eca:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_I2C_Init+0x162>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a55      	ldr	r2, [pc, #340]	; (800402c <HAL_I2C_Init+0x2b4>)
 8003ed8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2224      	movs	r2, #36	; 0x24
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f08:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f18:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f003 f90d 	bl	8007138 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_I2C_Init+0x2b8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d807      	bhi.n	8003f3a <HAL_I2C_Init+0x1c2>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_I2C_Init+0x2bc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bf94      	ite	ls
 8003f32:	2301      	movls	r3, #1
 8003f34:	2300      	movhi	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e006      	b.n	8003f48 <HAL_I2C_Init+0x1d0>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a3e      	ldr	r2, [pc, #248]	; (8004038 <HAL_I2C_Init+0x2c0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bf94      	ite	ls
 8003f42:	2301      	movls	r3, #1
 8003f44:	2300      	movhi	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_Init+0x1d8>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e110      	b.n	8004172 <HAL_I2C_Init+0x3fa>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_I2C_Init+0x2c4>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <HAL_I2C_Init+0x2b8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d802      	bhi.n	8003f8a <HAL_I2C_Init+0x212>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3301      	adds	r3, #1
 8003f88:	e009      	b.n	8003f9e <HAL_I2C_Init+0x226>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_I2C_Init+0x2c8>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	491d      	ldr	r1, [pc, #116]	; (8004030 <HAL_I2C_Init+0x2b8>)
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d842      	bhi.n	8004044 <HAL_I2C_Init+0x2cc>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e59      	subs	r1, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fcc:	1c59      	adds	r1, r3, #1
 8003fce:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_I2C_Init+0x276>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1e59      	subs	r1, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	e07a      	b.n	80040e4 <HAL_I2C_Init+0x36c>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	e078      	b.n	80040e4 <HAL_I2C_Init+0x36c>
 8003ff2:	bf00      	nop
 8003ff4:	40005400 	.word	0x40005400
 8003ff8:	40005800 	.word	0x40005800
 8003ffc:	0801294c 	.word	0x0801294c
 8004000:	00061a80 	.word	0x00061a80
 8004004:	08004ad1 	.word	0x08004ad1
 8004008:	08004ae3 	.word	0x08004ae3
 800400c:	08004af5 	.word	0x08004af5
 8004010:	08004b07 	.word	0x08004b07
 8004014:	08004b33 	.word	0x08004b33
 8004018:	08002499 	.word	0x08002499
 800401c:	08004b45 	.word	0x08004b45
 8004020:	08004b57 	.word	0x08004b57
 8004024:	08004b69 	.word	0x08004b69
 8004028:	08004b19 	.word	0x08004b19
 800402c:	08002511 	.word	0x08002511
 8004030:	000186a0 	.word	0x000186a0
 8004034:	001e847f 	.word	0x001e847f
 8004038:	003d08ff 	.word	0x003d08ff
 800403c:	431bde83 	.word	0x431bde83
 8004040:	10624dd3 	.word	0x10624dd3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <HAL_I2C_Init+0x2f8>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e58      	subs	r0, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e012      	b.n	8004096 <HAL_I2C_Init+0x31e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Init+0x326>
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_I2C_Init+0x36c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <HAL_I2C_Init+0x34c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e58      	subs	r0, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	440b      	add	r3, r1
 80040b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c2:	e00f      	b.n	80040e4 <HAL_I2C_Init+0x36c>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e58      	subs	r0, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	0099      	lsls	r1, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	6809      	ldr	r1, [r1, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6911      	ldr	r1, [r2, #16]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	430b      	orrs	r3, r1
 8004126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7fe fc6f 	bl	8002a7c <HAL_GetTick>
 800419e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d007      	beq.n	80041b6 <HAL_I2C_Mem_Write_DMA+0x3a>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d004      	beq.n	80041b6 <HAL_I2C_Mem_Write_DMA+0x3a>
 80041ac:	f640 414f 	movw	r1, #3151	; 0xc4f
 80041b0:	489a      	ldr	r0, [pc, #616]	; (800441c <HAL_I2C_Mem_Write_DMA+0x2a0>)
 80041b2:	f7fd fe88 	bl	8001ec6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 8126 	bne.w	8004410 <HAL_I2C_Mem_Write_DMA+0x294>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80041c4:	4b96      	ldr	r3, [pc, #600]	; (8004420 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	4a96      	ldr	r2, [pc, #600]	; (8004424 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	0a1a      	lsrs	r2, r3, #8
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009a      	lsls	r2, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_I2C_Mem_Write_DMA+0x9c>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0fc      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b02      	cmp	r3, #2
 8004224:	d0db      	beq.n	80041de <HAL_I2C_Mem_Write_DMA+0x62>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_I2C_Mem_Write_DMA+0xb8>
 8004230:	2302      	movs	r3, #2
 8004232:	e0ee      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d007      	beq.n	800425a <HAL_I2C_Mem_Write_DMA+0xde>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004268:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2240      	movs	r2, #64	; 0x40
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a63      	ldr	r2, [pc, #396]	; (8004428 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_I2C_Mem_Write_DMA+0x26c>
    {
      if (hi2c->hdmatx != NULL)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d022      	beq.n	80042f4 <HAL_I2C_Mem_Write_DMA+0x178>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	4a5e      	ldr	r2, [pc, #376]	; (800442c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	4a5d      	ldr	r2, [pc, #372]	; (8004430 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	2200      	movs	r2, #0
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	2200      	movs	r2, #0
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	4619      	mov	r1, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3310      	adds	r3, #16
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	f7fe fe74 	bl	8002fd0 <HAL_DMA_Start_IT>
 80042e8:	4603      	mov	r3, r0
 80042ea:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80042ec:	7efb      	ldrb	r3, [r7, #27]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d166      	bne.n	80043c0 <HAL_I2C_Mem_Write_DMA+0x244>
 80042f2:	e013      	b.n	800431c <HAL_I2C_Mem_Write_DMA+0x1a0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e07a      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800431c:	88f8      	ldrh	r0, [r7, #6]
 800431e:	893a      	ldrh	r2, [r7, #8]
 8004320:	8979      	ldrh	r1, [r7, #10]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	2323      	movs	r3, #35	; 0x23
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4603      	mov	r3, r0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f001 fda9 	bl	8005e84 <I2C_RequestMemoryWrite>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d022      	beq.n	800437e <HAL_I2C_Mem_Write_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe feb5 	bl	80030ac <HAL_DMA_Abort_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	2200      	movs	r2, #0
 800434c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e049      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043aa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ba:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e028      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0210 	orr.w	r2, r3, #16
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e014      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_I2C_Mem_Write_DMA+0x296>
    }
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	0801294c 	.word	0x0801294c
 8004420:	20000078 	.word	0x20000078
 8004424:	14f8b589 	.word	0x14f8b589
 8004428:	ffff0000 	.word	0xffff0000
 800442c:	08005fb1 	.word	0x08005fb1
 8004430:	08006165 	.word	0x08006165

08004434 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	460b      	mov	r3, r1
 8004442:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7fe fb1a 	bl	8002a7c <HAL_GetTick>
 8004448:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	f040 8111 	bne.w	800467e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2319      	movs	r3, #25
 8004462:	2201      	movs	r2, #1
 8004464:	4988      	ldr	r1, [pc, #544]	; (8004688 <HAL_I2C_IsDeviceReady+0x254>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 ff5e 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	e104      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2C_IsDeviceReady+0x50>
 8004480:	2302      	movs	r3, #2
 8004482:	e0fd      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d007      	beq.n	80044aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2224      	movs	r2, #36	; 0x24
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a70      	ldr	r2, [pc, #448]	; (800468c <HAL_I2C_IsDeviceReady+0x258>)
 80044cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f001 ff1c 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004504:	d103      	bne.n	800450e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0b6      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004512:	897b      	ldrh	r3, [r7, #10]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004520:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004522:	f7fe faab 	bl	8002a7c <HAL_GetTick>
 8004526:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004556:	e025      	b.n	80045a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe fa90 	bl	8002a7c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <HAL_I2C_IsDeviceReady+0x13a>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	22a0      	movs	r2, #160	; 0xa0
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2ba0      	cmp	r3, #160	; 0xa0
 80045ae:	d005      	beq.n	80045bc <HAL_I2C_IsDeviceReady+0x188>
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_I2C_IsDeviceReady+0x188>
 80045b6:	7dbb      	ldrb	r3, [r7, #22]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0cd      	beq.n	8004558 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d129      	bne.n	8004626 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	4921      	ldr	r1, [pc, #132]	; (8004688 <HAL_I2C_IsDeviceReady+0x254>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f001 fe90 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e036      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e02c      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004634:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800463e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	490f      	ldr	r1, [pc, #60]	; (8004688 <HAL_I2C_IsDeviceReady+0x254>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 fe6c 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e012      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3301      	adds	r3, #1
 800465e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	f4ff af32 	bcc.w	80044ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	00100002 	.word	0x00100002
 800468c:	ffff0000 	.word	0xffff0000

08004690 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d003      	beq.n	80046c8 <HAL_I2C_EV_IRQHandler+0x38>
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	f040 80c1 	bne.w	800484a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_I2C_EV_IRQHandler+0x6e>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046e8:	d003      	beq.n	80046f2 <HAL_I2C_EV_IRQHandler+0x62>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046f0:	d101      	bne.n	80046f6 <HAL_I2C_EV_IRQHandler+0x66>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x68>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f000 8132 	beq.w	8004962 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x92>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	0a5b      	lsrs	r3, r3, #9
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f001 ff7f 	bl	8006618 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fd87 	bl	800522e <I2C_Master_SB>
 8004720:	e092      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0xb2>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fdfc 	bl	8005338 <I2C_Master_ADD10>
 8004740:	e082      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xd2>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fe15 	bl	800538a <I2C_Master_ADDR>
 8004760:	e072      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	089b      	lsrs	r3, r3, #2
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d03b      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	f000 80f3 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00f      	beq.n	80047ac <HAL_I2C_EV_IRQHandler+0x11c>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_I2C_EV_IRQHandler+0x11c>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9f5 	bl	8004b94 <I2C_MasterTransmit_TXE>
 80047aa:	e04d      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80d6 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80cf 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047c8:	7bbb      	ldrb	r3, [r7, #14]
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d103      	bne.n	80047d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa7f 	bl	8004cd2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d4:	e0c7      	b.n	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	f040 80c4 	bne.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 faf0 	bl	8004dc4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e4:	e0bf      	b.n	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f4:	f000 80b7 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x194>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x194>
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb66 	bl	8004eee <I2C_MasterReceive_RXNE>
 8004822:	e011      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 809a 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 8093 	beq.w	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fc08 	bl	8005056 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004846:	e08e      	b.n	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004848:	e08d      	b.n	8004966 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e007      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <HAL_I2C_EV_IRQHandler+0x20e>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 ffd0 	bl	800583c <I2C_Slave_ADDR>
 800489c:	e066      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x22e>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	0a5b      	lsrs	r3, r3, #9
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 f80a 	bl	80058d0 <I2C_Slave_STOPF>
 80048bc:	e056      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	2b21      	cmp	r3, #33	; 0x21
 80048c2:	d002      	beq.n	80048ca <HAL_I2C_EV_IRQHandler+0x23a>
 80048c4:	7bbb      	ldrb	r3, [r7, #14]
 80048c6:	2b29      	cmp	r3, #41	; 0x29
 80048c8:	d125      	bne.n	8004916 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00f      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x266>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a9b      	lsrs	r3, r3, #10
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x266>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fee6 	bl	80056c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f4:	e039      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d033      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x2da>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02d      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 ff14 	bl	800573c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004914:	e029      	b.n	800496a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00f      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	0a9b      	lsrs	r3, r3, #10
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x2b2>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 ff1e 	bl	800577c <I2C_SlaveReceive_RXNE>
 8004940:	e014      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00e      	beq.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 ff4d 	bl	80057fa <I2C_SlaveReceive_BTF>
 8004960:	e004      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800496a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08a      	sub	sp, #40	; 0x28
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004994:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_I2C_ER_IRQHandler+0x5e>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049be:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	0a5b      	lsrs	r3, r3, #9
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00e      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x88>
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80049f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	0a9b      	lsrs	r3, r3, #10
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03f      	beq.n	8004a86 <HAL_I2C_ER_IRQHandler+0x114>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d039      	beq.n	8004a86 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004a12:	7efb      	ldrb	r3, [r7, #27]
 8004a14:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a2c:	7ebb      	ldrb	r3, [r7, #26]
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d112      	bne.n	8004a58 <HAL_I2C_ER_IRQHandler+0xe6>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <HAL_I2C_ER_IRQHandler+0xe6>
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b21      	cmp	r3, #33	; 0x21
 8004a3c:	d008      	beq.n	8004a50 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	2b29      	cmp	r3, #41	; 0x29
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_ER_IRQHandler+0xde>
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b28      	cmp	r3, #40	; 0x28
 8004a48:	d106      	bne.n	8004a58 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b21      	cmp	r3, #33	; 0x21
 8004a4e:	d103      	bne.n	8004a58 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 f871 	bl	8005b38 <I2C_Slave_AF>
 8004a56:	e016      	b.n	8004a86 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a60:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f043 0304 	orr.w	r3, r3, #4
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a6a:	7efb      	ldrb	r3, [r7, #27]
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d002      	beq.n	8004a76 <HAL_I2C_ER_IRQHandler+0x104>
 8004a70:	7efb      	ldrb	r3, [r7, #27]
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d107      	bne.n	8004a86 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	0adb      	lsrs	r3, r3, #11
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00e      	beq.n	8004ab0 <HAL_I2C_ER_IRQHandler+0x13e>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f043 0308 	orr.w	r3, r3, #8
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004aae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f001 f8aa 	bl	8005c1c <I2C_ITError>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3728      	adds	r7, #40	; 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
 8004b24:	4613      	mov	r3, r2
 8004b26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004baa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d153      	bne.n	8004c62 <I2C_MasterTransmit_TXE+0xce>
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b21      	cmp	r3, #33	; 0x21
 8004bbe:	d150      	bne.n	8004c62 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d01e      	beq.n	8004c04 <I2C_MasterTransmit_TXE+0x70>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d01b      	beq.n	8004c04 <I2C_MasterTransmit_TXE+0x70>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bd2:	d017      	beq.n	8004c04 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2211      	movs	r2, #17
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c02:	e062      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c12:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d108      	bne.n	8004c50 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c4e:	e03c      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c60:	e033      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b21      	cmp	r3, #33	; 0x21
 8004c66:	d005      	beq.n	8004c74 <I2C_MasterTransmit_TXE+0xe0>
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d12d      	bne.n	8004cca <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b22      	cmp	r3, #34	; 0x22
 8004c72:	d12a      	bne.n	8004cca <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d108      	bne.n	8004c90 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c8e:	e01c      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d103      	bne.n	8004ca4 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f891 	bl	8004dc4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ca2:	e012      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cc8:	e7ff      	b.n	8004cca <I2C_MasterTransmit_TXE+0x136>
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b21      	cmp	r3, #33	; 0x21
 8004cea:	d167      	bne.n	8004dbc <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d1a:	e04f      	b.n	8004dbc <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d01e      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d01b      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d2e:	d017      	beq.n	8004d60 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2211      	movs	r2, #17
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
}
 8004d5e:	e02d      	b.n	8004dbc <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d108      	bne.n	8004dac <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
}
 8004daa:	e007      	b.n	8004dbc <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11d      	bne.n	8004e18 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10b      	bne.n	8004dfc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004dfa:	e074      	b.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	121b      	asrs	r3, r3, #8
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e16:	e066      	b.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10b      	bne.n	8004e38 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e36:	e056      	b.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d152      	bne.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b22      	cmp	r3, #34	; 0x22
 8004e44:	d10d      	bne.n	8004e62 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e54:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e60:	e041      	b.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b21      	cmp	r3, #33	; 0x21
 8004e70:	d112      	bne.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e96:	e026      	b.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d121      	bne.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b21      	cmp	r3, #33	; 0x21
 8004ea6:	d11e      	bne.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eb6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b22      	cmp	r3, #34	; 0x22
 8004f00:	f040 80a5 	bne.w	800504e <I2C_MasterReceive_RXNE+0x160>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d921      	bls.n	8004f56 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	f040 8085 	bne.w	800504e <I2C_MasterReceive_RXNE+0x160>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004f54:	e07b      	b.n	800504e <I2C_MasterReceive_RXNE+0x160>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d077      	beq.n	800504e <I2C_MasterReceive_RXNE+0x160>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d002      	beq.n	8004f6a <I2C_MasterReceive_RXNE+0x7c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d171      	bne.n	800504e <I2C_MasterReceive_RXNE+0x160>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 faf4 	bl	8006558 <I2C_WaitOnSTOPRequestThroughIT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d144      	bne.n	8005000 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d10b      	bne.n	8004fe8 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
}
 8004fe6:	e032      	b.n	800504e <I2C_MasterReceive_RXNE+0x160>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2212      	movs	r2, #18
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
}
 8004ffe:	e026      	b.n	800504e <I2C_MasterReceive_RXNE+0x160>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800500e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b04      	cmp	r3, #4
 800506c:	d11b      	bne.n	80050a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050a4:	e0bf      	b.n	8005226 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d129      	bne.n	8005104 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00a      	beq.n	80050dc <I2C_MasterReceive_BTF+0x86>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d007      	beq.n	80050dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005102:	e090      	b.n	8005226 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d178      	bne.n	8005200 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d002      	beq.n	800511a <I2C_MasterReceive_BTF+0xc4>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b10      	cmp	r3, #16
 8005118:	d108      	bne.n	800512c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e019      	b.n	8005160 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d002      	beq.n	8005138 <I2C_MasterReceive_BTF+0xe2>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d108      	bne.n	800514a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e00a      	b.n	8005160 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b10      	cmp	r3, #16
 800514e:	d007      	beq.n	8005160 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d10b      	bne.n	80051e8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
}
 80051e6:	e01e      	b.n	8005226 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2212      	movs	r2, #18
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
}
 80051fe:	e012      	b.n	8005226 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d117      	bne.n	8005272 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800525a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800525c:	e067      	b.n	800532e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]
}
 8005270:	e05d      	b.n	800532e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800527a:	d133      	bne.n	80052e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b21      	cmp	r3, #33	; 0x21
 8005286:	d109      	bne.n	800529c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e008      	b.n	80052ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <I2C_Master_SB+0x92>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d032      	beq.n	800532e <I2C_Master_SB+0x100>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02d      	beq.n	800532e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e0:	605a      	str	r2, [r3, #4]
}
 80052e2:	e024      	b.n	800532e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10e      	bne.n	800530a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	11db      	asrs	r3, r3, #7
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0306 	and.w	r3, r3, #6
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f063 030f 	orn	r3, r3, #15
 8005300:	b2da      	uxtb	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]
}
 8005308:	e011      	b.n	800532e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	b29b      	uxth	r3, r3
 8005318:	11db      	asrs	r3, r3, #7
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f003 0306 	and.w	r3, r3, #6
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f063 030e 	orn	r3, r3, #14
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	b2da      	uxtb	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <I2C_Master_ADD10+0x26>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d108      	bne.n	8005370 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <I2C_Master_ADD10+0x48>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	605a      	str	r2, [r3, #4]
  }
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800538a:	b480      	push	{r7}
 800538c:	b091      	sub	sp, #68	; 0x44
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b22      	cmp	r3, #34	; 0x22
 80053b2:	f040 8174 	bne.w	800569e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <I2C_Master_ADDR+0x54>
 80053be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d10b      	bne.n	80053de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	e16b      	b.n	80056b6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d11d      	bne.n	8005422 <I2C_Master_ADDR+0x98>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ee:	d118      	bne.n	8005422 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f0:	2300      	movs	r3, #0
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005414:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	651a      	str	r2, [r3, #80]	; 0x50
 8005420:	e149      	b.n	80056b6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d113      	bne.n	8005454 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e120      	b.n	8005696 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	f040 808a 	bne.w	8005574 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005466:	d137      	bne.n	80054d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005476:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005486:	d113      	bne.n	80054b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005496:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	e0f2      	b.n	8005696 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b0:	2300      	movs	r3, #0
 80054b2:	623b      	str	r3, [r7, #32]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e0de      	b.n	8005696 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d02e      	beq.n	800553c <I2C_Master_ADDR+0x1b2>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d02b      	beq.n	800553c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	2b12      	cmp	r3, #18
 80054e8:	d102      	bne.n	80054f0 <I2C_Master_ADDR+0x166>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d125      	bne.n	800553c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d00e      	beq.n	8005514 <I2C_Master_ADDR+0x18a>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d00b      	beq.n	8005514 <I2C_Master_ADDR+0x18a>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d008      	beq.n	8005514 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e007      	b.n	8005524 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005522:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	e0ac      	b.n	8005696 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e090      	b.n	8005696 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d158      	bne.n	8005630 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b04      	cmp	r3, #4
 8005582:	d021      	beq.n	80055c8 <I2C_Master_ADDR+0x23e>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b02      	cmp	r3, #2
 8005588:	d01e      	beq.n	80055c8 <I2C_Master_ADDR+0x23e>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b10      	cmp	r3, #16
 800558e:	d01b      	beq.n	80055c8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e012      	b.n	80055ee <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fc:	d14b      	bne.n	8005696 <I2C_Master_ADDR+0x30c>
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005604:	d00b      	beq.n	800561e <I2C_Master_ADDR+0x294>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b01      	cmp	r3, #1
 800560a:	d008      	beq.n	800561e <I2C_Master_ADDR+0x294>
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	2b08      	cmp	r3, #8
 8005610:	d005      	beq.n	800561e <I2C_Master_ADDR+0x294>
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	2b10      	cmp	r3, #16
 8005616:	d002      	beq.n	800561e <I2C_Master_ADDR+0x294>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b20      	cmp	r3, #32
 800561c:	d13b      	bne.n	8005696 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	e032      	b.n	8005696 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800563e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d117      	bne.n	8005680 <I2C_Master_ADDR+0x2f6>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005656:	d00b      	beq.n	8005670 <I2C_Master_ADDR+0x2e6>
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	2b01      	cmp	r3, #1
 800565c:	d008      	beq.n	8005670 <I2C_Master_ADDR+0x2e6>
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	2b08      	cmp	r3, #8
 8005662:	d005      	beq.n	8005670 <I2C_Master_ADDR+0x2e6>
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	2b10      	cmp	r3, #16
 8005668:	d002      	beq.n	8005670 <I2C_Master_ADDR+0x2e6>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	2b20      	cmp	r3, #32
 800566e:	d107      	bne.n	8005680 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800567e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800569c:	e00b      	b.n	80056b6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]
}
 80056b4:	e7ff      	b.n	80056b6 <I2C_Master_ADDR+0x32c>
 80056b6:	bf00      	nop
 80056b8:	3744      	adds	r7, #68	; 0x44
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02c      	beq.n	8005734 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d115      	bne.n	8005734 <I2C_SlaveTransmit_TXE+0x74>
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b29      	cmp	r3, #41	; 0x29
 800570c:	d112      	bne.n	8005734 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2221      	movs	r2, #33	; 0x21
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2228      	movs	r2, #40	; 0x28
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d011      	beq.n	8005772 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02d      	beq.n	80057f2 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d115      	bne.n	80057f2 <I2C_SlaveReceive_RXNE+0x76>
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ca:	d112      	bne.n	80057f2 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2222      	movs	r2, #34	; 0x22
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2228      	movs	r2, #40	; 0x28
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d012      	beq.n	8005832 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005856:	2b28      	cmp	r3, #40	; 0x28
 8005858:	d127      	bne.n	80058aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005868:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005876:	2301      	movs	r3, #1
 8005878:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	09db      	lsrs	r3, r3, #7
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	81bb      	strh	r3, [r7, #12]
 800588c:	e002      	b.n	8005894 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a0:	89ba      	ldrh	r2, [r7, #12]
 80058a2:	7bf9      	ldrb	r1, [r7, #15]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058a8:	e00e      	b.n	80058c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d172      	bne.n	8005a14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b22      	cmp	r3, #34	; 0x22
 8005932:	d002      	beq.n	800593a <I2C_Slave_STOPF+0x6a>
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d135      	bne.n	80059a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fede 	bl	8003734 <HAL_DMA_GetState>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d049      	beq.n	8005a12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	4a6b      	ldr	r2, [pc, #428]	; (8005b30 <I2C_Slave_STOPF+0x260>)
 8005984:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4618      	mov	r0, r3
 800598c:	f7fd fb8e 	bl	80030ac <HAL_DMA_Abort_IT>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d03d      	beq.n	8005a12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a0:	4610      	mov	r0, r2
 80059a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a4:	e035      	b.n	8005a12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0204 	orr.w	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fd fea8 	bl	8003734 <HAL_DMA_GetState>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d014      	beq.n	8005a14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	4a50      	ldr	r2, [pc, #320]	; (8005b30 <I2C_Slave_STOPF+0x260>)
 80059f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd fb58 	bl	80030ac <HAL_DMA_Abort_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	e000      	b.n	8005a14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03e      	beq.n	8005a9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d112      	bne.n	8005a52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d112      	bne.n	8005a86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8b9 	bl	8005c1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005aaa:	e03c      	b.n	8005b26 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab0:	d10a      	bne.n	8005ac8 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2228      	movs	r2, #40	; 0x28
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b28      	cmp	r3, #40	; 0x28
 8005ad2:	d112      	bne.n	8005afa <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <I2C_Slave_STOPF+0x264>)
 8005ad8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
}
 8005af8:	e015      	b.n	8005b26 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	2b22      	cmp	r3, #34	; 0x22
 8005b00:	d002      	beq.n	8005b08 <I2C_Slave_STOPF+0x238>
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b22      	cmp	r3, #34	; 0x22
 8005b06:	d10e      	bne.n	8005b26 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	080061d5 	.word	0x080061d5
 8005b34:	ffff0000 	.word	0xffff0000

08005b38 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d002      	beq.n	8005b5a <I2C_Slave_AF+0x22>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d12a      	bne.n	8005bb0 <I2C_Slave_AF+0x78>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b28      	cmp	r3, #40	; 0x28
 8005b5e:	d127      	bne.n	8005bb0 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a2d      	ldr	r2, [pc, #180]	; (8005c18 <I2C_Slave_AF+0xe0>)
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b74:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b7e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b8e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bae:	e02f      	b.n	8005c10 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b21      	cmp	r3, #33	; 0x21
 8005bb4:	d127      	bne.n	8005c06 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <I2C_Slave_AF+0xe0>)
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2221      	movs	r2, #33	; 0x21
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bea:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfa:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
}
 8005c04:	e004      	b.n	8005c10 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c0e:	615a      	str	r2, [r3, #20]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d002      	beq.n	8005c40 <I2C_ITError+0x24>
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d10a      	bne.n	8005c56 <I2C_ITError+0x3a>
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b22      	cmp	r3, #34	; 0x22
 8005c44:	d107      	bne.n	8005c56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c5c:	2b28      	cmp	r3, #40	; 0x28
 8005c5e:	d107      	bne.n	8005c70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2228      	movs	r2, #40	; 0x28
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c6e:	e015      	b.n	8005c9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7e:	d00a      	beq.n	8005c96 <I2C_ITError+0x7a>
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b60      	cmp	r3, #96	; 0x60
 8005c84:	d007      	beq.n	8005c96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d161      	bne.n	8005d70 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d020      	beq.n	8005d0a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <I2C_ITError+0x260>)
 8005cce:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd f9e9 	bl	80030ac <HAL_DMA_Abort_IT>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 808b 	beq.w	8005df8 <I2C_ITError+0x1dc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d04:	4610      	mov	r0, r2
 8005d06:	4798      	blx	r3
 8005d08:	e076      	b.n	8005df8 <I2C_ITError+0x1dc>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	4a5b      	ldr	r2, [pc, #364]	; (8005e7c <I2C_ITError+0x260>)
 8005d10:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fd f9c8 	bl	80030ac <HAL_DMA_Abort_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d06a      	beq.n	8005df8 <I2C_ITError+0x1dc>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d10b      	bne.n	8005d48 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4798      	blx	r3
 8005d6e:	e043      	b.n	8005df8 <I2C_ITError+0x1dc>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b60      	cmp	r3, #96	; 0x60
 8005d7a:	d126      	bne.n	8005dca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d10b      	bne.n	8005db0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	e016      	b.n	8005df8 <I2C_ITError+0x1dc>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d10b      	bne.n	8005df0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10e      	bne.n	8005e26 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <I2C_ITError+0x21a>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d114      	bne.n	8005e74 <I2C_ITError+0x258>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b28      	cmp	r3, #40	; 0x28
 8005e4e:	d111      	bne.n	8005e74 <I2C_ITError+0x258>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <I2C_ITError+0x264>)
 8005e54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	080061d5 	.word	0x080061d5
 8005e80:	ffff0000 	.word	0xffff0000

08005e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	817b      	strh	r3, [r7, #10]
 8005e96:	460b      	mov	r3, r1
 8005e98:	813b      	strh	r3, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fa34 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed4:	d103      	bne.n	8005ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e05f      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	492d      	ldr	r1, [pc, #180]	; (8005fac <I2C_RequestMemoryWrite+0x128>)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fa6c 	bl	80063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e04c      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	6a39      	ldr	r1, [r7, #32]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fad6 	bl	80064d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d107      	bne.n	8005f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e02b      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	611a      	str	r2, [r3, #16]
 8005f5a:	e021      	b.n	8005fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fab0 	bl	80064d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e005      	b.n	8005fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	00010002 	.word	0x00010002

08005fb0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fcc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	2200      	movs	r2, #0
 8006002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800600a:	2b21      	cmp	r3, #33	; 0x21
 800600c:	d007      	beq.n	800601e <I2C_DMAXferCplt+0x6e>
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006014:	2b22      	cmp	r3, #34	; 0x22
 8006016:	d133      	bne.n	8006080 <I2C_DMAXferCplt+0xd0>
 8006018:	7cbb      	ldrb	r3, [r7, #18]
 800601a:	2b20      	cmp	r3, #32
 800601c:	d130      	bne.n	8006080 <I2C_DMAXferCplt+0xd0>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006034:	7cfb      	ldrb	r3, [r7, #19]
 8006036:	2b29      	cmp	r3, #41	; 0x29
 8006038:	d10b      	bne.n	8006052 <I2C_DMAXferCplt+0xa2>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2221      	movs	r2, #33	; 0x21
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2228      	movs	r2, #40	; 0x28
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604c:	6978      	ldr	r0, [r7, #20]
 800604e:	4798      	blx	r3
 8006050:	e00d      	b.n	800606e <I2C_DMAXferCplt+0xbe>
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	2b2a      	cmp	r3, #42	; 0x2a
 8006056:	d10a      	bne.n	800606e <I2C_DMAXferCplt+0xbe>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2222      	movs	r2, #34	; 0x22
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2228      	movs	r2, #40	; 0x28
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	4798      	blx	r3
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800607c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800607e:	e06d      	b.n	800615c <I2C_DMAXferCplt+0x1ac>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d067      	beq.n	800615c <I2C_DMAXferCplt+0x1ac>
    if (hi2c->XferCount == (uint16_t)1)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <I2C_DMAXferCplt+0xf6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80060b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060bc:	d009      	beq.n	80060d2 <I2C_DMAXferCplt+0x122>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d006      	beq.n	80060d2 <I2C_DMAXferCplt+0x122>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060ca:	d002      	beq.n	80060d2 <I2C_DMAXferCplt+0x122>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d107      	bne.n	80060e2 <I2C_DMAXferCplt+0x132>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006100:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <I2C_DMAXferCplt+0x16a>
      hi2c->ErrorCallback(hi2c);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	6978      	ldr	r0, [r7, #20]
 8006116:	4798      	blx	r3
}
 8006118:	e020      	b.n	800615c <I2C_DMAXferCplt+0x1ac>
      hi2c->State = HAL_I2C_STATE_READY;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d10b      	bne.n	8006146 <I2C_DMAXferCplt+0x196>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->MemRxCpltCallback(hi2c);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006140:	6978      	ldr	r0, [r7, #20]
 8006142:	4798      	blx	r3
}
 8006144:	e00a      	b.n	800615c <I2C_DMAXferCplt+0x1ac>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2212      	movs	r2, #18
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->MasterRxCpltCallback(hi2c);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	4798      	blx	r3
}
 800615c:	bf00      	nop
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2200      	movs	r2, #0
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f043 0210 	orr.w	r2, r3, #16
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	4798      	blx	r3
#else
  HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061ee:	4b4c      	ldr	r3, [pc, #304]	; (8006320 <I2C_DMAAbort+0x14c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	08db      	lsrs	r3, r3, #3
 80061f4:	4a4b      	ldr	r2, [pc, #300]	; (8006324 <I2C_DMAAbort+0x150>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	0a1a      	lsrs	r2, r3, #8
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	00da      	lsls	r2, r3, #3
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800621a:	e00a      	b.n	8006232 <I2C_DMAAbort+0x5e>
    }
    count--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800622c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006230:	d0ea      	beq.n	8006208 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	2200      	movs	r2, #0
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006260:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006274:	2200      	movs	r2, #0
 8006276:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	2200      	movs	r2, #0
 8006286:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b60      	cmp	r3, #96	; 0x60
 80062a2:	d10f      	bne.n	80062c4 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062be:	6978      	ldr	r0, [r7, #20]
 80062c0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062c2:	e028      	b.n	8006316 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c4:	7cfb      	ldrb	r3, [r7, #19]
 80062c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062ca:	2b28      	cmp	r3, #40	; 0x28
 80062cc:	d117      	bne.n	80062fe <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2228      	movs	r2, #40	; 0x28
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062fc:	e007      	b.n	800630e <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	4798      	blx	r3
}
 8006316:	bf00      	nop
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000078 	.word	0x20000078
 8006324:	14f8b589 	.word	0x14f8b589

08006328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006338:	e025      	b.n	8006386 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006340:	d021      	beq.n	8006386 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fc fb9b 	bl	8002a7c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d116      	bne.n	8006386 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0220 	orr.w	r2, r3, #32
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e023      	b.n	80063ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10d      	bne.n	80063ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	43da      	mvns	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf0c      	ite	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	2300      	movne	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	e00c      	b.n	80063c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	43da      	mvns	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d0b6      	beq.n	800633a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063e4:	e051      	b.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f4:	d123      	bne.n	800643e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800640e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f043 0204 	orr.w	r2, r3, #4
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e046      	b.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006444:	d021      	beq.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fc fb19 	bl	8002a7c <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e020      	b.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10c      	bne.n	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	43da      	mvns	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e00b      	b.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	43da      	mvns	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d18d      	bne.n	80063e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064e0:	e02d      	b.n	800653e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f86a 	bl	80065bc <I2C_IsAcknowledgeFailed>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e02d      	b.n	800654e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f8:	d021      	beq.n	800653e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fa:	f7fc fabf 	bl	8002a7c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	d302      	bcc.n	8006510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d116      	bne.n	800653e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e007      	b.n	800654e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d1ca      	bne.n	80064e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006564:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	0a1a      	lsrs	r2, r3, #8
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b01      	subs	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e008      	b.n	80065a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d0e9      	beq.n	800657a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000078 	.word	0x20000078
 80065b8:	14f8b589 	.word	0x14f8b589

080065bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d2:	d11b      	bne.n	800660c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	f043 0204 	orr.w	r2, r3, #4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr

08006618 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006628:	d103      	bne.n	8006632 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006630:	e007      	b.n	8006642 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800663a:	d102      	bne.n	8006642 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2208      	movs	r2, #8
 8006640:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e35c      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01c      	beq.n	80066a0 <HAL_RCC_OscConfig+0x54>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d116      	bne.n	80066a0 <HAL_RCC_OscConfig+0x54>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d110      	bne.n	80066a0 <HAL_RCC_OscConfig+0x54>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <HAL_RCC_OscConfig+0x54>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <HAL_RCC_OscConfig+0x54>
 8006696:	f240 1167 	movw	r1, #359	; 0x167
 800669a:	48a5      	ldr	r0, [pc, #660]	; (8006930 <HAL_RCC_OscConfig+0x2e4>)
 800669c:	f7fb fc13 	bl	8001ec6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 809a 	beq.w	80067e2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <HAL_RCC_OscConfig+0x88>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066be:	d009      	beq.n	80066d4 <HAL_RCC_OscConfig+0x88>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066c8:	d004      	beq.n	80066d4 <HAL_RCC_OscConfig+0x88>
 80066ca:	f240 116d 	movw	r1, #365	; 0x16d
 80066ce:	4898      	ldr	r0, [pc, #608]	; (8006930 <HAL_RCC_OscConfig+0x2e4>)
 80066d0:	f7fb fbf9 	bl	8001ec6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066d4:	4b97      	ldr	r3, [pc, #604]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d00c      	beq.n	80066fa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066e0:	4b94      	ldr	r3, [pc, #592]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d112      	bne.n	8006712 <HAL_RCC_OscConfig+0xc6>
 80066ec:	4b91      	ldr	r3, [pc, #580]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d10b      	bne.n	8006712 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fa:	4b8e      	ldr	r3, [pc, #568]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d06c      	beq.n	80067e0 <HAL_RCC_OscConfig+0x194>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d168      	bne.n	80067e0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e302      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671a:	d106      	bne.n	800672a <HAL_RCC_OscConfig+0xde>
 800671c:	4b85      	ldr	r3, [pc, #532]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a84      	ldr	r2, [pc, #528]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e02e      	b.n	8006788 <HAL_RCC_OscConfig+0x13c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10c      	bne.n	800674c <HAL_RCC_OscConfig+0x100>
 8006732:	4b80      	ldr	r3, [pc, #512]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a7f      	ldr	r2, [pc, #508]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4b7d      	ldr	r3, [pc, #500]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7c      	ldr	r2, [pc, #496]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e01d      	b.n	8006788 <HAL_RCC_OscConfig+0x13c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006754:	d10c      	bne.n	8006770 <HAL_RCC_OscConfig+0x124>
 8006756:	4b77      	ldr	r3, [pc, #476]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a76      	ldr	r2, [pc, #472]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 800675c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b74      	ldr	r3, [pc, #464]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a73      	ldr	r2, [pc, #460]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e00b      	b.n	8006788 <HAL_RCC_OscConfig+0x13c>
 8006770:	4b70      	ldr	r3, [pc, #448]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a6f      	ldr	r2, [pc, #444]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b6d      	ldr	r3, [pc, #436]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a6c      	ldr	r2, [pc, #432]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006790:	f7fc f974 	bl	8002a7c <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006798:	f7fc f970 	bl	8002a7c <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	; 0x64
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e2b6      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	4b62      	ldr	r3, [pc, #392]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x14c>
 80067b6:	e014      	b.n	80067e2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fc f960 	bl	8002a7c <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067c0:	f7fc f95c 	bl	8002a7c <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e2a2      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067d2:	4b58      	ldr	r3, [pc, #352]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x174>
 80067de:	e000      	b.n	80067e2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d079      	beq.n	80068e2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_RCC_OscConfig+0x1bc>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d004      	beq.n	8006808 <HAL_RCC_OscConfig+0x1bc>
 80067fe:	f240 11a1 	movw	r1, #417	; 0x1a1
 8006802:	484b      	ldr	r0, [pc, #300]	; (8006930 <HAL_RCC_OscConfig+0x2e4>)
 8006804:	f7fb fb5f 	bl	8001ec6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	2b1f      	cmp	r3, #31
 800680e:	d904      	bls.n	800681a <HAL_RCC_OscConfig+0x1ce>
 8006810:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8006814:	4846      	ldr	r0, [pc, #280]	; (8006930 <HAL_RCC_OscConfig+0x2e4>)
 8006816:	f7fb fb56 	bl	8001ec6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800681a:	4b46      	ldr	r3, [pc, #280]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006826:	4b43      	ldr	r3, [pc, #268]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b08      	cmp	r3, #8
 8006830:	d11c      	bne.n	800686c <HAL_RCC_OscConfig+0x220>
 8006832:	4b40      	ldr	r3, [pc, #256]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d116      	bne.n	800686c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800683e:	4b3d      	ldr	r3, [pc, #244]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_RCC_OscConfig+0x20a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d001      	beq.n	8006856 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e260      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006856:	4b37      	ldr	r3, [pc, #220]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	4933      	ldr	r1, [pc, #204]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006866:	4313      	orrs	r3, r2
 8006868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800686a:	e03a      	b.n	80068e2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d020      	beq.n	80068b6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006874:	4b30      	ldr	r3, [pc, #192]	; (8006938 <HAL_RCC_OscConfig+0x2ec>)
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fc f8ff 	bl	8002a7c <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006882:	f7fc f8fb 	bl	8002a7c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e241      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4921      	ldr	r1, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	600b      	str	r3, [r1, #0]
 80068b4:	e015      	b.n	80068e2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068b6:	4b20      	ldr	r3, [pc, #128]	; (8006938 <HAL_RCC_OscConfig+0x2ec>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fc f8de 	bl	8002a7c <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c4:	f7fc f8da 	bl	8002a7c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e220      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068d6:	4b17      	ldr	r3, [pc, #92]	; (8006934 <HAL_RCC_OscConfig+0x2e8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d048      	beq.n	8006980 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <HAL_RCC_OscConfig+0x2bc>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d004      	beq.n	8006908 <HAL_RCC_OscConfig+0x2bc>
 80068fe:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006902:	480b      	ldr	r0, [pc, #44]	; (8006930 <HAL_RCC_OscConfig+0x2e4>)
 8006904:	f7fb fadf 	bl	8001ec6 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d021      	beq.n	8006954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <HAL_RCC_OscConfig+0x2f0>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006916:	f7fc f8b1 	bl	8002a7c <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691c:	e010      	b.n	8006940 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800691e:	f7fc f8ad 	bl	8002a7c <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d909      	bls.n	8006940 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e1f3      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
 8006930:	08012984 	.word	0x08012984
 8006934:	40021000 	.word	0x40021000
 8006938:	42420000 	.word	0x42420000
 800693c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006940:	4b67      	ldr	r3, [pc, #412]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0e8      	beq.n	800691e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800694c:	2001      	movs	r0, #1
 800694e:	f000 fc1b 	bl	8007188 <RCC_Delay>
 8006952:	e015      	b.n	8006980 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006954:	4b63      	ldr	r3, [pc, #396]	; (8006ae4 <HAL_RCC_OscConfig+0x498>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800695a:	f7fc f88f 	bl	8002a7c <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006962:	f7fc f88b 	bl	8002a7c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1d1      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006974:	4b5a      	ldr	r3, [pc, #360]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80c0 	beq.w	8006b0e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x368>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d008      	beq.n	80069b4 <HAL_RCC_OscConfig+0x368>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d004      	beq.n	80069b4 <HAL_RCC_OscConfig+0x368>
 80069aa:	f240 2111 	movw	r1, #529	; 0x211
 80069ae:	484e      	ldr	r0, [pc, #312]	; (8006ae8 <HAL_RCC_OscConfig+0x49c>)
 80069b0:	f7fb fa89 	bl	8001ec6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b4:	4b4a      	ldr	r3, [pc, #296]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10d      	bne.n	80069dc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c0:	4b47      	ldr	r3, [pc, #284]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	4a46      	ldr	r2, [pc, #280]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 80069c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ca:	61d3      	str	r3, [r2, #28]
 80069cc:	4b44      	ldr	r3, [pc, #272]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069dc:	4b43      	ldr	r3, [pc, #268]	; (8006aec <HAL_RCC_OscConfig+0x4a0>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d118      	bne.n	8006a1a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <HAL_RCC_OscConfig+0x4a0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <HAL_RCC_OscConfig+0x4a0>)
 80069ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069f4:	f7fc f842 	bl	8002a7c <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fc:	f7fc f83e 	bl	8002a7c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b64      	cmp	r3, #100	; 0x64
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e184      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0e:	4b37      	ldr	r3, [pc, #220]	; (8006aec <HAL_RCC_OscConfig+0x4a0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d106      	bne.n	8006a30 <HAL_RCC_OscConfig+0x3e4>
 8006a22:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	4a2e      	ldr	r2, [pc, #184]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	6213      	str	r3, [r2, #32]
 8006a2e:	e02d      	b.n	8006a8c <HAL_RCC_OscConfig+0x440>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCC_OscConfig+0x406>
 8006a38:	4b29      	ldr	r3, [pc, #164]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	4a28      	ldr	r2, [pc, #160]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6213      	str	r3, [r2, #32]
 8006a44:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a4a:	f023 0304 	bic.w	r3, r3, #4
 8006a4e:	6213      	str	r3, [r2, #32]
 8006a50:	e01c      	b.n	8006a8c <HAL_RCC_OscConfig+0x440>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d10c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x428>
 8006a5a:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a60:	f043 0304 	orr.w	r3, r3, #4
 8006a64:	6213      	str	r3, [r2, #32]
 8006a66:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6213      	str	r3, [r2, #32]
 8006a72:	e00b      	b.n	8006a8c <HAL_RCC_OscConfig+0x440>
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	6213      	str	r3, [r2, #32]
 8006a80:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006a86:	f023 0304 	bic.w	r3, r3, #4
 8006a8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a94:	f7fb fff2 	bl	8002a7c <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9c:	f7fb ffee 	bl	8002a7c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e132      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <HAL_RCC_OscConfig+0x494>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ee      	beq.n	8006a9c <HAL_RCC_OscConfig+0x450>
 8006abe:	e01d      	b.n	8006afc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac0:	f7fb ffdc 	bl	8002a7c <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac6:	e013      	b.n	8006af0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac8:	f7fb ffd8 	bl	8002a7c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d90a      	bls.n	8006af0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e11c      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
 8006ade:	bf00      	nop
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	42420480 	.word	0x42420480
 8006ae8:	08012984 	.word	0x08012984
 8006aec:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af0:	4b8b      	ldr	r3, [pc, #556]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d105      	bne.n	8006b0e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b02:	4b87      	ldr	r3, [pc, #540]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	4a86      	ldr	r2, [pc, #536]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_RCC_OscConfig+0x4e4>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d008      	beq.n	8006b30 <HAL_RCC_OscConfig+0x4e4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d004      	beq.n	8006b30 <HAL_RCC_OscConfig+0x4e4>
 8006b26:	f240 21af 	movw	r1, #687	; 0x2af
 8006b2a:	487e      	ldr	r0, [pc, #504]	; (8006d24 <HAL_RCC_OscConfig+0x6d8>)
 8006b2c:	f7fb f9cb 	bl	8001ec6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80ee 	beq.w	8006d16 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b3a:	4b79      	ldr	r3, [pc, #484]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	f000 80ce 	beq.w	8006ce4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f040 80b2 	bne.w	8006cb6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCC_OscConfig+0x522>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d004      	beq.n	8006b6e <HAL_RCC_OscConfig+0x522>
 8006b64:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8006b68:	486e      	ldr	r0, [pc, #440]	; (8006d24 <HAL_RCC_OscConfig+0x6d8>)
 8006b6a:	f7fb f9ac 	bl	8001ec6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d04a      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b7e:	d045      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b88:	d040      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b92:	d03b      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9c:	d036      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006ba6:	d031      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006bb0:	d02c      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006bba:	d027      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc4:	d022      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006bce:	d01d      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006bd8:	d018      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006be2:	d013      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bec:	d00e      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8006bf6:	d009      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8006c00:	d004      	beq.n	8006c0c <HAL_RCC_OscConfig+0x5c0>
 8006c02:	f240 21b9 	movw	r1, #697	; 0x2b9
 8006c06:	4847      	ldr	r0, [pc, #284]	; (8006d24 <HAL_RCC_OscConfig+0x6d8>)
 8006c08:	f7fb f95d 	bl	8001ec6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0c:	4b46      	ldr	r3, [pc, #280]	; (8006d28 <HAL_RCC_OscConfig+0x6dc>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c12:	f7fb ff33 	bl	8002a7c <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fb ff2f 	bl	8002a7c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e075      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f0      	bne.n	8006c1a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c40:	d116      	bne.n	8006c70 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_RCC_OscConfig+0x612>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c52:	d004      	beq.n	8006c5e <HAL_RCC_OscConfig+0x612>
 8006c54:	f240 21cf 	movw	r1, #719	; 0x2cf
 8006c58:	4832      	ldr	r0, [pc, #200]	; (8006d24 <HAL_RCC_OscConfig+0x6d8>)
 8006c5a:	f7fb f934 	bl	8001ec6 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c5e:	4b30      	ldr	r3, [pc, #192]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	492d      	ldr	r1, [pc, #180]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c70:	4b2b      	ldr	r3, [pc, #172]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a19      	ldr	r1, [r3, #32]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	430b      	orrs	r3, r1
 8006c82:	4927      	ldr	r1, [pc, #156]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c88:	4b27      	ldr	r3, [pc, #156]	; (8006d28 <HAL_RCC_OscConfig+0x6dc>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8e:	f7fb fef5 	bl	8002a7c <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c96:	f7fb fef1 	bl	8002a7c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e037      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x64a>
 8006cb4:	e02f      	b.n	8006d16 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <HAL_RCC_OscConfig+0x6dc>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbc:	f7fb fede 	bl	8002a7c <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fb feda 	bl	8002a7c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e020      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x678>
 8006ce2:	e018      	b.n	8006d16 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e013      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_RCC_OscConfig+0x6d4>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d001      	beq.n	8006d16 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40021000 	.word	0x40021000
 8006d24:	08012984 	.word	0x08012984
 8006d28:	42420060 	.word	0x42420060

08006d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e176      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d116      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x4e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d110      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x4e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x4e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x4e>
 8006d70:	f44f 714e 	mov.w	r1, #824	; 0x338
 8006d74:	4874      	ldr	r0, [pc, #464]	; (8006f48 <HAL_RCC_ClockConfig+0x21c>)
 8006d76:	f7fb f8a6 	bl	8001ec6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x6a>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d007      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x6a>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d004      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x6a>
 8006d8c:	f240 3139 	movw	r1, #825	; 0x339
 8006d90:	486d      	ldr	r0, [pc, #436]	; (8006f48 <HAL_RCC_ClockConfig+0x21c>)
 8006d92:	f7fb f898 	bl	8001ec6 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d96:	4b6d      	ldr	r3, [pc, #436]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d910      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da4:	4b69      	ldr	r3, [pc, #420]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f023 0207 	bic.w	r2, r3, #7
 8006dac:	4967      	ldr	r1, [pc, #412]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db4:	4b65      	ldr	r3, [pc, #404]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e133      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d049      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dde:	4b5c      	ldr	r3, [pc, #368]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4a5b      	ldr	r2, [pc, #364]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006de4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006de8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006df6:	4b56      	ldr	r3, [pc, #344]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4a55      	ldr	r2, [pc, #340]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006dfc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e00:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d024      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d020      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b90      	cmp	r3, #144	; 0x90
 8006e18:	d01c      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8006e20:	d018      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2bb0      	cmp	r3, #176	; 0xb0
 8006e28:	d014      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e30:	d010      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2bd0      	cmp	r3, #208	; 0xd0
 8006e38:	d00c      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2be0      	cmp	r3, #224	; 0xe0
 8006e40:	d008      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2bf0      	cmp	r3, #240	; 0xf0
 8006e48:	d004      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x128>
 8006e4a:	f240 315f 	movw	r1, #863	; 0x35f
 8006e4e:	483e      	ldr	r0, [pc, #248]	; (8006f48 <HAL_RCC_ClockConfig+0x21c>)
 8006e50:	f7fb f839 	bl	8001ec6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e54:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	493b      	ldr	r1, [pc, #236]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d051      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00c      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x168>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d008      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x168>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d004      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x168>
 8006e8a:	f240 3166 	movw	r1, #870	; 0x366
 8006e8e:	482e      	ldr	r0, [pc, #184]	; (8006f48 <HAL_RCC_ClockConfig+0x21c>)
 8006e90:	f7fb f819 	bl	8001ec6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9c:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d115      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0c0      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb4:	4b26      	ldr	r3, [pc, #152]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0b4      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec4:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e0ac      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f023 0203 	bic.w	r2, r3, #3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	491b      	ldr	r1, [pc, #108]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ee6:	f7fb fdc9 	bl	8002a7c <HAL_GetTick>
 8006eea:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eec:	e00a      	b.n	8006f04 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eee:	f7fb fdc5 	bl	8002a7c <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e094      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f04:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <HAL_RCC_ClockConfig+0x224>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 020c 	and.w	r2, r3, #12
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d1eb      	bne.n	8006eee <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d217      	bcs.n	8006f54 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 0207 	bic.w	r2, r3, #7
 8006f2c:	4907      	ldr	r1, [pc, #28]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_RCC_ClockConfig+0x220>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d008      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e073      	b.n	800702e <HAL_RCC_ClockConfig+0x302>
 8006f46:	bf00      	nop
 8006f48:	08012984 	.word	0x08012984
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d025      	beq.n	8006fac <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d018      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x26e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f70:	d013      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x26e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006f7a:	d00e      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x26e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f84:	d009      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x26e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x26e>
 8006f90:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8006f94:	4828      	ldr	r0, [pc, #160]	; (8007038 <HAL_RCC_ClockConfig+0x30c>)
 8006f96:	f7fa ff96 	bl	8001ec6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f9a:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_RCC_ClockConfig+0x310>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4925      	ldr	r1, [pc, #148]	; (800703c <HAL_RCC_ClockConfig+0x310>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d026      	beq.n	8007006 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d018      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2c6>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc8:	d013      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2c6>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2c6>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fdc:	d009      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2c6>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x2c6>
 8006fe8:	f240 31ab 	movw	r1, #939	; 0x3ab
 8006fec:	4812      	ldr	r0, [pc, #72]	; (8007038 <HAL_RCC_ClockConfig+0x30c>)
 8006fee:	f7fa ff6a 	bl	8001ec6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCC_ClockConfig+0x310>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	490e      	ldr	r1, [pc, #56]	; (800703c <HAL_RCC_ClockConfig+0x310>)
 8007002:	4313      	orrs	r3, r2
 8007004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007006:	f000 f82d 	bl	8007064 <HAL_RCC_GetSysClockFreq>
 800700a:	4602      	mov	r2, r0
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCC_ClockConfig+0x310>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	490a      	ldr	r1, [pc, #40]	; (8007040 <HAL_RCC_ClockConfig+0x314>)
 8007018:	5ccb      	ldrb	r3, [r1, r3]
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <HAL_RCC_ClockConfig+0x318>)
 8007020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <HAL_RCC_ClockConfig+0x31c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7fb fce6 	bl	80029f8 <HAL_InitTick>

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	08012984 	.word	0x08012984
 800703c:	40021000 	.word	0x40021000
 8007040:	08013944 	.word	0x08013944
 8007044:	20000078 	.word	0x20000078
 8007048:	2000007c 	.word	0x2000007c

0800704c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <HAL_RCC_EnableCSS+0x14>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	4242004c 	.word	0x4242004c

08007064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007064:	b490      	push	{r4, r7}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800706a:	4b2a      	ldr	r3, [pc, #168]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb0>)
 800706c:	1d3c      	adds	r4, r7, #4
 800706e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007074:	f240 2301 	movw	r3, #513	; 0x201
 8007078:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b04      	cmp	r3, #4
 800709c:	d002      	beq.n	80070a4 <HAL_RCC_GetSysClockFreq+0x40>
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d003      	beq.n	80070aa <HAL_RCC_GetSysClockFreq+0x46>
 80070a2:	e02d      	b.n	8007100 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070a4:	4b1d      	ldr	r3, [pc, #116]	; (800711c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a6:	623b      	str	r3, [r7, #32]
      break;
 80070a8:	e02d      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	0c9b      	lsrs	r3, r3, #18
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070b6:	4413      	add	r3, r2
 80070b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d013      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	0c5b      	lsrs	r3, r3, #17
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070d6:	4413      	add	r3, r2
 80070d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	4a0e      	ldr	r2, [pc, #56]	; (800711c <HAL_RCC_GetSysClockFreq+0xb8>)
 80070e2:	fb02 f203 	mul.w	r2, r2, r3
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
 80070ee:	e004      	b.n	80070fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	4a0b      	ldr	r2, [pc, #44]	; (8007120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070f4:	fb02 f303 	mul.w	r3, r2, r3
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	623b      	str	r3, [r7, #32]
      break;
 80070fe:	e002      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007102:	623b      	str	r3, [r7, #32]
      break;
 8007104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007106:	6a3b      	ldr	r3, [r7, #32]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bc90      	pop	{r4, r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	080129bc 	.word	0x080129bc
 8007118:	40021000 	.word	0x40021000
 800711c:	007a1200 	.word	0x007a1200
 8007120:	003d0900 	.word	0x003d0900

08007124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <HAL_RCC_GetHCLKFreq+0x10>)
 800712a:	681b      	ldr	r3, [r3, #0]
}
 800712c:	4618      	mov	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	20000078 	.word	0x20000078

08007138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800713c:	f7ff fff2 	bl	8007124 <HAL_RCC_GetHCLKFreq>
 8007140:	4602      	mov	r2, r0
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	4903      	ldr	r1, [pc, #12]	; (800715c <HAL_RCC_GetPCLK1Freq+0x24>)
 800714e:	5ccb      	ldrb	r3, [r1, r3]
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40021000 	.word	0x40021000
 800715c:	08013954 	.word	0x08013954

08007160 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007164:	4b06      	ldr	r3, [pc, #24]	; (8007180 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d104      	bne.n	800717a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007170:	f000 f828 	bl	80071c4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007174:	4b03      	ldr	r3, [pc, #12]	; (8007184 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007176:	2280      	movs	r2, #128	; 0x80
 8007178:	701a      	strb	r2, [r3, #0]
  }
}
 800717a:	bf00      	nop
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40021000 	.word	0x40021000
 8007184:	4002100a 	.word	0x4002100a

08007188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <RCC_Delay+0x34>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <RCC_Delay+0x38>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	0a5b      	lsrs	r3, r3, #9
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071a4:	bf00      	nop
  }
  while (Delay --);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1e5a      	subs	r2, r3, #1
 80071aa:	60fa      	str	r2, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f9      	bne.n	80071a4 <RCC_Delay+0x1c>
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	20000078 	.word	0x20000078
 80071c0:	10624dd3 	.word	0x10624dd3

080071c4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80071c8:	bf00      	nop
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e195      	b.n	800750e <HAL_SPI_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a6e      	ldr	r2, [pc, #440]	; (80073a0 <HAL_SPI_Init+0x1d0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_SPI_Init+0x3a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a6c      	ldr	r2, [pc, #432]	; (80073a4 <HAL_SPI_Init+0x1d4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_SPI_Init+0x3a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <HAL_SPI_Init+0x1d8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_SPI_Init+0x3a>
 8007200:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8007204:	4869      	ldr	r0, [pc, #420]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007206:	f7fa fe5e 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <HAL_SPI_Init+0x56>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800721a:	d004      	beq.n	8007226 <HAL_SPI_Init+0x56>
 800721c:	f240 1159 	movw	r1, #345	; 0x159
 8007220:	4862      	ldr	r0, [pc, #392]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007222:	f7fa fe50 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00e      	beq.n	800724c <HAL_SPI_Init+0x7c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007236:	d009      	beq.n	800724c <HAL_SPI_Init+0x7c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d004      	beq.n	800724c <HAL_SPI_Init+0x7c>
 8007242:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8007246:	4859      	ldr	r0, [pc, #356]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007248:	f7fa fe3d 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007254:	d008      	beq.n	8007268 <HAL_SPI_Init+0x98>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <HAL_SPI_Init+0x98>
 800725e:	f240 115b 	movw	r1, #347	; 0x15b
 8007262:	4852      	ldr	r0, [pc, #328]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007264:	f7fa fe2f 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d00d      	beq.n	800728e <HAL_SPI_Init+0xbe>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <HAL_SPI_Init+0xbe>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007282:	d004      	beq.n	800728e <HAL_SPI_Init+0xbe>
 8007284:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8007288:	4848      	ldr	r0, [pc, #288]	; (80073ac <HAL_SPI_Init+0x1dc>)
 800728a:	f7fa fe1c 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d020      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b08      	cmp	r3, #8
 800729c:	d01c      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d018      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b18      	cmp	r3, #24
 80072ac:	d014      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d010      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	2b28      	cmp	r3, #40	; 0x28
 80072bc:	d00c      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b30      	cmp	r3, #48	; 0x30
 80072c4:	d008      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b38      	cmp	r3, #56	; 0x38
 80072cc:	d004      	beq.n	80072d8 <HAL_SPI_Init+0x108>
 80072ce:	f240 115d 	movw	r1, #349	; 0x15d
 80072d2:	4836      	ldr	r0, [pc, #216]	; (80073ac <HAL_SPI_Init+0x1dc>)
 80072d4:	f7fa fdf7 	bl	8001ec6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_SPI_Init+0x122>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d004      	beq.n	80072f2 <HAL_SPI_Init+0x122>
 80072e8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80072ec:	482f      	ldr	r0, [pc, #188]	; (80073ac <HAL_SPI_Init+0x1dc>)
 80072ee:	f7fa fdea 	bl	8001ec6 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <HAL_SPI_Init+0x134>
 80072fa:	f240 1161 	movw	r1, #353	; 0x161
 80072fe:	482b      	ldr	r0, [pc, #172]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007300:	f7fa fde1 	bl	8001ec6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d151      	bne.n	80073b0 <HAL_SPI_Init+0x1e0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_SPI_Init+0x156>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d004      	beq.n	8007326 <HAL_SPI_Init+0x156>
 800731c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007320:	4822      	ldr	r0, [pc, #136]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007322:	f7fa fdd0 	bl	8001ec6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_SPI_Init+0x170>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d004      	beq.n	8007340 <HAL_SPI_Init+0x170>
 8007336:	f240 1165 	movw	r1, #357	; 0x165
 800733a:	481c      	ldr	r0, [pc, #112]	; (80073ac <HAL_SPI_Init+0x1dc>)
 800733c:	f7fa fdc3 	bl	8001ec6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007348:	d125      	bne.n	8007396 <HAL_SPI_Init+0x1c6>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d059      	beq.n	8007406 <HAL_SPI_Init+0x236>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2b08      	cmp	r3, #8
 8007358:	d055      	beq.n	8007406 <HAL_SPI_Init+0x236>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b10      	cmp	r3, #16
 8007360:	d051      	beq.n	8007406 <HAL_SPI_Init+0x236>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	2b18      	cmp	r3, #24
 8007368:	d04d      	beq.n	8007406 <HAL_SPI_Init+0x236>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	2b20      	cmp	r3, #32
 8007370:	d049      	beq.n	8007406 <HAL_SPI_Init+0x236>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	2b28      	cmp	r3, #40	; 0x28
 8007378:	d045      	beq.n	8007406 <HAL_SPI_Init+0x236>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b30      	cmp	r3, #48	; 0x30
 8007380:	d041      	beq.n	8007406 <HAL_SPI_Init+0x236>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	2b38      	cmp	r3, #56	; 0x38
 8007388:	d03d      	beq.n	8007406 <HAL_SPI_Init+0x236>
 800738a:	f240 1169 	movw	r1, #361	; 0x169
 800738e:	4807      	ldr	r0, [pc, #28]	; (80073ac <HAL_SPI_Init+0x1dc>)
 8007390:	f7fa fd99 	bl	8001ec6 <assert_failed>
 8007394:	e037      	b.n	8007406 <HAL_SPI_Init+0x236>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	61da      	str	r2, [r3, #28]
 800739c:	e033      	b.n	8007406 <HAL_SPI_Init+0x236>
 800739e:	bf00      	nop
 80073a0:	40013000 	.word	0x40013000
 80073a4:	40003800 	.word	0x40003800
 80073a8:	40003c00 	.word	0x40003c00
 80073ac:	080129cc 	.word	0x080129cc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d01c      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d018      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2b18      	cmp	r3, #24
 80073ce:	d014      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d010      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b28      	cmp	r3, #40	; 0x28
 80073de:	d00c      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	2b30      	cmp	r3, #48	; 0x30
 80073e6:	d008      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	2b38      	cmp	r3, #56	; 0x38
 80073ee:	d004      	beq.n	80073fa <HAL_SPI_Init+0x22a>
 80073f0:	f240 1173 	movw	r1, #371	; 0x173
 80073f4:	4848      	ldr	r0, [pc, #288]	; (8007518 <HAL_SPI_Init+0x348>)
 80073f6:	f7fa fd66 	bl	8001ec6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d126      	bne.n	8007466 <HAL_SPI_Init+0x296>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a3e      	ldr	r2, [pc, #248]	; (800751c <HAL_SPI_Init+0x34c>)
 8007424:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a3d      	ldr	r2, [pc, #244]	; (8007520 <HAL_SPI_Init+0x350>)
 800742a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a3d      	ldr	r2, [pc, #244]	; (8007524 <HAL_SPI_Init+0x354>)
 8007430:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a3c      	ldr	r2, [pc, #240]	; (8007528 <HAL_SPI_Init+0x358>)
 8007436:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a3c      	ldr	r2, [pc, #240]	; (800752c <HAL_SPI_Init+0x35c>)
 800743c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a3b      	ldr	r2, [pc, #236]	; (8007530 <HAL_SPI_Init+0x360>)
 8007442:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a3b      	ldr	r2, [pc, #236]	; (8007534 <HAL_SPI_Init+0x364>)
 8007448:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a3a      	ldr	r2, [pc, #232]	; (8007538 <HAL_SPI_Init+0x368>)
 800744e:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <HAL_SPI_Init+0x28e>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a38      	ldr	r2, [pc, #224]	; (800753c <HAL_SPI_Init+0x36c>)
 800745c:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	ea42 0103 	orr.w	r1, r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	0c1a      	lsrs	r2, r3, #16
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f002 0204 	and.w	r2, r2, #4
 80074ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	080129cc 	.word	0x080129cc
 800751c:	08007f29 	.word	0x08007f29
 8007520:	08007f3b 	.word	0x08007f3b
 8007524:	08007f4d 	.word	0x08007f4d
 8007528:	08007f5f 	.word	0x08007f5f
 800752c:	08007f71 	.word	0x08007f71
 8007530:	08007f83 	.word	0x08007f83
 8007534:	08007f95 	.word	0x08007f95
 8007538:	08007fa7 	.word	0x08007fa7
 800753c:	08002601 	.word	0x08002601

08007540 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_SPI_Transmit+0x30>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007564:	d004      	beq.n	8007570 <HAL_SPI_Transmit+0x30>
 8007566:	f240 3122 	movw	r1, #802	; 0x322
 800756a:	4893      	ldr	r0, [pc, #588]	; (80077b8 <HAL_SPI_Transmit+0x278>)
 800756c:	f7fa fcab 	bl	8001ec6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_SPI_Transmit+0x3e>
 800757a:	2302      	movs	r3, #2
 800757c:	e128      	b.n	80077d0 <HAL_SPI_Transmit+0x290>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007586:	f7fb fa79 	bl	8002a7c <HAL_GetTick>
 800758a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d002      	beq.n	80075a2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800759c:	2302      	movs	r3, #2
 800759e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a0:	e10d      	b.n	80077be <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_SPI_Transmit+0x6e>
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075b2:	e104      	b.n	80077be <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2203      	movs	r2, #3
 80075b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fa:	d10f      	bne.n	800761c <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d007      	beq.n	800763a <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007638:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007642:	d14b      	bne.n	80076dc <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_SPI_Transmit+0x112>
 800764c:	8afb      	ldrh	r3, [r7, #22]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d13e      	bne.n	80076d0 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007676:	e02b      	b.n	80076d0 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b02      	cmp	r3, #2
 8007684:	d112      	bne.n	80076ac <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80076aa:	e011      	b.n	80076d0 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ac:	f7fb f9e6 	bl	8002a7c <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d803      	bhi.n	80076c4 <HAL_SPI_Transmit+0x184>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c2:	d102      	bne.n	80076ca <HAL_SPI_Transmit+0x18a>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d102      	bne.n	80076d0 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076ce:	e076      	b.n	80077be <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ce      	bne.n	8007678 <HAL_SPI_Transmit+0x138>
 80076da:	e04c      	b.n	8007776 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_SPI_Transmit+0x1aa>
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d140      	bne.n	800776c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007710:	e02c      	b.n	800776c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b02      	cmp	r3, #2
 800771e:	d113      	bne.n	8007748 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	86da      	strh	r2, [r3, #54]	; 0x36
 8007746:	e011      	b.n	800776c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007748:	f7fb f998 	bl	8002a7c <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d803      	bhi.n	8007760 <HAL_SPI_Transmit+0x220>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775e:	d102      	bne.n	8007766 <HAL_SPI_Transmit+0x226>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	77fb      	strb	r3, [r7, #31]
          goto error;
 800776a:	e028      	b.n	80077be <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1cd      	bne.n	8007712 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fd0c 	bl	8008198 <SPI_EndRxTxTransaction>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007794:	2300      	movs	r3, #0
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e002      	b.n	80077be <HAL_SPI_Transmit+0x27e>
 80077b8:	080129cc 	.word	0x080129cc
  }

error:
 80077bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f4:	d112      	bne.n	800781c <HAL_SPI_Receive+0x44>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10e      	bne.n	800781c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2204      	movs	r2, #4
 8007802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f8f2 	bl	80079fc <HAL_SPI_TransmitReceive>
 8007818:	4603      	mov	r3, r0
 800781a:	e0ea      	b.n	80079f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_SPI_Receive+0x52>
 8007826:	2302      	movs	r3, #2
 8007828:	e0e3      	b.n	80079f2 <HAL_SPI_Receive+0x21a>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007832:	f7fb f923 	bl	8002a7c <HAL_GetTick>
 8007836:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d002      	beq.n	800784a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007844:	2302      	movs	r3, #2
 8007846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007848:	e0ca      	b.n	80079e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_SPI_Receive+0x7e>
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800785a:	e0c1      	b.n	80079e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2204      	movs	r2, #4
 8007860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	88fa      	ldrh	r2, [r7, #6]
 8007874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	88fa      	ldrh	r2, [r7, #6]
 800787a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078a2:	d10f      	bne.n	80078c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d007      	beq.n	80078e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d162      	bne.n	80079b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078ea:	e02e      	b.n	800794a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d115      	bne.n	8007926 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f103 020c 	add.w	r2, r3, #12
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007924:	e011      	b.n	800794a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007926:	f7fb f8a9 	bl	8002a7c <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d803      	bhi.n	800793e <HAL_SPI_Receive+0x166>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793c:	d102      	bne.n	8007944 <HAL_SPI_Receive+0x16c>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007948:	e04a      	b.n	80079e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1cb      	bne.n	80078ec <HAL_SPI_Receive+0x114>
 8007954:	e031      	b.n	80079ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d113      	bne.n	800798c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	b292      	uxth	r2, r2
 8007970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	87da      	strh	r2, [r3, #62]	; 0x3e
 800798a:	e011      	b.n	80079b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798c:	f7fb f876 	bl	8002a7c <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d803      	bhi.n	80079a4 <HAL_SPI_Receive+0x1cc>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a2:	d102      	bne.n	80079aa <HAL_SPI_Receive+0x1d2>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079ae:	e017      	b.n	80079e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1cd      	bne.n	8007956 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fb98 	bl	80080f4 <SPI_EndRxTransaction>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	75fb      	strb	r3, [r7, #23]
 80079dc:	e000      	b.n	80079e0 <HAL_SPI_Receive+0x208>
  }

error :
 80079de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	; 0x30
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x2a>
 8007a1c:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8007a20:	4884      	ldr	r0, [pc, #528]	; (8007c34 <HAL_SPI_TransmitReceive+0x238>)
 8007a22:	f7fa fa50 	bl	8001ec6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x38>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e18d      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x354>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a3c:	f7fb f81e 	bl	8002a7c <HAL_GetTick>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a52:	887b      	ldrh	r3, [r7, #2]
 8007a54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00f      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x82>
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a64:	d107      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x7a>
 8007a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d003      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8007a76:	2302      	movs	r3, #2
 8007a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a7c:	e15e      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_SPI_TransmitReceive+0x94>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_SPI_TransmitReceive+0x94>
 8007a8a:	887b      	ldrh	r3, [r7, #2]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a96:	e151      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d003      	beq.n	8007aac <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2205      	movs	r2, #5
 8007aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	887a      	ldrh	r2, [r7, #2]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	887a      	ldrh	r2, [r7, #2]
 8007ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	887a      	ldrh	r2, [r7, #2]
 8007ace:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	d007      	beq.n	8007b00 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b08:	d178      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x11c>
 8007b12:	8b7b      	ldrh	r3, [r7, #26]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d166      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	881a      	ldrh	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b28:	1c9a      	adds	r2, r3, #2
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b3c:	e053      	b.n	8007be6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d11b      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x188>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x188>
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d113      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	1c9a      	adds	r2, r3, #2
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d119      	bne.n	8007bc6 <HAL_SPI_TransmitReceive+0x1ca>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d014      	beq.n	8007bc6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	b292      	uxth	r2, r2
 8007ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	1c9a      	adds	r2, r3, #2
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bc6:	f7fa ff59 	bl	8002a7c <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d807      	bhi.n	8007be6 <HAL_SPI_TransmitReceive+0x1ea>
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bdc:	d003      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007be4:	e0aa      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1a6      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x142>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1a1      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x142>
 8007bfa:	e07f      	b.n	8007cfc <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x20e>
 8007c04:	8b7b      	ldrh	r3, [r7, #26]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d16e      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c30:	e05a      	b.n	8007ce8 <HAL_SPI_TransmitReceive+0x2ec>
 8007c32:	bf00      	nop
 8007c34:	080129cc 	.word	0x080129cc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d11c      	bne.n	8007c80 <HAL_SPI_TransmitReceive+0x284>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d017      	beq.n	8007c80 <HAL_SPI_TransmitReceive+0x284>
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d114      	bne.n	8007c80 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	7812      	ldrb	r2, [r2, #0]
 8007c62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d119      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x2c6>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d014      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cc2:	f7fa fedb 	bl	8002a7c <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d803      	bhi.n	8007cda <HAL_SPI_TransmitReceive+0x2de>
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x2e4>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d103      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ce6:	e029      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1a2      	bne.n	8007c38 <HAL_SPI_TransmitReceive+0x23c>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d19d      	bne.n	8007c38 <HAL_SPI_TransmitReceive+0x23c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fa49 	bl	8008198 <SPI_EndRxTxTransaction>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d006      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d18:	e010      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	e000      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007d3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3730      	adds	r7, #48	; 0x30
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	099b      	lsrs	r3, r3, #6
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10f      	bne.n	8007d9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	099b      	lsrs	r3, r3, #6
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	4798      	blx	r3
    return;
 8007d9a:	e0bf      	b.n	8007f1c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <HAL_SPI_IRQHandler+0x66>
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	09db      	lsrs	r3, r3, #7
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
    return;
 8007dbc:	e0ae      	b.n	8007f1c <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_SPI_IRQHandler+0x80>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	099b      	lsrs	r3, r3, #6
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80a2 	beq.w	8007f1c <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 809b 	beq.w	8007f1c <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	099b      	lsrs	r3, r3, #6
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d023      	beq.n	8007e3a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d011      	beq.n	8007e22 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	f043 0204 	orr.w	r2, r3, #4
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	e00b      	b.n	8007e3a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	693b      	ldr	r3, [r7, #16]
        return;
 8007e38:	e070      	b.n	8007f1c <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d014      	beq.n	8007e70 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	f043 0201 	orr.w	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d050      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e86:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d104      	bne.n	8007ea4 <HAL_SPI_IRQHandler+0x14c>
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d034      	beq.n	8007f0e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0203 	bic.w	r2, r2, #3
 8007eb2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d011      	beq.n	8007ee0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec0:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <HAL_SPI_IRQHandler+0x1cc>)
 8007ec2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb f8ef 	bl	80030ac <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d017      	beq.n	8007f18 <HAL_SPI_IRQHandler+0x1c0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <HAL_SPI_IRQHandler+0x1cc>)
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fb f8d9 	bl	80030ac <HAL_DMA_Abort_IT>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <HAL_SPI_IRQHandler+0x1c0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007f0c:	e004      	b.n	8007f18 <HAL_SPI_IRQHandler+0x1c0>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f16:	e000      	b.n	8007f1a <HAL_SPI_IRQHandler+0x1c2>
        if (hspi->hdmatx != NULL)
 8007f18:	bf00      	nop
    return;
 8007f1a:	bf00      	nop
  }
}
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	08007fb9 	.word	0x08007fb9

08007f28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bc80      	pop	{r7}
 8007f92:	4770      	bx	lr

08007f94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr

08007fb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ff4:	f7fa fd42 	bl	8002a7c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4413      	add	r3, r2
 8008002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008004:	f7fa fd3a 	bl	8002a7c <HAL_GetTick>
 8008008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800800a:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	015b      	lsls	r3, r3, #5
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	fb02 f303 	mul.w	r3, r2, r3
 8008018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800801a:	e054      	b.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008022:	d050      	beq.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008024:	f7fa fd2a 	bl	8002a7c <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	429a      	cmp	r2, r3
 8008032:	d902      	bls.n	800803a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d13d      	bne.n	80080b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008052:	d111      	bne.n	8008078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805c:	d004      	beq.n	8008068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008066:	d107      	bne.n	8008078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008080:	d10f      	bne.n	80080a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e017      	b.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4013      	ands	r3, r2
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	bf0c      	ite	eq
 80080d6:	2301      	moveq	r3, #1
 80080d8:	2300      	movne	r3, #0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d19b      	bne.n	800801c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000078 	.word	0x20000078

080080f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008108:	d111      	bne.n	800812e <SPI_EndRxTransaction+0x3a>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008112:	d004      	beq.n	800811e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800811c:	d107      	bne.n	800812e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800812c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d117      	bne.n	8008168 <SPI_EndRxTransaction+0x74>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008140:	d112      	bne.n	8008168 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	2101      	movs	r1, #1
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff ff49 	bl	8007fe4 <SPI_WaitFlagStateUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01a      	beq.n	800818e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e013      	b.n	8008190 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff ff36 	bl	8007fe4 <SPI_WaitFlagStateUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e000      	b.n	8008190 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	2180      	movs	r1, #128	; 0x80
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff ff18 	bl	8007fe4 <SPI_WaitFlagStateUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081be:	f043 0220 	orr.w	r2, r3, #32
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e000      	b.n	80081cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e0a7      	b.n	8008336 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a55      	ldr	r2, [pc, #340]	; (8008340 <HAL_TIM_Base_Init+0x16c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d027      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a53      	ldr	r2, [pc, #332]	; (8008344 <HAL_TIM_Base_Init+0x170>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d022      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008202:	d01d      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a4f      	ldr	r2, [pc, #316]	; (8008348 <HAL_TIM_Base_Init+0x174>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d018      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a4e      	ldr	r2, [pc, #312]	; (800834c <HAL_TIM_Base_Init+0x178>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a4c      	ldr	r2, [pc, #304]	; (8008350 <HAL_TIM_Base_Init+0x17c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00e      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a4b      	ldr	r2, [pc, #300]	; (8008354 <HAL_TIM_Base_Init+0x180>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d009      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a49      	ldr	r2, [pc, #292]	; (8008358 <HAL_TIM_Base_Init+0x184>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008236:	f240 1113 	movw	r1, #275	; 0x113
 800823a:	4848      	ldr	r0, [pc, #288]	; (800835c <HAL_TIM_Base_Init+0x188>)
 800823c:	f7f9 fe43 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d014      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b10      	cmp	r3, #16
 800824e:	d010      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b20      	cmp	r3, #32
 8008256:	d00c      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d008      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b60      	cmp	r3, #96	; 0x60
 8008266:	d004      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008268:	f44f 718a 	mov.w	r1, #276	; 0x114
 800826c:	483b      	ldr	r0, [pc, #236]	; (800835c <HAL_TIM_Base_Init+0x188>)
 800826e:	f7f9 fe2a 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008282:	d009      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828c:	d004      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 800828e:	f240 1115 	movw	r1, #277	; 0x115
 8008292:	4832      	ldr	r0, [pc, #200]	; (800835c <HAL_TIM_Base_Init+0x188>)
 8008294:	f7f9 fe17 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_TIM_Base_Init+0xde>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d004      	beq.n	80082b2 <HAL_TIM_Base_Init+0xde>
 80082a8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80082ac:	482b      	ldr	r0, [pc, #172]	; (800835c <HAL_TIM_Base_Init+0x188>)
 80082ae:	f7f9 fe0a 	bl	8001ec6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fa f9ec 	bl	80026a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f000 fd4e 	bl	8008d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40012c00 	.word	0x40012c00
 8008344:	40013400 	.word	0x40013400
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40001000 	.word	0x40001000
 8008358:	40001400 	.word	0x40001400
 800835c:	08012a04 	.word	0x08012a04

08008360 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e0a7      	b.n	80084c2 <HAL_TIM_OC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a55      	ldr	r2, [pc, #340]	; (80084cc <HAL_TIM_OC_Init+0x16c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d027      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a53      	ldr	r2, [pc, #332]	; (80084d0 <HAL_TIM_OC_Init+0x170>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d022      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d01d      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a4f      	ldr	r2, [pc, #316]	; (80084d4 <HAL_TIM_OC_Init+0x174>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d018      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a4e      	ldr	r2, [pc, #312]	; (80084d8 <HAL_TIM_OC_Init+0x178>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d013      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a4c      	ldr	r2, [pc, #304]	; (80084dc <HAL_TIM_OC_Init+0x17c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00e      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a4b      	ldr	r2, [pc, #300]	; (80084e0 <HAL_TIM_OC_Init+0x180>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d009      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a49      	ldr	r2, [pc, #292]	; (80084e4 <HAL_TIM_OC_Init+0x184>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d004      	beq.n	80083cc <HAL_TIM_OC_Init+0x6c>
 80083c2:	f240 2192 	movw	r1, #658	; 0x292
 80083c6:	4848      	ldr	r0, [pc, #288]	; (80084e8 <HAL_TIM_OC_Init+0x188>)
 80083c8:	f7f9 fd7d 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d014      	beq.n	80083fe <HAL_TIM_OC_Init+0x9e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d010      	beq.n	80083fe <HAL_TIM_OC_Init+0x9e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d00c      	beq.n	80083fe <HAL_TIM_OC_Init+0x9e>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d008      	beq.n	80083fe <HAL_TIM_OC_Init+0x9e>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b60      	cmp	r3, #96	; 0x60
 80083f2:	d004      	beq.n	80083fe <HAL_TIM_OC_Init+0x9e>
 80083f4:	f240 2193 	movw	r1, #659	; 0x293
 80083f8:	483b      	ldr	r0, [pc, #236]	; (80084e8 <HAL_TIM_OC_Init+0x188>)
 80083fa:	f7f9 fd64 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00e      	beq.n	8008424 <HAL_TIM_OC_Init+0xc4>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840e:	d009      	beq.n	8008424 <HAL_TIM_OC_Init+0xc4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008418:	d004      	beq.n	8008424 <HAL_TIM_OC_Init+0xc4>
 800841a:	f44f 7125 	mov.w	r1, #660	; 0x294
 800841e:	4832      	ldr	r0, [pc, #200]	; (80084e8 <HAL_TIM_OC_Init+0x188>)
 8008420:	f7f9 fd51 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_TIM_OC_Init+0xde>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b80      	cmp	r3, #128	; 0x80
 8008432:	d004      	beq.n	800843e <HAL_TIM_OC_Init+0xde>
 8008434:	f240 2195 	movw	r1, #661	; 0x295
 8008438:	482b      	ldr	r0, [pc, #172]	; (80084e8 <HAL_TIM_OC_Init+0x188>)
 800843a:	f7f9 fd44 	bl	8001ec6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <HAL_TIM_OC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f84a 	bl	80084ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f000 fc88 	bl	8008d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40000400 	.word	0x40000400
 80084d8:	40000800 	.word	0x40000800
 80084dc:	40000c00 	.word	0x40000c00
 80084e0:	40001000 	.word	0x40001000
 80084e4:	40001400 	.word	0x40001400
 80084e8:	08012a04 	.word	0x08012a04

080084ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr
	...

08008500 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d010      	beq.n	8008534 <HAL_TIM_OC_ConfigChannel+0x34>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b04      	cmp	r3, #4
 8008516:	d00d      	beq.n	8008534 <HAL_TIM_OC_ConfigChannel+0x34>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b08      	cmp	r3, #8
 800851c:	d00a      	beq.n	8008534 <HAL_TIM_OC_ConfigChannel+0x34>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b0c      	cmp	r3, #12
 8008522:	d007      	beq.n	8008534 <HAL_TIM_OC_ConfigChannel+0x34>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b3c      	cmp	r3, #60	; 0x3c
 8008528:	d004      	beq.n	8008534 <HAL_TIM_OC_ConfigChannel+0x34>
 800852a:	f640 717e 	movw	r1, #3966	; 0xf7e
 800852e:	4885      	ldr	r0, [pc, #532]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 8008530:	f7f9 fcc9 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d018      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b10      	cmp	r3, #16
 8008542:	d014      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b20      	cmp	r3, #32
 800854a:	d010      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b30      	cmp	r3, #48	; 0x30
 8008552:	d00c      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b50      	cmp	r3, #80	; 0x50
 800855a:	d008      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	d004      	beq.n	800856e <HAL_TIM_OC_ConfigChannel+0x6e>
 8008564:	f640 717f 	movw	r1, #3967	; 0xf7f
 8008568:	4876      	ldr	r0, [pc, #472]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 800856a:	f7f9 fcac 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <HAL_TIM_OC_ConfigChannel+0x88>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d004      	beq.n	8008588 <HAL_TIM_OC_ConfigChannel+0x88>
 800857e:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8008582:	4870      	ldr	r0, [pc, #448]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 8008584:	f7f9 fc9f 	bl	8001ec6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_TIM_OC_ConfigChannel+0x96>
 8008592:	2302      	movs	r3, #2
 8008594:	e0d2      	b.n	800873c <HAL_TIM_OC_ConfigChannel+0x23c>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b0c      	cmp	r3, #12
 80085a2:	f200 80c5 	bhi.w	8008730 <HAL_TIM_OC_ConfigChannel+0x230>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <HAL_TIM_OC_ConfigChannel+0xac>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085e1 	.word	0x080085e1
 80085b0:	08008731 	.word	0x08008731
 80085b4:	08008731 	.word	0x08008731
 80085b8:	08008731 	.word	0x08008731
 80085bc:	08008635 	.word	0x08008635
 80085c0:	08008731 	.word	0x08008731
 80085c4:	08008731 	.word	0x08008731
 80085c8:	08008731 	.word	0x08008731
 80085cc:	08008689 	.word	0x08008689
 80085d0:	08008731 	.word	0x08008731
 80085d4:	08008731 	.word	0x08008731
 80085d8:	08008731 	.word	0x08008731
 80085dc:	080086dd 	.word	0x080086dd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a58      	ldr	r2, [pc, #352]	; (8008748 <HAL_TIM_OC_ConfigChannel+0x248>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01d      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a57      	ldr	r2, [pc, #348]	; (800874c <HAL_TIM_OC_ConfigChannel+0x24c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d018      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fc:	d013      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a53      	ldr	r2, [pc, #332]	; (8008750 <HAL_TIM_OC_ConfigChannel+0x250>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a51      	ldr	r2, [pc, #324]	; (8008754 <HAL_TIM_OC_ConfigChannel+0x254>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a50      	ldr	r2, [pc, #320]	; (8008758 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIM_OC_ConfigChannel+0x126>
 800861c:	f640 718a 	movw	r1, #3978	; 0xf8a
 8008620:	4848      	ldr	r0, [pc, #288]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 8008622:	f7f9 fc50 	bl	8001ec6 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fc21 	bl	8008e74 <TIM_OC1_SetConfig>
      break;
 8008632:	e07e      	b.n	8008732 <HAL_TIM_OC_ConfigChannel+0x232>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a43      	ldr	r2, [pc, #268]	; (8008748 <HAL_TIM_OC_ConfigChannel+0x248>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d01d      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a42      	ldr	r2, [pc, #264]	; (800874c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d018      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008650:	d013      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a3e      	ldr	r2, [pc, #248]	; (8008750 <HAL_TIM_OC_ConfigChannel+0x250>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a3c      	ldr	r2, [pc, #240]	; (8008754 <HAL_TIM_OC_ConfigChannel+0x254>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a3b      	ldr	r2, [pc, #236]	; (8008758 <HAL_TIM_OC_ConfigChannel+0x258>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIM_OC_ConfigChannel+0x17a>
 8008670:	f640 7194 	movw	r1, #3988	; 0xf94
 8008674:	4833      	ldr	r0, [pc, #204]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 8008676:	f7f9 fc26 	bl	8001ec6 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fc91 	bl	8008fa8 <TIM_OC2_SetConfig>
      break;
 8008686:	e054      	b.n	8008732 <HAL_TIM_OC_ConfigChannel+0x232>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <HAL_TIM_OC_ConfigChannel+0x248>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01d      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a2d      	ldr	r2, [pc, #180]	; (800874c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d018      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a4:	d013      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a29      	ldr	r2, [pc, #164]	; (8008750 <HAL_TIM_OC_ConfigChannel+0x250>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00e      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a27      	ldr	r2, [pc, #156]	; (8008754 <HAL_TIM_OC_ConfigChannel+0x254>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a26      	ldr	r2, [pc, #152]	; (8008758 <HAL_TIM_OC_ConfigChannel+0x258>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d004      	beq.n	80086ce <HAL_TIM_OC_ConfigChannel+0x1ce>
 80086c4:	f640 719e 	movw	r1, #3998	; 0xf9e
 80086c8:	481e      	ldr	r0, [pc, #120]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 80086ca:	f7f9 fbfc 	bl	8001ec6 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fd05 	bl	80090e4 <TIM_OC3_SetConfig>
      break;
 80086da:	e02a      	b.n	8008732 <HAL_TIM_OC_ConfigChannel+0x232>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a19      	ldr	r2, [pc, #100]	; (8008748 <HAL_TIM_OC_ConfigChannel+0x248>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01d      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a18      	ldr	r2, [pc, #96]	; (800874c <HAL_TIM_OC_ConfigChannel+0x24c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d018      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f8:	d013      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a14      	ldr	r2, [pc, #80]	; (8008750 <HAL_TIM_OC_ConfigChannel+0x250>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00e      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a12      	ldr	r2, [pc, #72]	; (8008754 <HAL_TIM_OC_ConfigChannel+0x254>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d009      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a11      	ldr	r2, [pc, #68]	; (8008758 <HAL_TIM_OC_ConfigChannel+0x258>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_TIM_OC_ConfigChannel+0x222>
 8008718:	f640 71a8 	movw	r1, #4008	; 0xfa8
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <HAL_TIM_OC_ConfigChannel+0x244>)
 800871e:	f7f9 fbd2 	bl	8001ec6 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fd79 	bl	8009220 <TIM_OC4_SetConfig>
      break;
 800872e:	e000      	b.n	8008732 <HAL_TIM_OC_ConfigChannel+0x232>
    }

    default:
      break;
 8008730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	08012a04 	.word	0x08012a04
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40013400 	.word	0x40013400
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00

0800875c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_TIM_ConfigClockSource+0x18>
 8008770:	2302      	movs	r3, #2
 8008772:	e2f5      	b.n	8008d60 <HAL_TIM_ConfigClockSource+0x604>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878c:	d029      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008796:	d024      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d020      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d01c      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d018      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b30      	cmp	r3, #48	; 0x30
 80087b6:	d014      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d010      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b50      	cmp	r3, #80	; 0x50
 80087c6:	d00c      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b60      	cmp	r3, #96	; 0x60
 80087ce:	d008      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b70      	cmp	r3, #112	; 0x70
 80087d6:	d004      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x86>
 80087d8:	f241 4132 	movw	r1, #5170	; 0x1432
 80087dc:	487c      	ldr	r0, [pc, #496]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 80087de:	f7f9 fb72 	bl	8001ec6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800880a:	f000 80f1 	beq.w	80089f0 <HAL_TIM_ConfigClockSource+0x294>
 800880e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008812:	f200 8299 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d02d      	beq.n	8008878 <HAL_TIM_ConfigClockSource+0x11c>
 800881c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008820:	f200 8292 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 8008824:	2b70      	cmp	r3, #112	; 0x70
 8008826:	d05d      	beq.n	80088e4 <HAL_TIM_ConfigClockSource+0x188>
 8008828:	2b70      	cmp	r3, #112	; 0x70
 800882a:	f200 828d 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 800882e:	2b60      	cmp	r3, #96	; 0x60
 8008830:	f000 81a5 	beq.w	8008b7e <HAL_TIM_ConfigClockSource+0x422>
 8008834:	2b60      	cmp	r3, #96	; 0x60
 8008836:	f200 8287 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 800883a:	2b50      	cmp	r3, #80	; 0x50
 800883c:	f000 8149 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x376>
 8008840:	2b50      	cmp	r3, #80	; 0x50
 8008842:	f200 8281 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 8008846:	2b40      	cmp	r3, #64	; 0x40
 8008848:	f000 81fc 	beq.w	8008c44 <HAL_TIM_ConfigClockSource+0x4e8>
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	f200 827b 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 8008852:	2b30      	cmp	r3, #48	; 0x30
 8008854:	f000 824c 	beq.w	8008cf0 <HAL_TIM_ConfigClockSource+0x594>
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	f200 8275 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 800885e:	2b20      	cmp	r3, #32
 8008860:	f000 8246 	beq.w	8008cf0 <HAL_TIM_ConfigClockSource+0x594>
 8008864:	2b20      	cmp	r3, #32
 8008866:	f200 826f 	bhi.w	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8240 	beq.w	8008cf0 <HAL_TIM_ConfigClockSource+0x594>
 8008870:	2b10      	cmp	r3, #16
 8008872:	f000 823d 	beq.w	8008cf0 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008876:	e267      	b.n	8008d48 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a55      	ldr	r2, [pc, #340]	; (80089d4 <HAL_TIM_ConfigClockSource+0x278>)
 800887e:	4293      	cmp	r3, r2
 8008880:	f000 8264 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a53      	ldr	r2, [pc, #332]	; (80089d8 <HAL_TIM_ConfigClockSource+0x27c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	f000 825e 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	f000 8258 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a4e      	ldr	r2, [pc, #312]	; (80089dc <HAL_TIM_ConfigClockSource+0x280>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	f000 8252 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a4c      	ldr	r2, [pc, #304]	; (80089e0 <HAL_TIM_ConfigClockSource+0x284>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	f000 824c 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a4a      	ldr	r2, [pc, #296]	; (80089e4 <HAL_TIM_ConfigClockSource+0x288>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	f000 8246 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a48      	ldr	r2, [pc, #288]	; (80089e8 <HAL_TIM_ConfigClockSource+0x28c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	f000 8240 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a46      	ldr	r2, [pc, #280]	; (80089ec <HAL_TIM_ConfigClockSource+0x290>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	f000 823a 	beq.w	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
 80088d8:	f241 413e 	movw	r1, #5182	; 0x143e
 80088dc:	483c      	ldr	r0, [pc, #240]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 80088de:	f7f9 faf2 	bl	8001ec6 <assert_failed>
      break;
 80088e2:	e233      	b.n	8008d4c <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a3a      	ldr	r2, [pc, #232]	; (80089d4 <HAL_TIM_ConfigClockSource+0x278>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01d      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a39      	ldr	r2, [pc, #228]	; (80089d8 <HAL_TIM_ConfigClockSource+0x27c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008900:	d013      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a35      	ldr	r2, [pc, #212]	; (80089dc <HAL_TIM_ConfigClockSource+0x280>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a33      	ldr	r2, [pc, #204]	; (80089e0 <HAL_TIM_ConfigClockSource+0x284>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a32      	ldr	r2, [pc, #200]	; (80089e4 <HAL_TIM_ConfigClockSource+0x288>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_TIM_ConfigClockSource+0x1ce>
 8008920:	f241 4145 	movw	r1, #5189	; 0x1445
 8008924:	482a      	ldr	r0, [pc, #168]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 8008926:	f7f9 face 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d013      	beq.n	800895a <HAL_TIM_ConfigClockSource+0x1fe>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893a:	d00e      	beq.n	800895a <HAL_TIM_ConfigClockSource+0x1fe>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008944:	d009      	beq.n	800895a <HAL_TIM_ConfigClockSource+0x1fe>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800894e:	d004      	beq.n	800895a <HAL_TIM_ConfigClockSource+0x1fe>
 8008950:	f241 4148 	movw	r1, #5192	; 0x1448
 8008954:	481e      	ldr	r0, [pc, #120]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 8008956:	f7f9 fab6 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008962:	d014      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x232>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d010      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x232>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00c      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x232>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d008      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x232>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b0a      	cmp	r3, #10
 8008982:	d004      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x232>
 8008984:	f241 4149 	movw	r1, #5193	; 0x1449
 8008988:	4811      	ldr	r0, [pc, #68]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 800898a:	f7f9 fa9c 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b0f      	cmp	r3, #15
 8008994:	d904      	bls.n	80089a0 <HAL_TIM_ConfigClockSource+0x244>
 8008996:	f241 414a 	movw	r1, #5194	; 0x144a
 800899a:	480d      	ldr	r0, [pc, #52]	; (80089d0 <HAL_TIM_ConfigClockSource+0x274>)
 800899c:	f7f9 fa93 	bl	8001ec6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	6899      	ldr	r1, [r3, #8]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f000 fd11 	bl	80093d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	609a      	str	r2, [r3, #8]
      break;
 80089cc:	e1bf      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
 80089ce:	bf00      	nop
 80089d0:	08012a04 	.word	0x08012a04
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40013400 	.word	0x40013400
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40001000 	.word	0x40001000
 80089ec:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a8d      	ldr	r2, [pc, #564]	; (8008c2c <HAL_TIM_ConfigClockSource+0x4d0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d01d      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a8c      	ldr	r2, [pc, #560]	; (8008c30 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d018      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0c:	d013      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a88      	ldr	r2, [pc, #544]	; (8008c34 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00e      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a86      	ldr	r2, [pc, #536]	; (8008c38 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d009      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a85      	ldr	r2, [pc, #532]	; (8008c3c <HAL_TIM_ConfigClockSource+0x4e0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d004      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x2da>
 8008a2c:	f241 415d 	movw	r1, #5213	; 0x145d
 8008a30:	4883      	ldr	r0, [pc, #524]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008a32:	f7f9 fa48 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d013      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x30a>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d00e      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x30a>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a50:	d009      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x30a>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a5a:	d004      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x30a>
 8008a5c:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8008a60:	4877      	ldr	r0, [pc, #476]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008a62:	f7f9 fa30 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a6e:	d014      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x33e>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x33e>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00c      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x33e>
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d008      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x33e>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b0a      	cmp	r3, #10
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x33e>
 8008a90:	f241 4161 	movw	r1, #5217	; 0x1461
 8008a94:	486a      	ldr	r0, [pc, #424]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008a96:	f7f9 fa16 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b0f      	cmp	r3, #15
 8008aa0:	d904      	bls.n	8008aac <HAL_TIM_ConfigClockSource+0x350>
 8008aa2:	f241 4162 	movw	r1, #5218	; 0x1462
 8008aa6:	4866      	ldr	r0, [pc, #408]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008aa8:	f7f9 fa0d 	bl	8001ec6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6899      	ldr	r1, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f000 fc8b 	bl	80093d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ace:	609a      	str	r2, [r3, #8]
      break;
 8008ad0:	e13d      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a55      	ldr	r2, [pc, #340]	; (8008c2c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d01d      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a53      	ldr	r2, [pc, #332]	; (8008c30 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aee:	d013      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a4f      	ldr	r2, [pc, #316]	; (8008c34 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a4e      	ldr	r2, [pc, #312]	; (8008c38 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a4c      	ldr	r2, [pc, #304]	; (8008c3c <HAL_TIM_ConfigClockSource+0x4e0>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_TIM_ConfigClockSource+0x3bc>
 8008b0e:	f241 4171 	movw	r1, #5233	; 0x1471
 8008b12:	484b      	ldr	r0, [pc, #300]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008b14:	f7f9 f9d7 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b20:	d014      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x3f0>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d010      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x3f0>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x3f0>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d008      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x3f0>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b0a      	cmp	r3, #10
 8008b40:	d004      	beq.n	8008b4c <HAL_TIM_ConfigClockSource+0x3f0>
 8008b42:	f241 4174 	movw	r1, #5236	; 0x1474
 8008b46:	483e      	ldr	r0, [pc, #248]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008b48:	f7f9 f9bd 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b0f      	cmp	r3, #15
 8008b52:	d904      	bls.n	8008b5e <HAL_TIM_ConfigClockSource+0x402>
 8008b54:	f241 4175 	movw	r1, #5237	; 0x1475
 8008b58:	4839      	ldr	r0, [pc, #228]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008b5a:	f7f9 f9b4 	bl	8001ec6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6859      	ldr	r1, [r3, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f000 fbbc 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2150      	movs	r1, #80	; 0x50
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fc13 	bl	80093a2 <TIM_ITRx_SetConfig>
      break;
 8008b7c:	e0e7      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a2a      	ldr	r2, [pc, #168]	; (8008c2c <HAL_TIM_ConfigClockSource+0x4d0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d01d      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a28      	ldr	r2, [pc, #160]	; (8008c30 <HAL_TIM_ConfigClockSource+0x4d4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9a:	d013      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a24      	ldr	r2, [pc, #144]	; (8008c34 <HAL_TIM_ConfigClockSource+0x4d8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a23      	ldr	r2, [pc, #140]	; (8008c38 <HAL_TIM_ConfigClockSource+0x4dc>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <HAL_TIM_ConfigClockSource+0x4e0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0x468>
 8008bba:	f241 4181 	movw	r1, #5249	; 0x1481
 8008bbe:	4820      	ldr	r0, [pc, #128]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008bc0:	f7f9 f981 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bcc:	d014      	beq.n	8008bf8 <HAL_TIM_ConfigClockSource+0x49c>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d010      	beq.n	8008bf8 <HAL_TIM_ConfigClockSource+0x49c>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00c      	beq.n	8008bf8 <HAL_TIM_ConfigClockSource+0x49c>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d008      	beq.n	8008bf8 <HAL_TIM_ConfigClockSource+0x49c>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b0a      	cmp	r3, #10
 8008bec:	d004      	beq.n	8008bf8 <HAL_TIM_ConfigClockSource+0x49c>
 8008bee:	f241 4184 	movw	r1, #5252	; 0x1484
 8008bf2:	4813      	ldr	r0, [pc, #76]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008bf4:	f7f9 f967 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b0f      	cmp	r3, #15
 8008bfe:	d904      	bls.n	8008c0a <HAL_TIM_ConfigClockSource+0x4ae>
 8008c00:	f241 4185 	movw	r1, #5253	; 0x1485
 8008c04:	480e      	ldr	r0, [pc, #56]	; (8008c40 <HAL_TIM_ConfigClockSource+0x4e4>)
 8008c06:	f7f9 f95e 	bl	8001ec6 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f000 fb94 	bl	8009344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2160      	movs	r1, #96	; 0x60
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fbbd 	bl	80093a2 <TIM_ITRx_SetConfig>
      break;
 8008c28:	e091      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
 8008c2a:	bf00      	nop
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40013400 	.word	0x40013400
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	08012a04 	.word	0x08012a04
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a47      	ldr	r2, [pc, #284]	; (8008d68 <HAL_TIM_ConfigClockSource+0x60c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01d      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a46      	ldr	r2, [pc, #280]	; (8008d6c <HAL_TIM_ConfigClockSource+0x610>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d018      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c60:	d013      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a42      	ldr	r2, [pc, #264]	; (8008d70 <HAL_TIM_ConfigClockSource+0x614>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00e      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a40      	ldr	r2, [pc, #256]	; (8008d74 <HAL_TIM_ConfigClockSource+0x618>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d009      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a3f      	ldr	r2, [pc, #252]	; (8008d78 <HAL_TIM_ConfigClockSource+0x61c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d004      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x52e>
 8008c80:	f241 4191 	movw	r1, #5265	; 0x1491
 8008c84:	483d      	ldr	r0, [pc, #244]	; (8008d7c <HAL_TIM_ConfigClockSource+0x620>)
 8008c86:	f7f9 f91e 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c92:	d014      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0x562>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0x562>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0x562>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d008      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0x562>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b0a      	cmp	r3, #10
 8008cb2:	d004      	beq.n	8008cbe <HAL_TIM_ConfigClockSource+0x562>
 8008cb4:	f241 4194 	movw	r1, #5268	; 0x1494
 8008cb8:	4830      	ldr	r0, [pc, #192]	; (8008d7c <HAL_TIM_ConfigClockSource+0x620>)
 8008cba:	f7f9 f904 	bl	8001ec6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	2b0f      	cmp	r3, #15
 8008cc4:	d904      	bls.n	8008cd0 <HAL_TIM_ConfigClockSource+0x574>
 8008cc6:	f241 4195 	movw	r1, #5269	; 0x1495
 8008cca:	482c      	ldr	r0, [pc, #176]	; (8008d7c <HAL_TIM_ConfigClockSource+0x620>)
 8008ccc:	f7f9 f8fb 	bl	8001ec6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6859      	ldr	r1, [r3, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f000 fb03 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2140      	movs	r1, #64	; 0x40
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fb5a 	bl	80093a2 <TIM_ITRx_SetConfig>
      break;
 8008cee:	e02e      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <HAL_TIM_ConfigClockSource+0x60c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01d      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_TIM_ConfigClockSource+0x610>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d018      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0c:	d013      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <HAL_TIM_ConfigClockSource+0x614>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00e      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	; (8008d74 <HAL_TIM_ConfigClockSource+0x618>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d009      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a14      	ldr	r2, [pc, #80]	; (8008d78 <HAL_TIM_ConfigClockSource+0x61c>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d004      	beq.n	8008d36 <HAL_TIM_ConfigClockSource+0x5da>
 8008d2c:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8008d30:	4812      	ldr	r0, [pc, #72]	; (8008d7c <HAL_TIM_ConfigClockSource+0x620>)
 8008d32:	f7f9 f8c8 	bl	8001ec6 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f000 fb2e 	bl	80093a2 <TIM_ITRx_SetConfig>
        break;
 8008d46:	e002      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e000      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8008d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40012c00 	.word	0x40012c00
 8008d6c:	40013400 	.word	0x40013400
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	08012a04 	.word	0x08012a04

08008d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a33      	ldr	r2, [pc, #204]	; (8008e60 <TIM_Base_SetConfig+0xe0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <TIM_Base_SetConfig+0x40>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a32      	ldr	r2, [pc, #200]	; (8008e64 <TIM_Base_SetConfig+0xe4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00f      	beq.n	8008dc0 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d00b      	beq.n	8008dc0 <TIM_Base_SetConfig+0x40>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a2f      	ldr	r2, [pc, #188]	; (8008e68 <TIM_Base_SetConfig+0xe8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d007      	beq.n	8008dc0 <TIM_Base_SetConfig+0x40>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a2e      	ldr	r2, [pc, #184]	; (8008e6c <TIM_Base_SetConfig+0xec>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_Base_SetConfig+0x40>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a2d      	ldr	r2, [pc, #180]	; (8008e70 <TIM_Base_SetConfig+0xf0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d108      	bne.n	8008dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a22      	ldr	r2, [pc, #136]	; (8008e60 <TIM_Base_SetConfig+0xe0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d013      	beq.n	8008e02 <TIM_Base_SetConfig+0x82>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a21      	ldr	r2, [pc, #132]	; (8008e64 <TIM_Base_SetConfig+0xe4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00f      	beq.n	8008e02 <TIM_Base_SetConfig+0x82>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de8:	d00b      	beq.n	8008e02 <TIM_Base_SetConfig+0x82>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <TIM_Base_SetConfig+0xe8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d007      	beq.n	8008e02 <TIM_Base_SetConfig+0x82>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <TIM_Base_SetConfig+0xec>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d003      	beq.n	8008e02 <TIM_Base_SetConfig+0x82>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a1c      	ldr	r2, [pc, #112]	; (8008e70 <TIM_Base_SetConfig+0xf0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d108      	bne.n	8008e14 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <TIM_Base_SetConfig+0xe0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <TIM_Base_SetConfig+0xc8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <TIM_Base_SetConfig+0xe4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d103      	bne.n	8008e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	615a      	str	r2, [r3, #20]
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	40013400 	.word	0x40013400
 8008e68:	40000400 	.word	0x40000400
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40000c00 	.word	0x40000c00

08008e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f023 0201 	bic.w	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f023 0302 	bic.w	r3, r3, #2
 8008ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a34      	ldr	r2, [pc, #208]	; (8008f9c <TIM_OC1_SetConfig+0x128>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d003      	beq.n	8008ed8 <TIM_OC1_SetConfig+0x64>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a33      	ldr	r2, [pc, #204]	; (8008fa0 <TIM_OC1_SetConfig+0x12c>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d119      	bne.n	8008f0c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <TIM_OC1_SetConfig+0x7e>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d004      	beq.n	8008ef2 <TIM_OC1_SetConfig+0x7e>
 8008ee8:	f641 2141 	movw	r1, #6721	; 0x1a41
 8008eec:	482d      	ldr	r0, [pc, #180]	; (8008fa4 <TIM_OC1_SetConfig+0x130>)
 8008eee:	f7f8 ffea 	bl	8001ec6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f023 0308 	bic.w	r3, r3, #8
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f023 0304 	bic.w	r3, r3, #4
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a23      	ldr	r2, [pc, #140]	; (8008f9c <TIM_OC1_SetConfig+0x128>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d003      	beq.n	8008f1c <TIM_OC1_SetConfig+0xa8>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a22      	ldr	r2, [pc, #136]	; (8008fa0 <TIM_OC1_SetConfig+0x12c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d12d      	bne.n	8008f78 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f24:	d008      	beq.n	8008f38 <TIM_OC1_SetConfig+0xc4>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <TIM_OC1_SetConfig+0xc4>
 8008f2e:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8008f32:	481c      	ldr	r0, [pc, #112]	; (8008fa4 <TIM_OC1_SetConfig+0x130>)
 8008f34:	f7f8 ffc7 	bl	8001ec6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f40:	d008      	beq.n	8008f54 <TIM_OC1_SetConfig+0xe0>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <TIM_OC1_SetConfig+0xe0>
 8008f4a:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8008f4e:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <TIM_OC1_SetConfig+0x130>)
 8008f50:	f7f8 ffb9 	bl	8001ec6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40012c00 	.word	0x40012c00
 8008fa0:	40013400 	.word	0x40013400
 8008fa4:	08012a04 	.word	0x08012a04

08008fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0210 	bic.w	r2, r3, #16
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f023 0320 	bic.w	r3, r3, #32
 8008ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	011b      	lsls	r3, r3, #4
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a35      	ldr	r2, [pc, #212]	; (80090d8 <TIM_OC2_SetConfig+0x130>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_OC2_SetConfig+0x68>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a34      	ldr	r2, [pc, #208]	; (80090dc <TIM_OC2_SetConfig+0x134>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d11a      	bne.n	8009046 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <TIM_OC2_SetConfig+0x82>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b08      	cmp	r3, #8
 800901e:	d004      	beq.n	800902a <TIM_OC2_SetConfig+0x82>
 8009020:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8009024:	482e      	ldr	r0, [pc, #184]	; (80090e0 <TIM_OC2_SetConfig+0x138>)
 8009026:	f7f8 ff4e 	bl	8001ec6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009044:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a23      	ldr	r2, [pc, #140]	; (80090d8 <TIM_OC2_SetConfig+0x130>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d003      	beq.n	8009056 <TIM_OC2_SetConfig+0xae>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a22      	ldr	r2, [pc, #136]	; (80090dc <TIM_OC2_SetConfig+0x134>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d12f      	bne.n	80090b6 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905e:	d008      	beq.n	8009072 <TIM_OC2_SetConfig+0xca>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <TIM_OC2_SetConfig+0xca>
 8009068:	f641 219a 	movw	r1, #6810	; 0x1a9a
 800906c:	481c      	ldr	r0, [pc, #112]	; (80090e0 <TIM_OC2_SetConfig+0x138>)
 800906e:	f7f8 ff2a 	bl	8001ec6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907a:	d008      	beq.n	800908e <TIM_OC2_SetConfig+0xe6>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <TIM_OC2_SetConfig+0xe6>
 8009084:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8009088:	4815      	ldr	r0, [pc, #84]	; (80090e0 <TIM_OC2_SetConfig+0x138>)
 800908a:	f7f8 ff1c 	bl	8001ec6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800909c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	621a      	str	r2, [r3, #32]
}
 80090d0:	bf00      	nop
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	40013400 	.word	0x40013400
 80090e0:	08012a04 	.word	0x08012a04

080090e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800912c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a35      	ldr	r2, [pc, #212]	; (8009214 <TIM_OC3_SetConfig+0x130>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_OC3_SetConfig+0x66>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a34      	ldr	r2, [pc, #208]	; (8009218 <TIM_OC3_SetConfig+0x134>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d11a      	bne.n	8009180 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <TIM_OC3_SetConfig+0x80>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b08      	cmp	r3, #8
 8009158:	d004      	beq.n	8009164 <TIM_OC3_SetConfig+0x80>
 800915a:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800915e:	482f      	ldr	r0, [pc, #188]	; (800921c <TIM_OC3_SetConfig+0x138>)
 8009160:	f7f8 feb1 	bl	8001ec6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800917e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a24      	ldr	r2, [pc, #144]	; (8009214 <TIM_OC3_SetConfig+0x130>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d003      	beq.n	8009190 <TIM_OC3_SetConfig+0xac>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a23      	ldr	r2, [pc, #140]	; (8009218 <TIM_OC3_SetConfig+0x134>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d12f      	bne.n	80091f0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009198:	d008      	beq.n	80091ac <TIM_OC3_SetConfig+0xc8>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <TIM_OC3_SetConfig+0xc8>
 80091a2:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80091a6:	481d      	ldr	r0, [pc, #116]	; (800921c <TIM_OC3_SetConfig+0x138>)
 80091a8:	f7f8 fe8d 	bl	8001ec6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b4:	d008      	beq.n	80091c8 <TIM_OC3_SetConfig+0xe4>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <TIM_OC3_SetConfig+0xe4>
 80091be:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80091c2:	4816      	ldr	r0, [pc, #88]	; (800921c <TIM_OC3_SetConfig+0x138>)
 80091c4:	f7f8 fe7f 	bl	8001ec6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40013400 	.word	0x40013400
 800921c:	08012a04 	.word	0x08012a04

08009220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800926a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	031b      	lsls	r3, r3, #12
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	; (80092dc <TIM_OC4_SetConfig+0xbc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_OC4_SetConfig+0x68>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <TIM_OC4_SetConfig+0xc0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d117      	bne.n	80092b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009290:	d008      	beq.n	80092a4 <TIM_OC4_SetConfig+0x84>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <TIM_OC4_SetConfig+0x84>
 800929a:	f641 3123 	movw	r1, #6947	; 0x1b23
 800929e:	4811      	ldr	r0, [pc, #68]	; (80092e4 <TIM_OC4_SetConfig+0xc4>)
 80092a0:	f7f8 fe11 	bl	8001ec6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	019b      	lsls	r3, r3, #6
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	08012a04 	.word	0x08012a04

080092e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f023 0201 	bic.w	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 030a 	bic.w	r3, r3, #10
 8009324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	621a      	str	r2, [r3, #32]
}
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f023 0210 	bic.w	r2, r3, #16
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800936e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	031b      	lsls	r3, r3, #12
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	621a      	str	r2, [r3, #32]
}
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	f043 0307 	orr.w	r3, r3, #7
 80093c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	609a      	str	r2, [r3, #8]
}
 80093cc:	bf00      	nop
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	021a      	lsls	r2, r3, #8
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	609a      	str	r2, [r3, #8]
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a5c      	ldr	r2, [pc, #368]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d027      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5a      	ldr	r2, [pc, #360]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d022      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d01d      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a56      	ldr	r2, [pc, #344]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d018      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a55      	ldr	r2, [pc, #340]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a53      	ldr	r2, [pc, #332]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00e      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a52      	ldr	r2, [pc, #328]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d009      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a50      	ldr	r2, [pc, #320]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800946e:	f240 7186 	movw	r1, #1926	; 0x786
 8009472:	484f      	ldr	r0, [pc, #316]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8009474:	f7f8 fd27 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d020      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b10      	cmp	r3, #16
 8009486:	d01c      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b20      	cmp	r3, #32
 800948e:	d018      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b30      	cmp	r3, #48	; 0x30
 8009496:	d014      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d010      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b50      	cmp	r3, #80	; 0x50
 80094a6:	d00c      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b60      	cmp	r3, #96	; 0x60
 80094ae:	d008      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b70      	cmp	r3, #112	; 0x70
 80094b6:	d004      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80094b8:	f240 7187 	movw	r1, #1927	; 0x787
 80094bc:	483c      	ldr	r0, [pc, #240]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80094be:	f7f8 fd02 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b80      	cmp	r3, #128	; 0x80
 80094c8:	d008      	beq.n	80094dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094d2:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80094d6:	4836      	ldr	r0, [pc, #216]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80094d8:	f7f8 fcf5 	bl	8001ec6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e050      	b.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2202      	movs	r2, #2
 80094f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1a      	ldr	r2, [pc, #104]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d018      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a19      	ldr	r2, [pc, #100]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d013      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009540:	d00e      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a15      	ldr	r2, [pc, #84]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d009      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a12      	ldr	r2, [pc, #72]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10c      	bne.n	800957a <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40012c00 	.word	0x40012c00
 8009598:	40013400 	.word	0x40013400
 800959c:	40000400 	.word	0x40000400
 80095a0:	40000800 	.word	0x40000800
 80095a4:	40000c00 	.word	0x40000c00
 80095a8:	40001000 	.word	0x40001000
 80095ac:	40001400 	.word	0x40001400
 80095b0:	08012a3c 	.word	0x08012a3c

080095b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a5e      	ldr	r2, [pc, #376]	; (8009740 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a5c      	ldr	r2, [pc, #368]	; (8009744 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80095d6:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80095da:	485b      	ldr	r0, [pc, #364]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80095dc:	f7f8 fc73 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e8:	d008      	beq.n	80095fc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80095f2:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80095f6:	4854      	ldr	r0, [pc, #336]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80095f8:	f7f8 fc65 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009604:	d008      	beq.n	8009618 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800960e:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8009612:	484d      	ldr	r0, [pc, #308]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009614:	f7f8 fc57 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d013      	beq.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009628:	d00e      	beq.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009632:	d009      	beq.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800963c:	d004      	beq.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800963e:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8009642:	4841      	ldr	r0, [pc, #260]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009644:	f7f8 fc3f 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	2bff      	cmp	r3, #255	; 0xff
 800964e:	d904      	bls.n	800965a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009650:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8009654:	483c      	ldr	r0, [pc, #240]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009656:	f7f8 fc36 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009662:	d008      	beq.n	8009676 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800966c:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8009670:	4835      	ldr	r0, [pc, #212]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009672:	f7f8 fc28 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d009      	beq.n	8009692 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009686:	d004      	beq.n	8009692 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009688:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800968c:	482e      	ldr	r0, [pc, #184]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800968e:	f7f8 fc1a 	bl	8001ec6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800969a:	d008      	beq.n	80096ae <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80096a4:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80096a8:	4827      	ldr	r0, [pc, #156]	; (8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80096aa:	f7f8 fc0c 	bl	8001ec6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e03d      	b.n	8009738 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	40012c00 	.word	0x40012c00
 8009744:	40013400 	.word	0x40013400
 8009748:	08012a3c 	.word	0x08012a3c

0800974c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8009750:	2204      	movs	r2, #4
 8009752:	4909      	ldr	r1, [pc, #36]	; (8009778 <default_ip_assign+0x2c>)
 8009754:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009758:	f003 fe60 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 800975c:	2204      	movs	r2, #4
 800975e:	4907      	ldr	r1, [pc, #28]	; (800977c <default_ip_assign+0x30>)
 8009760:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009764:	f003 fe5a 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8009768:	2204      	movs	r2, #4
 800976a:	4905      	ldr	r1, [pc, #20]	; (8009780 <default_ip_assign+0x34>)
 800976c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009770:	f003 fe54 	bl	800d41c <WIZCHIP_WRITE_BUF>
}
 8009774:	bf00      	nop
 8009776:	bd80      	pop	{r7, pc}
 8009778:	200004dc 	.word	0x200004dc
 800977c:	200004e4 	.word	0x200004e4
 8009780:	200004e0 	.word	0x200004e0

08009784 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8009788:	2180      	movs	r1, #128	; 0x80
 800978a:	2000      	movs	r0, #0
 800978c:	f003 fd98 	bl	800d2c0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009790:	2000      	movs	r0, #0
 8009792:	f003 fd49 	bl	800d228 <WIZCHIP_READ>
   default_ip_assign();
 8009796:	f7ff ffd9 	bl	800974c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800979a:	2206      	movs	r2, #6
 800979c:	4903      	ldr	r1, [pc, #12]	; (80097ac <default_ip_update+0x28>)
 800979e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80097a2:	f003 fe3b 	bl	800d41c <WIZCHIP_WRITE_BUF>
}
 80097a6:	bf00      	nop
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200013c8 	.word	0x200013c8

080097b0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80097b4:	2180      	movs	r1, #128	; 0x80
 80097b6:	2000      	movs	r0, #0
 80097b8:	f003 fd82 	bl	800d2c0 <WIZCHIP_WRITE>
	getMR(); // for delay
 80097bc:	2000      	movs	r0, #0
 80097be:	f003 fd33 	bl	800d228 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80097c2:	2206      	movs	r2, #6
 80097c4:	4903      	ldr	r1, [pc, #12]	; (80097d4 <default_ip_conflict+0x24>)
 80097c6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80097ca:	f003 fe27 	bl	800d41c <WIZCHIP_WRITE_BUF>
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	200013c8 	.word	0x200013c8

080097d8 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <reg_dhcp_cbfunc+0x4c>)
 80097e6:	4a10      	ldr	r2, [pc, #64]	; (8009828 <reg_dhcp_cbfunc+0x50>)
 80097e8:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80097ea:	4b10      	ldr	r3, [pc, #64]	; (800982c <reg_dhcp_cbfunc+0x54>)
 80097ec:	4a10      	ldr	r2, [pc, #64]	; (8009830 <reg_dhcp_cbfunc+0x58>)
 80097ee:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80097f0:	4b10      	ldr	r3, [pc, #64]	; (8009834 <reg_dhcp_cbfunc+0x5c>)
 80097f2:	4a11      	ldr	r2, [pc, #68]	; (8009838 <reg_dhcp_cbfunc+0x60>)
 80097f4:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <reg_dhcp_cbfunc+0x2a>
 80097fc:	4a09      	ldr	r2, [pc, #36]	; (8009824 <reg_dhcp_cbfunc+0x4c>)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <reg_dhcp_cbfunc+0x36>
 8009808:	4a08      	ldr	r2, [pc, #32]	; (800982c <reg_dhcp_cbfunc+0x54>)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <reg_dhcp_cbfunc+0x42>
 8009814:	4a07      	ldr	r2, [pc, #28]	; (8009834 <reg_dhcp_cbfunc+0x5c>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6013      	str	r3, [r2, #0]
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	20000094 	.word	0x20000094
 8009828:	0800974d 	.word	0x0800974d
 800982c:	20000098 	.word	0x20000098
 8009830:	08009785 	.word	0x08009785
 8009834:	2000009c 	.word	0x2000009c
 8009838:	080097b1 	.word	0x080097b1

0800983c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8009842:	463b      	mov	r3, r7
 8009844:	2206      	movs	r2, #6
 8009846:	4619      	mov	r1, r3
 8009848:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800984c:	f003 fd86 	bl	800d35c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8009850:	4b72      	ldr	r3, [pc, #456]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2201      	movs	r2, #1
 8009856:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8009858:	4b70      	ldr	r3, [pc, #448]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2201      	movs	r2, #1
 800985e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8009860:	4b6e      	ldr	r3, [pc, #440]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2206      	movs	r2, #6
 8009866:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8009868:	4b6c      	ldr	r3, [pc, #432]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8009870:	4b6a      	ldr	r3, [pc, #424]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3304      	adds	r3, #4
 8009876:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8009878:	4b69      	ldr	r3, [pc, #420]	; (8009a20 <makeDHCPMSG+0x1e4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	0e1b      	lsrs	r3, r3, #24
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8009884:	4b66      	ldr	r3, [pc, #408]	; (8009a20 <makeDHCPMSG+0x1e4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	0c1a      	lsrs	r2, r3, #16
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3301      	adds	r3, #1
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8009892:	4b63      	ldr	r3, [pc, #396]	; (8009a20 <makeDHCPMSG+0x1e4>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	0a1a      	lsrs	r2, r3, #8
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	3302      	adds	r3, #2
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80098a0:	4b5f      	ldr	r3, [pc, #380]	; (8009a20 <makeDHCPMSG+0x1e4>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	3303      	adds	r3, #3
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80098ac:	4b5b      	ldr	r3, [pc, #364]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2200      	movs	r2, #0
 80098b2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80098b4:	4b59      	ldr	r3, [pc, #356]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330a      	adds	r3, #10
 80098ba:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2280      	movs	r2, #128	; 0x80
 80098c0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	3301      	adds	r3, #1
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80098ca:	4b54      	ldr	r3, [pc, #336]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80098d2:	4b52      	ldr	r3, [pc, #328]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80098da:	4b50      	ldr	r3, [pc, #320]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80098e2:	4b4e      	ldr	r3, [pc, #312]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80098ea:	4b4c      	ldr	r3, [pc, #304]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80098f2:	4b4a      	ldr	r3, [pc, #296]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2200      	movs	r2, #0
 80098f8:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80098fa:	4b48      	ldr	r3, [pc, #288]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8009902:	4b46      	ldr	r3, [pc, #280]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2200      	movs	r2, #0
 8009908:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800990a:	4b44      	ldr	r3, [pc, #272]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2200      	movs	r2, #0
 8009910:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8009912:	4b42      	ldr	r3, [pc, #264]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2200      	movs	r2, #0
 8009918:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800991a:	4b40      	ldr	r3, [pc, #256]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8009922:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800992a:	4b3c      	ldr	r3, [pc, #240]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8009932:	4b3a      	ldr	r3, [pc, #232]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800993a:	4b38      	ldr	r3, [pc, #224]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8009942:	4b36      	ldr	r3, [pc, #216]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2200      	movs	r2, #0
 8009948:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800994a:	4b34      	ldr	r3, [pc, #208]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a35      	ldr	r2, [pc, #212]	; (8009a24 <makeDHCPMSG+0x1e8>)
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8009954:	4b31      	ldr	r3, [pc, #196]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a32      	ldr	r2, [pc, #200]	; (8009a24 <makeDHCPMSG+0x1e8>)
 800995a:	7852      	ldrb	r2, [r2, #1]
 800995c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800995e:	4b2f      	ldr	r3, [pc, #188]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a30      	ldr	r2, [pc, #192]	; (8009a24 <makeDHCPMSG+0x1e8>)
 8009964:	7892      	ldrb	r2, [r2, #2]
 8009966:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8009968:	4b2c      	ldr	r3, [pc, #176]	; (8009a1c <makeDHCPMSG+0x1e0>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <makeDHCPMSG+0x1e8>)
 800996e:	78d2      	ldrb	r2, [r2, #3]
 8009970:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8009972:	4b2a      	ldr	r3, [pc, #168]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <makeDHCPMSG+0x1e8>)
 8009978:	7912      	ldrb	r2, [r2, #4]
 800997a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800997e:	4b27      	ldr	r3, [pc, #156]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a28      	ldr	r2, [pc, #160]	; (8009a24 <makeDHCPMSG+0x1e8>)
 8009984:	7952      	ldrb	r2, [r2, #5]
 8009986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800998a:	2306      	movs	r3, #6
 800998c:	73fb      	strb	r3, [r7, #15]
 800998e:	e008      	b.n	80099a2 <makeDHCPMSG+0x166>
 8009990:	4b22      	ldr	r3, [pc, #136]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4413      	add	r3, r2
 8009998:	2200      	movs	r2, #0
 800999a:	771a      	strb	r2, [r3, #28]
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	3301      	adds	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d9f3      	bls.n	8009990 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	e009      	b.n	80099c2 <makeDHCPMSG+0x186>
 80099ae:	4b1b      	ldr	r3, [pc, #108]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4413      	add	r3, r2
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	3301      	adds	r3, #1
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b3f      	cmp	r3, #63	; 0x3f
 80099c6:	d9f2      	bls.n	80099ae <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
 80099cc:	e009      	b.n	80099e2 <makeDHCPMSG+0x1a6>
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	4413      	add	r3, r2
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	3301      	adds	r3, #1
 80099e0:	73fb      	strb	r3, [r7, #15]
 80099e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	daf1      	bge.n	80099ce <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2263      	movs	r2, #99	; 0x63
 80099f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80099f4:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <makeDHCPMSG+0x1e0>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2282      	movs	r2, #130	; 0x82
 80099fa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80099fe:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2253      	movs	r2, #83	; 0x53
 8009a04:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <makeDHCPMSG+0x1e0>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2263      	movs	r2, #99	; 0x63
 8009a0e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200013dc 	.word	0x200013dc
 8009a20:	200013d0 	.word	0x200013d0
 8009a24:	200013c8 	.word	0x200013c8

08009a28 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8009a28:	b5b0      	push	{r4, r5, r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8009a32:	f7ff ff03 	bl	800983c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8009a36:	4b56      	ldr	r3, [pc, #344]	; (8009b90 <send_DHCP_DISCOVER+0x168>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8009a3c:	4b54      	ldr	r3, [pc, #336]	; (8009b90 <send_DHCP_DISCOVER+0x168>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8009a42:	4b53      	ldr	r3, [pc, #332]	; (8009b90 <send_DHCP_DISCOVER+0x168>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8009a48:	4b51      	ldr	r3, [pc, #324]	; (8009b90 <send_DHCP_DISCOVER+0x168>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8009a4e:	4b51      	ldr	r3, [pc, #324]	; (8009b94 <send_DHCP_DISCOVER+0x16c>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8009a54:	4b4f      	ldr	r3, [pc, #316]	; (8009b94 <send_DHCP_DISCOVER+0x16c>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8009a5a:	4b4e      	ldr	r3, [pc, #312]	; (8009b94 <send_DHCP_DISCOVER+0x16c>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8009a60:	4b4c      	ldr	r3, [pc, #304]	; (8009b94 <send_DHCP_DISCOVER+0x16c>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8009a66:	2304      	movs	r3, #4
 8009a68:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8009a6a:	4b4b      	ldr	r3, [pc, #300]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	88bb      	ldrh	r3, [r7, #4]
 8009a70:	1c59      	adds	r1, r3, #1
 8009a72:	80b9      	strh	r1, [r7, #4]
 8009a74:	4413      	add	r3, r2
 8009a76:	2235      	movs	r2, #53	; 0x35
 8009a78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009a7c:	4b46      	ldr	r3, [pc, #280]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	88bb      	ldrh	r3, [r7, #4]
 8009a82:	1c59      	adds	r1, r3, #1
 8009a84:	80b9      	strh	r1, [r7, #4]
 8009a86:	4413      	add	r3, r2
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8009a8e:	4b42      	ldr	r3, [pc, #264]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	88bb      	ldrh	r3, [r7, #4]
 8009a94:	1c59      	adds	r1, r3, #1
 8009a96:	80b9      	strh	r1, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8009aa0:	4b3d      	ldr	r3, [pc, #244]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	88bb      	ldrh	r3, [r7, #4]
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	80b9      	strh	r1, [r7, #4]
 8009aaa:	4413      	add	r3, r2
 8009aac:	223d      	movs	r2, #61	; 0x3d
 8009aae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8009ab2:	4b39      	ldr	r3, [pc, #228]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	88bb      	ldrh	r3, [r7, #4]
 8009ab8:	1c59      	adds	r1, r3, #1
 8009aba:	80b9      	strh	r1, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	2207      	movs	r2, #7
 8009ac0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009ac4:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	88bb      	ldrh	r3, [r7, #4]
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	80b9      	strh	r1, [r7, #4]
 8009ace:	4413      	add	r3, r2
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8009ad6:	4b30      	ldr	r3, [pc, #192]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	88bb      	ldrh	r3, [r7, #4]
 8009adc:	1c59      	adds	r1, r3, #1
 8009ade:	80b9      	strh	r1, [r7, #4]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	4b2e      	ldr	r3, [pc, #184]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009ae4:	7819      	ldrb	r1, [r3, #0]
 8009ae6:	1813      	adds	r3, r2, r0
 8009ae8:	460a      	mov	r2, r1
 8009aea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8009aee:	4b2a      	ldr	r3, [pc, #168]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	88bb      	ldrh	r3, [r7, #4]
 8009af4:	1c59      	adds	r1, r3, #1
 8009af6:	80b9      	strh	r1, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	4b28      	ldr	r3, [pc, #160]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009afc:	7859      	ldrb	r1, [r3, #1]
 8009afe:	1813      	adds	r3, r2, r0
 8009b00:	460a      	mov	r2, r1
 8009b02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8009b06:	4b24      	ldr	r3, [pc, #144]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	88bb      	ldrh	r3, [r7, #4]
 8009b0c:	1c59      	adds	r1, r3, #1
 8009b0e:	80b9      	strh	r1, [r7, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	4b22      	ldr	r3, [pc, #136]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009b14:	7899      	ldrb	r1, [r3, #2]
 8009b16:	1813      	adds	r3, r2, r0
 8009b18:	460a      	mov	r2, r1
 8009b1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8009b1e:	4b1e      	ldr	r3, [pc, #120]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	88bb      	ldrh	r3, [r7, #4]
 8009b24:	1c59      	adds	r1, r3, #1
 8009b26:	80b9      	strh	r1, [r7, #4]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	4b1c      	ldr	r3, [pc, #112]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009b2c:	78d9      	ldrb	r1, [r3, #3]
 8009b2e:	1813      	adds	r3, r2, r0
 8009b30:	460a      	mov	r2, r1
 8009b32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	88bb      	ldrh	r3, [r7, #4]
 8009b3c:	1c59      	adds	r1, r3, #1
 8009b3e:	80b9      	strh	r1, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009b44:	7919      	ldrb	r1, [r3, #4]
 8009b46:	1813      	adds	r3, r2, r0
 8009b48:	460a      	mov	r2, r1
 8009b4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	88bb      	ldrh	r3, [r7, #4]
 8009b54:	1c59      	adds	r1, r3, #1
 8009b56:	80b9      	strh	r1, [r7, #4]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <send_DHCP_DISCOVER+0x174>)
 8009b5c:	7959      	ldrb	r1, [r3, #5]
 8009b5e:	1813      	adds	r3, r2, r0
 8009b60:	460a      	mov	r2, r1
 8009b62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	88bb      	ldrh	r3, [r7, #4]
 8009b6c:	1c59      	adds	r1, r3, #1
 8009b6e:	80b9      	strh	r1, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	220c      	movs	r2, #12
 8009b74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <send_DHCP_DISCOVER+0x170>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	88bb      	ldrh	r3, [r7, #4]
 8009b7e:	1c59      	adds	r1, r3, #1
 8009b80:	80b9      	strh	r1, [r7, #4]
 8009b82:	4413      	add	r3, r2
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	80fb      	strh	r3, [r7, #6]
 8009b8e:	e017      	b.n	8009bc0 <send_DHCP_DISCOVER+0x198>
 8009b90:	200013d8 	.word	0x200013d8
 8009b94:	200013d4 	.word	0x200013d4
 8009b98:	200013dc 	.word	0x200013dc
 8009b9c:	200013c8 	.word	0x200013c8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8009ba0:	88f9      	ldrh	r1, [r7, #6]
 8009ba2:	4b80      	ldr	r3, [pc, #512]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	88bb      	ldrh	r3, [r7, #4]
 8009ba8:	1c58      	adds	r0, r3, #1
 8009baa:	80b8      	strh	r0, [r7, #4]
 8009bac:	4618      	mov	r0, r3
 8009bae:	4b7e      	ldr	r3, [pc, #504]	; (8009da8 <send_DHCP_DISCOVER+0x380>)
 8009bb0:	5c59      	ldrb	r1, [r3, r1]
 8009bb2:	1813      	adds	r3, r2, r0
 8009bb4:	460a      	mov	r2, r1
 8009bb6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	80fb      	strh	r3, [r7, #6]
 8009bc0:	88fb      	ldrh	r3, [r7, #6]
 8009bc2:	4a79      	ldr	r2, [pc, #484]	; (8009da8 <send_DHCP_DISCOVER+0x380>)
 8009bc4:	5cd3      	ldrb	r3, [r2, r3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1ea      	bne.n	8009ba0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8009bca:	4b78      	ldr	r3, [pc, #480]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009bcc:	78db      	ldrb	r3, [r3, #3]
 8009bce:	091b      	lsrs	r3, r3, #4
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	4b74      	ldr	r3, [pc, #464]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009bd4:	681c      	ldr	r4, [r3, #0]
 8009bd6:	88bb      	ldrh	r3, [r7, #4]
 8009bd8:	1c59      	adds	r1, r3, #1
 8009bda:	80b9      	strh	r1, [r7, #4]
 8009bdc:	461d      	mov	r5, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f001 f9d4 	bl	800af8c <NibbleToHex>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	1963      	adds	r3, r4, r5
 8009bea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8009bee:	4b6f      	ldr	r3, [pc, #444]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009bf0:	78da      	ldrb	r2, [r3, #3]
 8009bf2:	4b6c      	ldr	r3, [pc, #432]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009bf4:	681c      	ldr	r4, [r3, #0]
 8009bf6:	88bb      	ldrh	r3, [r7, #4]
 8009bf8:	1c59      	adds	r1, r3, #1
 8009bfa:	80b9      	strh	r1, [r7, #4]
 8009bfc:	461d      	mov	r5, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f001 f9c4 	bl	800af8c <NibbleToHex>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	1963      	adds	r3, r4, r5
 8009c0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8009c0e:	4b67      	ldr	r3, [pc, #412]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	091b      	lsrs	r3, r3, #4
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	4b63      	ldr	r3, [pc, #396]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009c18:	681c      	ldr	r4, [r3, #0]
 8009c1a:	88bb      	ldrh	r3, [r7, #4]
 8009c1c:	1c59      	adds	r1, r3, #1
 8009c1e:	80b9      	strh	r1, [r7, #4]
 8009c20:	461d      	mov	r5, r3
 8009c22:	4610      	mov	r0, r2
 8009c24:	f001 f9b2 	bl	800af8c <NibbleToHex>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	1963      	adds	r3, r4, r5
 8009c2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8009c32:	4b5e      	ldr	r3, [pc, #376]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009c34:	791a      	ldrb	r2, [r3, #4]
 8009c36:	4b5b      	ldr	r3, [pc, #364]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009c38:	681c      	ldr	r4, [r3, #0]
 8009c3a:	88bb      	ldrh	r3, [r7, #4]
 8009c3c:	1c59      	adds	r1, r3, #1
 8009c3e:	80b9      	strh	r1, [r7, #4]
 8009c40:	461d      	mov	r5, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f001 f9a2 	bl	800af8c <NibbleToHex>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	1963      	adds	r3, r4, r5
 8009c4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8009c52:	4b56      	ldr	r3, [pc, #344]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009c54:	795b      	ldrb	r3, [r3, #5]
 8009c56:	091b      	lsrs	r3, r3, #4
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	4b52      	ldr	r3, [pc, #328]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009c5c:	681c      	ldr	r4, [r3, #0]
 8009c5e:	88bb      	ldrh	r3, [r7, #4]
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	80b9      	strh	r1, [r7, #4]
 8009c64:	461d      	mov	r5, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f001 f990 	bl	800af8c <NibbleToHex>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	461a      	mov	r2, r3
 8009c70:	1963      	adds	r3, r4, r5
 8009c72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8009c76:	4b4d      	ldr	r3, [pc, #308]	; (8009dac <send_DHCP_DISCOVER+0x384>)
 8009c78:	795a      	ldrb	r2, [r3, #5]
 8009c7a:	4b4a      	ldr	r3, [pc, #296]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009c7c:	681c      	ldr	r4, [r3, #0]
 8009c7e:	88bb      	ldrh	r3, [r7, #4]
 8009c80:	1c59      	adds	r1, r3, #1
 8009c82:	80b9      	strh	r1, [r7, #4]
 8009c84:	461d      	mov	r5, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f001 f980 	bl	800af8c <NibbleToHex>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	1963      	adds	r3, r4, r5
 8009c92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	b2d9      	uxtb	r1, r3
 8009c9a:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	88b8      	ldrh	r0, [r7, #4]
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	3307      	adds	r3, #7
 8009ca4:	1ac3      	subs	r3, r0, r3
 8009ca6:	3106      	adds	r1, #6
 8009ca8:	b2c9      	uxtb	r1, r1
 8009caa:	4413      	add	r3, r2
 8009cac:	460a      	mov	r2, r1
 8009cae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8009cb2:	4b3c      	ldr	r3, [pc, #240]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	88bb      	ldrh	r3, [r7, #4]
 8009cb8:	1c59      	adds	r1, r3, #1
 8009cba:	80b9      	strh	r1, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	2237      	movs	r2, #55	; 0x37
 8009cc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8009cc4:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	88bb      	ldrh	r3, [r7, #4]
 8009cca:	1c59      	adds	r1, r3, #1
 8009ccc:	80b9      	strh	r1, [r7, #4]
 8009cce:	4413      	add	r3, r2
 8009cd0:	2206      	movs	r2, #6
 8009cd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8009cd6:	4b33      	ldr	r3, [pc, #204]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	1c59      	adds	r1, r3, #1
 8009cde:	80b9      	strh	r1, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8009ce8:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	88bb      	ldrh	r3, [r7, #4]
 8009cee:	1c59      	adds	r1, r3, #1
 8009cf0:	80b9      	strh	r1, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8009cfa:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	88bb      	ldrh	r3, [r7, #4]
 8009d00:	1c59      	adds	r1, r3, #1
 8009d02:	80b9      	strh	r1, [r7, #4]
 8009d04:	4413      	add	r3, r2
 8009d06:	2206      	movs	r2, #6
 8009d08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8009d0c:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	88bb      	ldrh	r3, [r7, #4]
 8009d12:	1c59      	adds	r1, r3, #1
 8009d14:	80b9      	strh	r1, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	220f      	movs	r2, #15
 8009d1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8009d1e:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	88bb      	ldrh	r3, [r7, #4]
 8009d24:	1c59      	adds	r1, r3, #1
 8009d26:	80b9      	strh	r1, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	223a      	movs	r2, #58	; 0x3a
 8009d2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8009d30:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	1c59      	adds	r1, r3, #1
 8009d38:	80b9      	strh	r1, [r7, #4]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	223b      	movs	r2, #59	; 0x3b
 8009d3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8009d42:	4b18      	ldr	r3, [pc, #96]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	88bb      	ldrh	r3, [r7, #4]
 8009d48:	1c59      	adds	r1, r3, #1
 8009d4a:	80b9      	strh	r1, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	22ff      	movs	r2, #255	; 0xff
 8009d50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8009d54:	88bb      	ldrh	r3, [r7, #4]
 8009d56:	80fb      	strh	r3, [r7, #6]
 8009d58:	e009      	b.n	8009d6e <send_DHCP_DISCOVER+0x346>
 8009d5a:	4b12      	ldr	r3, [pc, #72]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	88fb      	ldrh	r3, [r7, #6]
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8009d68:	88fb      	ldrh	r3, [r7, #6]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	80fb      	strh	r3, [r7, #6]
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8009d74:	d3f1      	bcc.n	8009d5a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8009d76:	23ff      	movs	r3, #255	; 0xff
 8009d78:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8009d7e:	23ff      	movs	r3, #255	; 0xff
 8009d80:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8009d82:	23ff      	movs	r3, #255	; 0xff
 8009d84:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8009d86:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <send_DHCP_DISCOVER+0x388>)
 8009d88:	7818      	ldrb	r0, [r3, #0]
 8009d8a:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <send_DHCP_DISCOVER+0x37c>)
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	463b      	mov	r3, r7
 8009d90:	2243      	movs	r2, #67	; 0x43
 8009d92:	9200      	str	r2, [sp, #0]
 8009d94:	f44f 7209 	mov.w	r2, #548	; 0x224
 8009d98:	f002 fdc4 	bl	800c924 <sendto>
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bdb0      	pop	{r4, r5, r7, pc}
 8009da4:	200013dc 	.word	0x200013dc
 8009da8:	2000008c 	.word	0x2000008c
 8009dac:	200013c8 	.word	0x200013c8
 8009db0:	200013e0 	.word	0x200013e0

08009db4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8009db4:	b5b0      	push	{r4, r5, r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8009dbe:	f7ff fd3d 	bl	800983c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8009dc2:	4b1b      	ldr	r3, [pc, #108]	; (8009e30 <send_DHCP_REQUEST+0x7c>)
 8009dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d004      	beq.n	8009dd6 <send_DHCP_REQUEST+0x22>
 8009dcc:	4b18      	ldr	r3, [pc, #96]	; (8009e30 <send_DHCP_REQUEST+0x7c>)
 8009dce:	f993 3000 	ldrsb.w	r3, [r3]
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d134      	bne.n	8009e40 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8009dd6:	4b17      	ldr	r3, [pc, #92]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330a      	adds	r3, #10
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8009de0:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330a      	adds	r3, #10
 8009de6:	3301      	adds	r3, #1
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8009dec:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a11      	ldr	r2, [pc, #68]	; (8009e38 <send_DHCP_REQUEST+0x84>)
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a0f      	ldr	r2, [pc, #60]	; (8009e38 <send_DHCP_REQUEST+0x84>)
 8009dfc:	7852      	ldrb	r2, [r2, #1]
 8009dfe:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a0c      	ldr	r2, [pc, #48]	; (8009e38 <send_DHCP_REQUEST+0x84>)
 8009e06:	7892      	ldrb	r2, [r2, #2]
 8009e08:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8009e0a:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <send_DHCP_REQUEST+0x80>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <send_DHCP_REQUEST+0x84>)
 8009e10:	78d2      	ldrb	r2, [r2, #3]
 8009e12:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8009e14:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <send_DHCP_REQUEST+0x88>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8009e1a:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <send_DHCP_REQUEST+0x88>)
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8009e20:	4b06      	ldr	r3, [pc, #24]	; (8009e3c <send_DHCP_REQUEST+0x88>)
 8009e22:	789b      	ldrb	r3, [r3, #2]
 8009e24:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8009e26:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <send_DHCP_REQUEST+0x88>)
 8009e28:	78db      	ldrb	r3, [r3, #3]
 8009e2a:	71fb      	strb	r3, [r7, #7]
 8009e2c:	e010      	b.n	8009e50 <send_DHCP_REQUEST+0x9c>
 8009e2e:	bf00      	nop
 8009e30:	200004ec 	.word	0x200004ec
 8009e34:	200013dc 	.word	0x200013dc
 8009e38:	200004dc 	.word	0x200004dc
 8009e3c:	200013d8 	.word	0x200013d8
   }
   else
   {
   	ip[0] = 255;
 8009e40:	23ff      	movs	r3, #255	; 0xff
 8009e42:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8009e44:	23ff      	movs	r3, #255	; 0xff
 8009e46:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8009e48:	23ff      	movs	r3, #255	; 0xff
 8009e4a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8009e4c:	23ff      	movs	r3, #255	; 0xff
 8009e4e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8009e50:	2304      	movs	r3, #4
 8009e52:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8009e54:	4b8d      	ldr	r3, [pc, #564]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	897b      	ldrh	r3, [r7, #10]
 8009e5a:	1c59      	adds	r1, r3, #1
 8009e5c:	8179      	strh	r1, [r7, #10]
 8009e5e:	4413      	add	r3, r2
 8009e60:	2235      	movs	r2, #53	; 0x35
 8009e62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009e66:	4b89      	ldr	r3, [pc, #548]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	897b      	ldrh	r3, [r7, #10]
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	8179      	strh	r1, [r7, #10]
 8009e70:	4413      	add	r3, r2
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8009e78:	4b84      	ldr	r3, [pc, #528]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	897b      	ldrh	r3, [r7, #10]
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	8179      	strh	r1, [r7, #10]
 8009e82:	4413      	add	r3, r2
 8009e84:	2203      	movs	r2, #3
 8009e86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8009e8a:	4b80      	ldr	r3, [pc, #512]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	897b      	ldrh	r3, [r7, #10]
 8009e90:	1c59      	adds	r1, r3, #1
 8009e92:	8179      	strh	r1, [r7, #10]
 8009e94:	4413      	add	r3, r2
 8009e96:	223d      	movs	r2, #61	; 0x3d
 8009e98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8009e9c:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	897b      	ldrh	r3, [r7, #10]
 8009ea2:	1c59      	adds	r1, r3, #1
 8009ea4:	8179      	strh	r1, [r7, #10]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	2207      	movs	r2, #7
 8009eaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009eae:	4b77      	ldr	r3, [pc, #476]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	897b      	ldrh	r3, [r7, #10]
 8009eb4:	1c59      	adds	r1, r3, #1
 8009eb6:	8179      	strh	r1, [r7, #10]
 8009eb8:	4413      	add	r3, r2
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8009ec0:	4b72      	ldr	r3, [pc, #456]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	897b      	ldrh	r3, [r7, #10]
 8009ec6:	1c59      	adds	r1, r3, #1
 8009ec8:	8179      	strh	r1, [r7, #10]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	4b70      	ldr	r3, [pc, #448]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009ece:	7819      	ldrb	r1, [r3, #0]
 8009ed0:	1813      	adds	r3, r2, r0
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8009ed8:	4b6c      	ldr	r3, [pc, #432]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	897b      	ldrh	r3, [r7, #10]
 8009ede:	1c59      	adds	r1, r3, #1
 8009ee0:	8179      	strh	r1, [r7, #10]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	4b6a      	ldr	r3, [pc, #424]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009ee6:	7859      	ldrb	r1, [r3, #1]
 8009ee8:	1813      	adds	r3, r2, r0
 8009eea:	460a      	mov	r2, r1
 8009eec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8009ef0:	4b66      	ldr	r3, [pc, #408]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	897b      	ldrh	r3, [r7, #10]
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	8179      	strh	r1, [r7, #10]
 8009efa:	4618      	mov	r0, r3
 8009efc:	4b64      	ldr	r3, [pc, #400]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009efe:	7899      	ldrb	r1, [r3, #2]
 8009f00:	1813      	adds	r3, r2, r0
 8009f02:	460a      	mov	r2, r1
 8009f04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8009f08:	4b60      	ldr	r3, [pc, #384]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	897b      	ldrh	r3, [r7, #10]
 8009f0e:	1c59      	adds	r1, r3, #1
 8009f10:	8179      	strh	r1, [r7, #10]
 8009f12:	4618      	mov	r0, r3
 8009f14:	4b5e      	ldr	r3, [pc, #376]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009f16:	78d9      	ldrb	r1, [r3, #3]
 8009f18:	1813      	adds	r3, r2, r0
 8009f1a:	460a      	mov	r2, r1
 8009f1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8009f20:	4b5a      	ldr	r3, [pc, #360]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	897b      	ldrh	r3, [r7, #10]
 8009f26:	1c59      	adds	r1, r3, #1
 8009f28:	8179      	strh	r1, [r7, #10]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	4b58      	ldr	r3, [pc, #352]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009f2e:	7919      	ldrb	r1, [r3, #4]
 8009f30:	1813      	adds	r3, r2, r0
 8009f32:	460a      	mov	r2, r1
 8009f34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8009f38:	4b54      	ldr	r3, [pc, #336]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	897b      	ldrh	r3, [r7, #10]
 8009f3e:	1c59      	adds	r1, r3, #1
 8009f40:	8179      	strh	r1, [r7, #10]
 8009f42:	4618      	mov	r0, r3
 8009f44:	4b52      	ldr	r3, [pc, #328]	; (800a090 <send_DHCP_REQUEST+0x2dc>)
 8009f46:	7959      	ldrb	r1, [r3, #5]
 8009f48:	1813      	adds	r3, r2, r0
 8009f4a:	460a      	mov	r2, r1
 8009f4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2bff      	cmp	r3, #255	; 0xff
 8009f54:	f040 8084 	bne.w	800a060 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8009f58:	4b4c      	ldr	r3, [pc, #304]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	897b      	ldrh	r3, [r7, #10]
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	8179      	strh	r1, [r7, #10]
 8009f62:	4413      	add	r3, r2
 8009f64:	2232      	movs	r2, #50	; 0x32
 8009f66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8009f6a:	4b48      	ldr	r3, [pc, #288]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	897b      	ldrh	r3, [r7, #10]
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	8179      	strh	r1, [r7, #10]
 8009f74:	4413      	add	r3, r2
 8009f76:	2204      	movs	r2, #4
 8009f78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8009f7c:	4b43      	ldr	r3, [pc, #268]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	897b      	ldrh	r3, [r7, #10]
 8009f82:	1c59      	adds	r1, r3, #1
 8009f84:	8179      	strh	r1, [r7, #10]
 8009f86:	4618      	mov	r0, r3
 8009f88:	4b42      	ldr	r3, [pc, #264]	; (800a094 <send_DHCP_REQUEST+0x2e0>)
 8009f8a:	7819      	ldrb	r1, [r3, #0]
 8009f8c:	1813      	adds	r3, r2, r0
 8009f8e:	460a      	mov	r2, r1
 8009f90:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8009f94:	4b3d      	ldr	r3, [pc, #244]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	897b      	ldrh	r3, [r7, #10]
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	8179      	strh	r1, [r7, #10]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	4b3c      	ldr	r3, [pc, #240]	; (800a094 <send_DHCP_REQUEST+0x2e0>)
 8009fa2:	7859      	ldrb	r1, [r3, #1]
 8009fa4:	1813      	adds	r3, r2, r0
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8009fac:	4b37      	ldr	r3, [pc, #220]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	897b      	ldrh	r3, [r7, #10]
 8009fb2:	1c59      	adds	r1, r3, #1
 8009fb4:	8179      	strh	r1, [r7, #10]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	4b36      	ldr	r3, [pc, #216]	; (800a094 <send_DHCP_REQUEST+0x2e0>)
 8009fba:	7899      	ldrb	r1, [r3, #2]
 8009fbc:	1813      	adds	r3, r2, r0
 8009fbe:	460a      	mov	r2, r1
 8009fc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8009fc4:	4b31      	ldr	r3, [pc, #196]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	897b      	ldrh	r3, [r7, #10]
 8009fca:	1c59      	adds	r1, r3, #1
 8009fcc:	8179      	strh	r1, [r7, #10]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <send_DHCP_REQUEST+0x2e0>)
 8009fd2:	78d9      	ldrb	r1, [r3, #3]
 8009fd4:	1813      	adds	r3, r2, r0
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8009fdc:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	897b      	ldrh	r3, [r7, #10]
 8009fe2:	1c59      	adds	r1, r3, #1
 8009fe4:	8179      	strh	r1, [r7, #10]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	2236      	movs	r2, #54	; 0x36
 8009fea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8009fee:	4b27      	ldr	r3, [pc, #156]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	897b      	ldrh	r3, [r7, #10]
 8009ff4:	1c59      	adds	r1, r3, #1
 8009ff6:	8179      	strh	r1, [r7, #10]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a000:	4b22      	ldr	r3, [pc, #136]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	897b      	ldrh	r3, [r7, #10]
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	8179      	strh	r1, [r7, #10]
 800a00a:	4618      	mov	r0, r3
 800a00c:	4b22      	ldr	r3, [pc, #136]	; (800a098 <send_DHCP_REQUEST+0x2e4>)
 800a00e:	7819      	ldrb	r1, [r3, #0]
 800a010:	1813      	adds	r3, r2, r0
 800a012:	460a      	mov	r2, r1
 800a014:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800a018:	4b1c      	ldr	r3, [pc, #112]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	897b      	ldrh	r3, [r7, #10]
 800a01e:	1c59      	adds	r1, r3, #1
 800a020:	8179      	strh	r1, [r7, #10]
 800a022:	4618      	mov	r0, r3
 800a024:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <send_DHCP_REQUEST+0x2e4>)
 800a026:	7859      	ldrb	r1, [r3, #1]
 800a028:	1813      	adds	r3, r2, r0
 800a02a:	460a      	mov	r2, r1
 800a02c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800a030:	4b16      	ldr	r3, [pc, #88]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	1c59      	adds	r1, r3, #1
 800a038:	8179      	strh	r1, [r7, #10]
 800a03a:	4618      	mov	r0, r3
 800a03c:	4b16      	ldr	r3, [pc, #88]	; (800a098 <send_DHCP_REQUEST+0x2e4>)
 800a03e:	7899      	ldrb	r1, [r3, #2]
 800a040:	1813      	adds	r3, r2, r0
 800a042:	460a      	mov	r2, r1
 800a044:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	897b      	ldrh	r3, [r7, #10]
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	8179      	strh	r1, [r7, #10]
 800a052:	4618      	mov	r0, r3
 800a054:	4b10      	ldr	r3, [pc, #64]	; (800a098 <send_DHCP_REQUEST+0x2e4>)
 800a056:	78d9      	ldrb	r1, [r3, #3]
 800a058:	1813      	adds	r3, r2, r0
 800a05a:	460a      	mov	r2, r1
 800a05c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	897b      	ldrh	r3, [r7, #10]
 800a066:	1c59      	adds	r1, r3, #1
 800a068:	8179      	strh	r1, [r7, #10]
 800a06a:	4413      	add	r3, r2
 800a06c:	220c      	movs	r2, #12
 800a06e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800a072:	4b06      	ldr	r3, [pc, #24]	; (800a08c <send_DHCP_REQUEST+0x2d8>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	897b      	ldrh	r3, [r7, #10]
 800a078:	1c59      	adds	r1, r3, #1
 800a07a:	8179      	strh	r1, [r7, #10]
 800a07c:	4413      	add	r3, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e019      	b.n	800a0be <send_DHCP_REQUEST+0x30a>
 800a08a:	bf00      	nop
 800a08c:	200013dc 	.word	0x200013dc
 800a090:	200013c8 	.word	0x200013c8
 800a094:	200004dc 	.word	0x200004dc
 800a098:	200013d8 	.word	0x200013d8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800a09c:	4b86      	ldr	r3, [pc, #536]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	897b      	ldrh	r3, [r7, #10]
 800a0a2:	1c59      	adds	r1, r3, #1
 800a0a4:	8179      	strh	r1, [r7, #10]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	4984      	ldr	r1, [pc, #528]	; (800a2bc <send_DHCP_REQUEST+0x508>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	7819      	ldrb	r1, [r3, #0]
 800a0b0:	1813      	adds	r3, r2, r0
 800a0b2:	460a      	mov	r2, r1
 800a0b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	4a7f      	ldr	r2, [pc, #508]	; (800a2bc <send_DHCP_REQUEST+0x508>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e8      	bne.n	800a09c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800a0ca:	4b7d      	ldr	r3, [pc, #500]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a0cc:	78db      	ldrb	r3, [r3, #3]
 800a0ce:	091b      	lsrs	r3, r3, #4
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	4b79      	ldr	r3, [pc, #484]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	897b      	ldrh	r3, [r7, #10]
 800a0d8:	1c59      	adds	r1, r3, #1
 800a0da:	8179      	strh	r1, [r7, #10]
 800a0dc:	461d      	mov	r5, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f000 ff54 	bl	800af8c <NibbleToHex>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	1963      	adds	r3, r4, r5
 800a0ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800a0ee:	4b74      	ldr	r3, [pc, #464]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a0f0:	78da      	ldrb	r2, [r3, #3]
 800a0f2:	4b71      	ldr	r3, [pc, #452]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a0f4:	681c      	ldr	r4, [r3, #0]
 800a0f6:	897b      	ldrh	r3, [r7, #10]
 800a0f8:	1c59      	adds	r1, r3, #1
 800a0fa:	8179      	strh	r1, [r7, #10]
 800a0fc:	461d      	mov	r5, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f000 ff44 	bl	800af8c <NibbleToHex>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	1963      	adds	r3, r4, r5
 800a10a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800a10e:	4b6c      	ldr	r3, [pc, #432]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a110:	791b      	ldrb	r3, [r3, #4]
 800a112:	091b      	lsrs	r3, r3, #4
 800a114:	b2da      	uxtb	r2, r3
 800a116:	4b68      	ldr	r3, [pc, #416]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a118:	681c      	ldr	r4, [r3, #0]
 800a11a:	897b      	ldrh	r3, [r7, #10]
 800a11c:	1c59      	adds	r1, r3, #1
 800a11e:	8179      	strh	r1, [r7, #10]
 800a120:	461d      	mov	r5, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f000 ff32 	bl	800af8c <NibbleToHex>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	1963      	adds	r3, r4, r5
 800a12e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800a132:	4b63      	ldr	r3, [pc, #396]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a134:	791a      	ldrb	r2, [r3, #4]
 800a136:	4b60      	ldr	r3, [pc, #384]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a138:	681c      	ldr	r4, [r3, #0]
 800a13a:	897b      	ldrh	r3, [r7, #10]
 800a13c:	1c59      	adds	r1, r3, #1
 800a13e:	8179      	strh	r1, [r7, #10]
 800a140:	461d      	mov	r5, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f000 ff22 	bl	800af8c <NibbleToHex>
 800a148:	4603      	mov	r3, r0
 800a14a:	461a      	mov	r2, r3
 800a14c:	1963      	adds	r3, r4, r5
 800a14e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800a152:	4b5b      	ldr	r3, [pc, #364]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a154:	795b      	ldrb	r3, [r3, #5]
 800a156:	091b      	lsrs	r3, r3, #4
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	4b57      	ldr	r3, [pc, #348]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a15c:	681c      	ldr	r4, [r3, #0]
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	1c59      	adds	r1, r3, #1
 800a162:	8179      	strh	r1, [r7, #10]
 800a164:	461d      	mov	r5, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f000 ff10 	bl	800af8c <NibbleToHex>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	1963      	adds	r3, r4, r5
 800a172:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800a176:	4b52      	ldr	r3, [pc, #328]	; (800a2c0 <send_DHCP_REQUEST+0x50c>)
 800a178:	795a      	ldrb	r2, [r3, #5]
 800a17a:	4b4f      	ldr	r3, [pc, #316]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a17c:	681c      	ldr	r4, [r3, #0]
 800a17e:	897b      	ldrh	r3, [r7, #10]
 800a180:	1c59      	adds	r1, r3, #1
 800a182:	8179      	strh	r1, [r7, #10]
 800a184:	461d      	mov	r5, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f000 ff00 	bl	800af8c <NibbleToHex>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	1963      	adds	r3, r4, r5
 800a192:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	b2d9      	uxtb	r1, r3
 800a19a:	4b47      	ldr	r3, [pc, #284]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	8978      	ldrh	r0, [r7, #10]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3307      	adds	r3, #7
 800a1a4:	1ac3      	subs	r3, r0, r3
 800a1a6:	3106      	adds	r1, #6
 800a1a8:	b2c9      	uxtb	r1, r1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	460a      	mov	r2, r1
 800a1ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800a1b2:	4b41      	ldr	r3, [pc, #260]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	897b      	ldrh	r3, [r7, #10]
 800a1b8:	1c59      	adds	r1, r3, #1
 800a1ba:	8179      	strh	r1, [r7, #10]
 800a1bc:	4413      	add	r3, r2
 800a1be:	2237      	movs	r2, #55	; 0x37
 800a1c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800a1c4:	4b3c      	ldr	r3, [pc, #240]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	897b      	ldrh	r3, [r7, #10]
 800a1ca:	1c59      	adds	r1, r3, #1
 800a1cc:	8179      	strh	r1, [r7, #10]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800a1d6:	4b38      	ldr	r3, [pc, #224]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	897b      	ldrh	r3, [r7, #10]
 800a1dc:	1c59      	adds	r1, r3, #1
 800a1de:	8179      	strh	r1, [r7, #10]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800a1e8:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	897b      	ldrh	r3, [r7, #10]
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	8179      	strh	r1, [r7, #10]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	897b      	ldrh	r3, [r7, #10]
 800a200:	1c59      	adds	r1, r3, #1
 800a202:	8179      	strh	r1, [r7, #10]
 800a204:	4413      	add	r3, r2
 800a206:	2206      	movs	r2, #6
 800a208:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800a20c:	4b2a      	ldr	r3, [pc, #168]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	897b      	ldrh	r3, [r7, #10]
 800a212:	1c59      	adds	r1, r3, #1
 800a214:	8179      	strh	r1, [r7, #10]
 800a216:	4413      	add	r3, r2
 800a218:	220f      	movs	r2, #15
 800a21a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800a21e:	4b26      	ldr	r3, [pc, #152]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	897b      	ldrh	r3, [r7, #10]
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	8179      	strh	r1, [r7, #10]
 800a228:	4413      	add	r3, r2
 800a22a:	223a      	movs	r2, #58	; 0x3a
 800a22c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800a230:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	897b      	ldrh	r3, [r7, #10]
 800a236:	1c59      	adds	r1, r3, #1
 800a238:	8179      	strh	r1, [r7, #10]
 800a23a:	4413      	add	r3, r2
 800a23c:	223b      	movs	r2, #59	; 0x3b
 800a23e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800a242:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	897b      	ldrh	r3, [r7, #10]
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	8179      	strh	r1, [r7, #10]
 800a24c:	4413      	add	r3, r2
 800a24e:	221f      	movs	r2, #31
 800a250:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800a254:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	897b      	ldrh	r3, [r7, #10]
 800a25a:	1c59      	adds	r1, r3, #1
 800a25c:	8179      	strh	r1, [r7, #10]
 800a25e:	4413      	add	r3, r2
 800a260:	2221      	movs	r2, #33	; 0x21
 800a262:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800a266:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	897b      	ldrh	r3, [r7, #10]
 800a26c:	1c59      	adds	r1, r3, #1
 800a26e:	8179      	strh	r1, [r7, #10]
 800a270:	4413      	add	r3, r2
 800a272:	22ff      	movs	r2, #255	; 0xff
 800a274:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a278:	897b      	ldrh	r3, [r7, #10]
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e009      	b.n	800a292 <send_DHCP_REQUEST+0x4de>
 800a27e:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	33ec      	adds	r3, #236	; 0xec
 800a288:	2200      	movs	r2, #0
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a298:	dbf1      	blt.n	800a27e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a29a:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <send_DHCP_REQUEST+0x510>)
 800a29c:	7818      	ldrb	r0, [r3, #0]
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <send_DHCP_REQUEST+0x504>)
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	1d3b      	adds	r3, r7, #4
 800a2a4:	2243      	movs	r2, #67	; 0x43
 800a2a6:	9200      	str	r2, [sp, #0]
 800a2a8:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a2ac:	f002 fb3a 	bl	800c924 <sendto>

}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bdb0      	pop	{r4, r5, r7, pc}
 800a2b8:	200013dc 	.word	0x200013dc
 800a2bc:	2000008c 	.word	0x2000008c
 800a2c0:	200013c8 	.word	0x200013c8
 800a2c4:	200013e0 	.word	0x200013e0

0800a2c8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800a2d2:	f7ff fab3 	bl	800983c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800a2d6:	2304      	movs	r3, #4
 800a2d8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800a2da:	4b9f      	ldr	r3, [pc, #636]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	330a      	adds	r3, #10
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800a2e4:	4b9c      	ldr	r3, [pc, #624]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	330a      	adds	r3, #10
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800a2f0:	4b99      	ldr	r3, [pc, #612]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	897b      	ldrh	r3, [r7, #10]
 800a2f6:	1c59      	adds	r1, r3, #1
 800a2f8:	8179      	strh	r1, [r7, #10]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	2235      	movs	r2, #53	; 0x35
 800a2fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a302:	4b95      	ldr	r3, [pc, #596]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	897b      	ldrh	r3, [r7, #10]
 800a308:	1c59      	adds	r1, r3, #1
 800a30a:	8179      	strh	r1, [r7, #10]
 800a30c:	4413      	add	r3, r2
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800a314:	4b90      	ldr	r3, [pc, #576]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	897b      	ldrh	r3, [r7, #10]
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	8179      	strh	r1, [r7, #10]
 800a31e:	4413      	add	r3, r2
 800a320:	2204      	movs	r2, #4
 800a322:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a326:	4b8c      	ldr	r3, [pc, #560]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	897b      	ldrh	r3, [r7, #10]
 800a32c:	1c59      	adds	r1, r3, #1
 800a32e:	8179      	strh	r1, [r7, #10]
 800a330:	4413      	add	r3, r2
 800a332:	223d      	movs	r2, #61	; 0x3d
 800a334:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a338:	4b87      	ldr	r3, [pc, #540]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	897b      	ldrh	r3, [r7, #10]
 800a33e:	1c59      	adds	r1, r3, #1
 800a340:	8179      	strh	r1, [r7, #10]
 800a342:	4413      	add	r3, r2
 800a344:	2207      	movs	r2, #7
 800a346:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a34a:	4b83      	ldr	r3, [pc, #524]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	897b      	ldrh	r3, [r7, #10]
 800a350:	1c59      	adds	r1, r3, #1
 800a352:	8179      	strh	r1, [r7, #10]
 800a354:	4413      	add	r3, r2
 800a356:	2201      	movs	r2, #1
 800a358:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a35c:	4b7e      	ldr	r3, [pc, #504]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	897b      	ldrh	r3, [r7, #10]
 800a362:	1c59      	adds	r1, r3, #1
 800a364:	8179      	strh	r1, [r7, #10]
 800a366:	4618      	mov	r0, r3
 800a368:	4b7c      	ldr	r3, [pc, #496]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	1813      	adds	r3, r2, r0
 800a36e:	460a      	mov	r2, r1
 800a370:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a374:	4b78      	ldr	r3, [pc, #480]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	1c59      	adds	r1, r3, #1
 800a37c:	8179      	strh	r1, [r7, #10]
 800a37e:	4618      	mov	r0, r3
 800a380:	4b76      	ldr	r3, [pc, #472]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a382:	7859      	ldrb	r1, [r3, #1]
 800a384:	1813      	adds	r3, r2, r0
 800a386:	460a      	mov	r2, r1
 800a388:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a38c:	4b72      	ldr	r3, [pc, #456]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	897b      	ldrh	r3, [r7, #10]
 800a392:	1c59      	adds	r1, r3, #1
 800a394:	8179      	strh	r1, [r7, #10]
 800a396:	4618      	mov	r0, r3
 800a398:	4b70      	ldr	r3, [pc, #448]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a39a:	7899      	ldrb	r1, [r3, #2]
 800a39c:	1813      	adds	r3, r2, r0
 800a39e:	460a      	mov	r2, r1
 800a3a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a3a4:	4b6c      	ldr	r3, [pc, #432]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	897b      	ldrh	r3, [r7, #10]
 800a3aa:	1c59      	adds	r1, r3, #1
 800a3ac:	8179      	strh	r1, [r7, #10]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	4b6a      	ldr	r3, [pc, #424]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a3b2:	78d9      	ldrb	r1, [r3, #3]
 800a3b4:	1813      	adds	r3, r2, r0
 800a3b6:	460a      	mov	r2, r1
 800a3b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a3bc:	4b66      	ldr	r3, [pc, #408]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	897b      	ldrh	r3, [r7, #10]
 800a3c2:	1c59      	adds	r1, r3, #1
 800a3c4:	8179      	strh	r1, [r7, #10]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	4b64      	ldr	r3, [pc, #400]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a3ca:	7919      	ldrb	r1, [r3, #4]
 800a3cc:	1813      	adds	r3, r2, r0
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a3d4:	4b60      	ldr	r3, [pc, #384]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	897b      	ldrh	r3, [r7, #10]
 800a3da:	1c59      	adds	r1, r3, #1
 800a3dc:	8179      	strh	r1, [r7, #10]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	4b5e      	ldr	r3, [pc, #376]	; (800a55c <send_DHCP_DECLINE+0x294>)
 800a3e2:	7959      	ldrb	r1, [r3, #5]
 800a3e4:	1813      	adds	r3, r2, r0
 800a3e6:	460a      	mov	r2, r1
 800a3e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800a3ec:	4b5a      	ldr	r3, [pc, #360]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	897b      	ldrh	r3, [r7, #10]
 800a3f2:	1c59      	adds	r1, r3, #1
 800a3f4:	8179      	strh	r1, [r7, #10]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	2232      	movs	r2, #50	; 0x32
 800a3fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a3fe:	4b56      	ldr	r3, [pc, #344]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	897b      	ldrh	r3, [r7, #10]
 800a404:	1c59      	adds	r1, r3, #1
 800a406:	8179      	strh	r1, [r7, #10]
 800a408:	4413      	add	r3, r2
 800a40a:	2204      	movs	r2, #4
 800a40c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800a410:	4b51      	ldr	r3, [pc, #324]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	897b      	ldrh	r3, [r7, #10]
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	8179      	strh	r1, [r7, #10]
 800a41a:	4618      	mov	r0, r3
 800a41c:	4b50      	ldr	r3, [pc, #320]	; (800a560 <send_DHCP_DECLINE+0x298>)
 800a41e:	7819      	ldrb	r1, [r3, #0]
 800a420:	1813      	adds	r3, r2, r0
 800a422:	460a      	mov	r2, r1
 800a424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800a428:	4b4b      	ldr	r3, [pc, #300]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	1c59      	adds	r1, r3, #1
 800a430:	8179      	strh	r1, [r7, #10]
 800a432:	4618      	mov	r0, r3
 800a434:	4b4a      	ldr	r3, [pc, #296]	; (800a560 <send_DHCP_DECLINE+0x298>)
 800a436:	7859      	ldrb	r1, [r3, #1]
 800a438:	1813      	adds	r3, r2, r0
 800a43a:	460a      	mov	r2, r1
 800a43c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800a440:	4b45      	ldr	r3, [pc, #276]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	897b      	ldrh	r3, [r7, #10]
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	8179      	strh	r1, [r7, #10]
 800a44a:	4618      	mov	r0, r3
 800a44c:	4b44      	ldr	r3, [pc, #272]	; (800a560 <send_DHCP_DECLINE+0x298>)
 800a44e:	7899      	ldrb	r1, [r3, #2]
 800a450:	1813      	adds	r3, r2, r0
 800a452:	460a      	mov	r2, r1
 800a454:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800a458:	4b3f      	ldr	r3, [pc, #252]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	897b      	ldrh	r3, [r7, #10]
 800a45e:	1c59      	adds	r1, r3, #1
 800a460:	8179      	strh	r1, [r7, #10]
 800a462:	4618      	mov	r0, r3
 800a464:	4b3e      	ldr	r3, [pc, #248]	; (800a560 <send_DHCP_DECLINE+0x298>)
 800a466:	78d9      	ldrb	r1, [r3, #3]
 800a468:	1813      	adds	r3, r2, r0
 800a46a:	460a      	mov	r2, r1
 800a46c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800a470:	4b39      	ldr	r3, [pc, #228]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	897b      	ldrh	r3, [r7, #10]
 800a476:	1c59      	adds	r1, r3, #1
 800a478:	8179      	strh	r1, [r7, #10]
 800a47a:	4413      	add	r3, r2
 800a47c:	2236      	movs	r2, #54	; 0x36
 800a47e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a482:	4b35      	ldr	r3, [pc, #212]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	897b      	ldrh	r3, [r7, #10]
 800a488:	1c59      	adds	r1, r3, #1
 800a48a:	8179      	strh	r1, [r7, #10]
 800a48c:	4413      	add	r3, r2
 800a48e:	2204      	movs	r2, #4
 800a490:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	897b      	ldrh	r3, [r7, #10]
 800a49a:	1c59      	adds	r1, r3, #1
 800a49c:	8179      	strh	r1, [r7, #10]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	4b30      	ldr	r3, [pc, #192]	; (800a564 <send_DHCP_DECLINE+0x29c>)
 800a4a2:	7819      	ldrb	r1, [r3, #0]
 800a4a4:	1813      	adds	r3, r2, r0
 800a4a6:	460a      	mov	r2, r1
 800a4a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800a4ac:	4b2a      	ldr	r3, [pc, #168]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	897b      	ldrh	r3, [r7, #10]
 800a4b2:	1c59      	adds	r1, r3, #1
 800a4b4:	8179      	strh	r1, [r7, #10]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	4b2a      	ldr	r3, [pc, #168]	; (800a564 <send_DHCP_DECLINE+0x29c>)
 800a4ba:	7859      	ldrb	r1, [r3, #1]
 800a4bc:	1813      	adds	r3, r2, r0
 800a4be:	460a      	mov	r2, r1
 800a4c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	897b      	ldrh	r3, [r7, #10]
 800a4ca:	1c59      	adds	r1, r3, #1
 800a4cc:	8179      	strh	r1, [r7, #10]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	4b24      	ldr	r3, [pc, #144]	; (800a564 <send_DHCP_DECLINE+0x29c>)
 800a4d2:	7899      	ldrb	r1, [r3, #2]
 800a4d4:	1813      	adds	r3, r2, r0
 800a4d6:	460a      	mov	r2, r1
 800a4d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800a4dc:	4b1e      	ldr	r3, [pc, #120]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	897b      	ldrh	r3, [r7, #10]
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	8179      	strh	r1, [r7, #10]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <send_DHCP_DECLINE+0x29c>)
 800a4ea:	78d9      	ldrb	r1, [r3, #3]
 800a4ec:	1813      	adds	r3, r2, r0
 800a4ee:	460a      	mov	r2, r1
 800a4f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 800a4f4:	4b18      	ldr	r3, [pc, #96]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	897b      	ldrh	r3, [r7, #10]
 800a4fa:	1c59      	adds	r1, r3, #1
 800a4fc:	8179      	strh	r1, [r7, #10]
 800a4fe:	4413      	add	r3, r2
 800a500:	22ff      	movs	r2, #255	; 0xff
 800a502:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a506:	897b      	ldrh	r3, [r7, #10]
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e009      	b.n	800a520 <send_DHCP_DECLINE+0x258>
 800a50c:	4b12      	ldr	r3, [pc, #72]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	33ec      	adds	r3, #236	; 0xec
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a526:	dbf1      	blt.n	800a50c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 800a528:	23ff      	movs	r3, #255	; 0xff
 800a52a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800a52c:	23ff      	movs	r3, #255	; 0xff
 800a52e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 800a530:	23ff      	movs	r3, #255	; 0xff
 800a532:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 800a534:	23ff      	movs	r3, #255	; 0xff
 800a536:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a538:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <send_DHCP_DECLINE+0x2a0>)
 800a53a:	7818      	ldrb	r0, [r3, #0]
 800a53c:	4b06      	ldr	r3, [pc, #24]	; (800a558 <send_DHCP_DECLINE+0x290>)
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	1d3b      	adds	r3, r7, #4
 800a542:	2243      	movs	r2, #67	; 0x43
 800a544:	9200      	str	r2, [sp, #0]
 800a546:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a54a:	f002 f9eb 	bl	800c924 <sendto>
}
 800a54e:	bf00      	nop
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	200013dc 	.word	0x200013dc
 800a55c:	200013c8 	.word	0x200013c8
 800a560:	200004dc 	.word	0x200004dc
 800a564:	200013d8 	.word	0x200013d8
 800a568:	200013e0 	.word	0x200013e0

0800a56c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800a56c:	b590      	push	{r4, r7, lr}
 800a56e:	b089      	sub	sp, #36	; 0x24
 800a570:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800a576:	4ba1      	ldr	r3, [pc, #644]	; (800a7fc <parseDHCPMSG+0x290>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f002 fff9 	bl	800d572 <getSn_RX_RSR>
 800a580:	4603      	mov	r3, r0
 800a582:	823b      	strh	r3, [r7, #16]
 800a584:	8a3b      	ldrh	r3, [r7, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d011      	beq.n	800a5ae <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800a58a:	4b9c      	ldr	r3, [pc, #624]	; (800a7fc <parseDHCPMSG+0x290>)
 800a58c:	7818      	ldrb	r0, [r3, #0]
 800a58e:	4b9c      	ldr	r3, [pc, #624]	; (800a800 <parseDHCPMSG+0x294>)
 800a590:	6819      	ldr	r1, [r3, #0]
 800a592:	1d3c      	adds	r4, r7, #4
 800a594:	8a3a      	ldrh	r2, [r7, #16]
 800a596:	1cbb      	adds	r3, r7, #2
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4623      	mov	r3, r4
 800a59c:	f002 faf8 	bl	800cb90 <recvfrom>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800a5a4:	887b      	ldrh	r3, [r7, #2]
 800a5a6:	2b43      	cmp	r3, #67	; 0x43
 800a5a8:	f040 81ed 	bne.w	800a986 <parseDHCPMSG+0x41a>
 800a5ac:	e001      	b.n	800a5b2 <parseDHCPMSG+0x46>
   else return 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e1eb      	b.n	800a98a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800a5b2:	4b93      	ldr	r3, [pc, #588]	; (800a800 <parseDHCPMSG+0x294>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	7f1a      	ldrb	r2, [r3, #28]
 800a5b8:	4b92      	ldr	r3, [pc, #584]	; (800a804 <parseDHCPMSG+0x298>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d124      	bne.n	800a60a <parseDHCPMSG+0x9e>
 800a5c0:	4b8f      	ldr	r3, [pc, #572]	; (800a800 <parseDHCPMSG+0x294>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	7f5a      	ldrb	r2, [r3, #29]
 800a5c6:	4b8f      	ldr	r3, [pc, #572]	; (800a804 <parseDHCPMSG+0x298>)
 800a5c8:	785b      	ldrb	r3, [r3, #1]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d11d      	bne.n	800a60a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a5ce:	4b8c      	ldr	r3, [pc, #560]	; (800a800 <parseDHCPMSG+0x294>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	7f9a      	ldrb	r2, [r3, #30]
 800a5d4:	4b8b      	ldr	r3, [pc, #556]	; (800a804 <parseDHCPMSG+0x298>)
 800a5d6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d116      	bne.n	800a60a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a5dc:	4b88      	ldr	r3, [pc, #544]	; (800a800 <parseDHCPMSG+0x294>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	7fda      	ldrb	r2, [r3, #31]
 800a5e2:	4b88      	ldr	r3, [pc, #544]	; (800a804 <parseDHCPMSG+0x298>)
 800a5e4:	78db      	ldrb	r3, [r3, #3]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d10f      	bne.n	800a60a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800a5ea:	4b85      	ldr	r3, [pc, #532]	; (800a800 <parseDHCPMSG+0x294>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a5f2:	4b84      	ldr	r3, [pc, #528]	; (800a804 <parseDHCPMSG+0x298>)
 800a5f4:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d107      	bne.n	800a60a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800a5fa:	4b81      	ldr	r3, [pc, #516]	; (800a800 <parseDHCPMSG+0x294>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a602:	4b80      	ldr	r3, [pc, #512]	; (800a804 <parseDHCPMSG+0x298>)
 800a604:	795b      	ldrb	r3, [r3, #5]
 800a606:	429a      	cmp	r2, r3
 800a608:	d001      	beq.n	800a60e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e1bd      	b.n	800a98a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800a60e:	4b7e      	ldr	r3, [pc, #504]	; (800a808 <parseDHCPMSG+0x29c>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <parseDHCPMSG+0xc2>
 800a616:	4b7c      	ldr	r3, [pc, #496]	; (800a808 <parseDHCPMSG+0x29c>)
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d107      	bne.n	800a62e <parseDHCPMSG+0xc2>
 800a61e:	4b7a      	ldr	r3, [pc, #488]	; (800a808 <parseDHCPMSG+0x29c>)
 800a620:	789b      	ldrb	r3, [r3, #2]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d103      	bne.n	800a62e <parseDHCPMSG+0xc2>
 800a626:	4b78      	ldr	r3, [pc, #480]	; (800a808 <parseDHCPMSG+0x29c>)
 800a628:	78db      	ldrb	r3, [r3, #3]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d029      	beq.n	800a682 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800a62e:	793a      	ldrb	r2, [r7, #4]
 800a630:	4b75      	ldr	r3, [pc, #468]	; (800a808 <parseDHCPMSG+0x29c>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	d10e      	bne.n	800a656 <parseDHCPMSG+0xea>
 800a638:	797a      	ldrb	r2, [r7, #5]
 800a63a:	4b73      	ldr	r3, [pc, #460]	; (800a808 <parseDHCPMSG+0x29c>)
 800a63c:	785b      	ldrb	r3, [r3, #1]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d109      	bne.n	800a656 <parseDHCPMSG+0xea>
 800a642:	79ba      	ldrb	r2, [r7, #6]
 800a644:	4b70      	ldr	r3, [pc, #448]	; (800a808 <parseDHCPMSG+0x29c>)
 800a646:	789b      	ldrb	r3, [r3, #2]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d104      	bne.n	800a656 <parseDHCPMSG+0xea>
 800a64c:	79fa      	ldrb	r2, [r7, #7]
 800a64e:	4b6e      	ldr	r3, [pc, #440]	; (800a808 <parseDHCPMSG+0x29c>)
 800a650:	78db      	ldrb	r3, [r3, #3]
 800a652:	429a      	cmp	r2, r3
 800a654:	d015      	beq.n	800a682 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800a656:	793a      	ldrb	r2, [r7, #4]
 800a658:	4b6c      	ldr	r3, [pc, #432]	; (800a80c <parseDHCPMSG+0x2a0>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d10e      	bne.n	800a67e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800a660:	797a      	ldrb	r2, [r7, #5]
 800a662:	4b6a      	ldr	r3, [pc, #424]	; (800a80c <parseDHCPMSG+0x2a0>)
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	429a      	cmp	r2, r3
 800a668:	d109      	bne.n	800a67e <parseDHCPMSG+0x112>
 800a66a:	79ba      	ldrb	r2, [r7, #6]
 800a66c:	4b67      	ldr	r3, [pc, #412]	; (800a80c <parseDHCPMSG+0x2a0>)
 800a66e:	789b      	ldrb	r3, [r3, #2]
 800a670:	429a      	cmp	r2, r3
 800a672:	d104      	bne.n	800a67e <parseDHCPMSG+0x112>
 800a674:	79fa      	ldrb	r2, [r7, #7]
 800a676:	4b65      	ldr	r3, [pc, #404]	; (800a80c <parseDHCPMSG+0x2a0>)
 800a678:	78db      	ldrb	r3, [r3, #3]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d001      	beq.n	800a682 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	e183      	b.n	800a98a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800a682:	4b5f      	ldr	r3, [pc, #380]	; (800a800 <parseDHCPMSG+0x294>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	33f0      	adds	r3, #240	; 0xf0
 800a68c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800a68e:	8a3b      	ldrh	r3, [r7, #16]
 800a690:	3bf0      	subs	r3, #240	; 0xf0
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	4413      	add	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 800a698:	e170      	b.n	800a97c <parseDHCPMSG+0x410>

			switch ( *p ) {
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b36      	cmp	r3, #54	; 0x36
 800a6a0:	dc76      	bgt.n	800a790 <parseDHCPMSG+0x224>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f2c0 815d 	blt.w	800a962 <parseDHCPMSG+0x3f6>
 800a6a8:	2b36      	cmp	r3, #54	; 0x36
 800a6aa:	f200 815a 	bhi.w	800a962 <parseDHCPMSG+0x3f6>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <parseDHCPMSG+0x148>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a79d 	.word	0x0800a79d
 800a6b8:	0800a7bd 	.word	0x0800a7bd
 800a6bc:	0800a963 	.word	0x0800a963
 800a6c0:	0800a815 	.word	0x0800a815
 800a6c4:	0800a963 	.word	0x0800a963
 800a6c8:	0800a963 	.word	0x0800a963
 800a6cc:	0800a861 	.word	0x0800a861
 800a6d0:	0800a963 	.word	0x0800a963
 800a6d4:	0800a963 	.word	0x0800a963
 800a6d8:	0800a963 	.word	0x0800a963
 800a6dc:	0800a963 	.word	0x0800a963
 800a6e0:	0800a963 	.word	0x0800a963
 800a6e4:	0800a963 	.word	0x0800a963
 800a6e8:	0800a963 	.word	0x0800a963
 800a6ec:	0800a963 	.word	0x0800a963
 800a6f0:	0800a963 	.word	0x0800a963
 800a6f4:	0800a963 	.word	0x0800a963
 800a6f8:	0800a963 	.word	0x0800a963
 800a6fc:	0800a963 	.word	0x0800a963
 800a700:	0800a963 	.word	0x0800a963
 800a704:	0800a963 	.word	0x0800a963
 800a708:	0800a963 	.word	0x0800a963
 800a70c:	0800a963 	.word	0x0800a963
 800a710:	0800a963 	.word	0x0800a963
 800a714:	0800a963 	.word	0x0800a963
 800a718:	0800a963 	.word	0x0800a963
 800a71c:	0800a963 	.word	0x0800a963
 800a720:	0800a963 	.word	0x0800a963
 800a724:	0800a963 	.word	0x0800a963
 800a728:	0800a963 	.word	0x0800a963
 800a72c:	0800a963 	.word	0x0800a963
 800a730:	0800a963 	.word	0x0800a963
 800a734:	0800a963 	.word	0x0800a963
 800a738:	0800a963 	.word	0x0800a963
 800a73c:	0800a963 	.word	0x0800a963
 800a740:	0800a963 	.word	0x0800a963
 800a744:	0800a963 	.word	0x0800a963
 800a748:	0800a963 	.word	0x0800a963
 800a74c:	0800a963 	.word	0x0800a963
 800a750:	0800a963 	.word	0x0800a963
 800a754:	0800a963 	.word	0x0800a963
 800a758:	0800a963 	.word	0x0800a963
 800a75c:	0800a963 	.word	0x0800a963
 800a760:	0800a963 	.word	0x0800a963
 800a764:	0800a963 	.word	0x0800a963
 800a768:	0800a963 	.word	0x0800a963
 800a76c:	0800a963 	.word	0x0800a963
 800a770:	0800a963 	.word	0x0800a963
 800a774:	0800a963 	.word	0x0800a963
 800a778:	0800a963 	.word	0x0800a963
 800a77c:	0800a963 	.word	0x0800a963
 800a780:	0800a8ad 	.word	0x0800a8ad
 800a784:	0800a963 	.word	0x0800a963
 800a788:	0800a7a5 	.word	0x0800a7a5
 800a78c:	0800a909 	.word	0x0800a909
 800a790:	2bff      	cmp	r3, #255	; 0xff
 800a792:	f040 80e6 	bne.w	800a962 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	617b      	str	r3, [r7, #20]
   				break;
 800a79a:	e0ef      	b.n	800a97c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
   				break;
 800a7a2:	e0eb      	b.n	800a97c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	617b      	str	r3, [r7, #20]
   				p++;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	617a      	str	r2, [r7, #20]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	74fb      	strb	r3, [r7, #19]
   				break;
 800a7ba:	e0df      	b.n	800a97c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]
   				p++;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	617a      	str	r2, [r7, #20]
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <parseDHCPMSG+0x2a4>)
 800a7d2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	617a      	str	r2, [r7, #20]
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <parseDHCPMSG+0x2a4>)
 800a7de:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	617a      	str	r2, [r7, #20]
 800a7e6:	781a      	ldrb	r2, [r3, #0]
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <parseDHCPMSG+0x2a4>)
 800a7ea:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	617a      	str	r2, [r7, #20]
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	4b06      	ldr	r3, [pc, #24]	; (800a810 <parseDHCPMSG+0x2a4>)
 800a7f6:	70da      	strb	r2, [r3, #3]
   				break;
 800a7f8:	e0c0      	b.n	800a97c <parseDHCPMSG+0x410>
 800a7fa:	bf00      	nop
 800a7fc:	200013e0 	.word	0x200013e0
 800a800:	200013dc 	.word	0x200013dc
 800a804:	200013c8 	.word	0x200013c8
 800a808:	200013d8 	.word	0x200013d8
 800a80c:	200013d4 	.word	0x200013d4
 800a810:	200004e4 	.word	0x200004e4
   			case routersOnSubnet :
   				p++;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	3301      	adds	r3, #1
 800a818:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	617a      	str	r2, [r7, #20]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	617a      	str	r2, [r7, #20]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	4b59      	ldr	r3, [pc, #356]	; (800a994 <parseDHCPMSG+0x428>)
 800a82e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	617a      	str	r2, [r7, #20]
 800a836:	781a      	ldrb	r2, [r3, #0]
 800a838:	4b56      	ldr	r3, [pc, #344]	; (800a994 <parseDHCPMSG+0x428>)
 800a83a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	617a      	str	r2, [r7, #20]
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	4b53      	ldr	r3, [pc, #332]	; (800a994 <parseDHCPMSG+0x428>)
 800a846:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	617a      	str	r2, [r7, #20]
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	4b50      	ldr	r3, [pc, #320]	; (800a994 <parseDHCPMSG+0x428>)
 800a852:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	3b04      	subs	r3, #4
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4413      	add	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]
   				break;
 800a85e:	e08d      	b.n	800a97c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	3301      	adds	r3, #1
 800a864:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	617a      	str	r2, [r7, #20]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	617a      	str	r2, [r7, #20]
 800a876:	781a      	ldrb	r2, [r3, #0]
 800a878:	4b47      	ldr	r3, [pc, #284]	; (800a998 <parseDHCPMSG+0x42c>)
 800a87a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	617a      	str	r2, [r7, #20]
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	4b44      	ldr	r3, [pc, #272]	; (800a998 <parseDHCPMSG+0x42c>)
 800a886:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	617a      	str	r2, [r7, #20]
 800a88e:	781a      	ldrb	r2, [r3, #0]
 800a890:	4b41      	ldr	r3, [pc, #260]	; (800a998 <parseDHCPMSG+0x42c>)
 800a892:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	617a      	str	r2, [r7, #20]
 800a89a:	781a      	ldrb	r2, [r3, #0]
 800a89c:	4b3e      	ldr	r3, [pc, #248]	; (800a998 <parseDHCPMSG+0x42c>)
 800a89e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	3b04      	subs	r3, #4
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
   				break;
 800a8aa:	e067      	b.n	800a97c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	617a      	str	r2, [r7, #20]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	617a      	str	r2, [r7, #20]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4b35      	ldr	r3, [pc, #212]	; (800a99c <parseDHCPMSG+0x430>)
 800a8c8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800a8ca:	4b34      	ldr	r3, [pc, #208]	; (800a99c <parseDHCPMSG+0x430>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	021a      	lsls	r2, r3, #8
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	1c59      	adds	r1, r3, #1
 800a8d4:	6179      	str	r1, [r7, #20]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	4413      	add	r3, r2
 800a8da:	4a30      	ldr	r2, [pc, #192]	; (800a99c <parseDHCPMSG+0x430>)
 800a8dc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800a8de:	4b2f      	ldr	r3, [pc, #188]	; (800a99c <parseDHCPMSG+0x430>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	021a      	lsls	r2, r3, #8
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	6179      	str	r1, [r7, #20]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <parseDHCPMSG+0x430>)
 800a8f0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <parseDHCPMSG+0x430>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	021a      	lsls	r2, r3, #8
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	1c59      	adds	r1, r3, #1
 800a8fc:	6179      	str	r1, [r7, #20]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	4413      	add	r3, r2
 800a902:	4a26      	ldr	r2, [pc, #152]	; (800a99c <parseDHCPMSG+0x430>)
 800a904:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800a906:	e039      	b.n	800a97c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	3301      	adds	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	617a      	str	r2, [r7, #20]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	617a      	str	r2, [r7, #20]
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	4b1f      	ldr	r3, [pc, #124]	; (800a9a0 <parseDHCPMSG+0x434>)
 800a922:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	617a      	str	r2, [r7, #20]
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <parseDHCPMSG+0x434>)
 800a92e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	617a      	str	r2, [r7, #20]
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	4b19      	ldr	r3, [pc, #100]	; (800a9a0 <parseDHCPMSG+0x434>)
 800a93a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	617a      	str	r2, [r7, #20]
 800a942:	781a      	ldrb	r2, [r3, #0]
 800a944:	4b16      	ldr	r3, [pc, #88]	; (800a9a0 <parseDHCPMSG+0x434>)
 800a946:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800a948:	793a      	ldrb	r2, [r7, #4]
 800a94a:	4b16      	ldr	r3, [pc, #88]	; (800a9a4 <parseDHCPMSG+0x438>)
 800a94c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800a94e:	797a      	ldrb	r2, [r7, #5]
 800a950:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <parseDHCPMSG+0x438>)
 800a952:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800a954:	79ba      	ldrb	r2, [r7, #6]
 800a956:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <parseDHCPMSG+0x438>)
 800a958:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800a95a:	79fa      	ldrb	r2, [r7, #7]
 800a95c:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <parseDHCPMSG+0x438>)
 800a95e:	70da      	strb	r2, [r3, #3]
   				break;
 800a960:	e00c      	b.n	800a97c <parseDHCPMSG+0x410>
   			default :
   				p++;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3301      	adds	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	617a      	str	r2, [r7, #20]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800a972:	7afb      	ldrb	r3, [r7, #11]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	4413      	add	r3, r2
 800a978:	617b      	str	r3, [r7, #20]
   				break;
 800a97a:	bf00      	nop
		while ( p < e ) {
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	429a      	cmp	r2, r3
 800a982:	f4ff ae8a 	bcc.w	800a69a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800a986:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd90      	pop	{r4, r7, pc}
 800a992:	bf00      	nop
 800a994:	200004e0 	.word	0x200004e0
 800a998:	200004e8 	.word	0x200004e8
 800a99c:	20000084 	.word	0x20000084
 800a9a0:	200013d8 	.word	0x200013d8
 800a9a4:	200013d4 	.word	0x200013d4

0800a9a8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800a9ae:	4b7f      	ldr	r3, [pc, #508]	; (800abac <DHCP_run+0x204>)
 800a9b0:	f993 3000 	ldrsb.w	r3, [r3]
 800a9b4:	2b06      	cmp	r3, #6
 800a9b6:	d101      	bne.n	800a9bc <DHCP_run+0x14>
 800a9b8:	2305      	movs	r3, #5
 800a9ba:	e0f3      	b.n	800aba4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800a9bc:	4b7c      	ldr	r3, [pc, #496]	; (800abb0 <DHCP_run+0x208>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f002 fc2c 	bl	800d228 <WIZCHIP_READ>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b22      	cmp	r3, #34	; 0x22
 800a9d4:	d006      	beq.n	800a9e4 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800a9d6:	4b76      	ldr	r3, [pc, #472]	; (800abb0 <DHCP_run+0x208>)
 800a9d8:	7818      	ldrb	r0, [r3, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2244      	movs	r2, #68	; 0x44
 800a9de:	2102      	movs	r1, #2
 800a9e0:	f001 fb9c 	bl	800c11c <socket>

	ret = DHCP_RUNNING;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 800a9e8:	f7ff fdc0 	bl	800a56c <parseDHCPMSG>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800a9f0:	4b6e      	ldr	r3, [pc, #440]	; (800abac <DHCP_run+0x204>)
 800a9f2:	f993 3000 	ldrsb.w	r3, [r3]
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	f200 80d0 	bhi.w	800ab9c <DHCP_run+0x1f4>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <DHCP_run+0x5c>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa19 	.word	0x0800aa19
 800aa08:	0800aa3d 	.word	0x0800aa3d
 800aa0c:	0800aa81 	.word	0x0800aa81
 800aa10:	0800aad1 	.word	0x0800aad1
 800aa14:	0800ab2b 	.word	0x0800ab2b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 800aa18:	4b66      	ldr	r3, [pc, #408]	; (800abb4 <DHCP_run+0x20c>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800aa1e:	4b65      	ldr	r3, [pc, #404]	; (800abb4 <DHCP_run+0x20c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800aa24:	4b63      	ldr	r3, [pc, #396]	; (800abb4 <DHCP_run+0x20c>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800aa2a:	4b62      	ldr	r3, [pc, #392]	; (800abb4 <DHCP_run+0x20c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800aa30:	f7fe fffa 	bl	8009a28 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800aa34:	4b5d      	ldr	r3, [pc, #372]	; (800abac <DHCP_run+0x204>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	701a      	strb	r2, [r3, #0]
   		break;
 800aa3a:	e0b2      	b.n	800aba2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800aa3c:	79bb      	ldrb	r3, [r7, #6]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d119      	bne.n	800aa76 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800aa42:	4b5d      	ldr	r3, [pc, #372]	; (800abb8 <DHCP_run+0x210>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	7c1a      	ldrb	r2, [r3, #16]
 800aa48:	4b5a      	ldr	r3, [pc, #360]	; (800abb4 <DHCP_run+0x20c>)
 800aa4a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800aa4c:	4b5a      	ldr	r3, [pc, #360]	; (800abb8 <DHCP_run+0x210>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	7c5a      	ldrb	r2, [r3, #17]
 800aa52:	4b58      	ldr	r3, [pc, #352]	; (800abb4 <DHCP_run+0x20c>)
 800aa54:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800aa56:	4b58      	ldr	r3, [pc, #352]	; (800abb8 <DHCP_run+0x210>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	7c9a      	ldrb	r2, [r3, #18]
 800aa5c:	4b55      	ldr	r3, [pc, #340]	; (800abb4 <DHCP_run+0x20c>)
 800aa5e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800aa60:	4b55      	ldr	r3, [pc, #340]	; (800abb8 <DHCP_run+0x210>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	7cda      	ldrb	r2, [r3, #19]
 800aa66:	4b53      	ldr	r3, [pc, #332]	; (800abb4 <DHCP_run+0x20c>)
 800aa68:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800aa6a:	f7ff f9a3 	bl	8009db4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800aa6e:	4b4f      	ldr	r3, [pc, #316]	; (800abac <DHCP_run+0x204>)
 800aa70:	2202      	movs	r2, #2
 800aa72:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800aa74:	e095      	b.n	800aba2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800aa76:	f000 f8b1 	bl	800abdc <check_DHCP_timeout>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	71fb      	strb	r3, [r7, #7]
         break;
 800aa7e:	e090      	b.n	800aba2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800aa80:	79bb      	ldrb	r3, [r7, #6]
 800aa82:	2b05      	cmp	r3, #5
 800aa84:	d116      	bne.n	800aab4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800aa86:	f000 f909 	bl	800ac9c <check_DHCP_leasedIP>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d008      	beq.n	800aaa2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800aa90:	4b4a      	ldr	r3, [pc, #296]	; (800abbc <DHCP_run+0x214>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4798      	blx	r3
					reset_DHCP_timeout();
 800aa96:	f000 f9d3 	bl	800ae40 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800aa9a:	4b44      	ldr	r3, [pc, #272]	; (800abac <DHCP_run+0x204>)
 800aa9c:	2203      	movs	r2, #3
 800aa9e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800aaa0:	e07f      	b.n	800aba2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800aaa2:	f000 f9cd 	bl	800ae40 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800aaa6:	4b46      	ldr	r3, [pc, #280]	; (800abc0 <DHCP_run+0x218>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 800aaac:	4b3f      	ldr	r3, [pc, #252]	; (800abac <DHCP_run+0x204>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	701a      	strb	r2, [r3, #0]
		break;
 800aab2:	e076      	b.n	800aba2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800aab4:	79bb      	ldrb	r3, [r7, #6]
 800aab6:	2b06      	cmp	r3, #6
 800aab8:	d105      	bne.n	800aac6 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800aaba:	f000 f9c1 	bl	800ae40 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800aabe:	4b3b      	ldr	r3, [pc, #236]	; (800abac <DHCP_run+0x204>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	701a      	strb	r2, [r3, #0]
		break;
 800aac4:	e06d      	b.n	800aba2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800aac6:	f000 f889 	bl	800abdc <check_DHCP_timeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	71fb      	strb	r3, [r7, #7]
		break;
 800aace:	e068      	b.n	800aba2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800aad0:	2304      	movs	r3, #4
 800aad2:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800aad4:	4b3b      	ldr	r3, [pc, #236]	; (800abc4 <DHCP_run+0x21c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aadc:	d060      	beq.n	800aba0 <DHCP_run+0x1f8>
 800aade:	4b39      	ldr	r3, [pc, #228]	; (800abc4 <DHCP_run+0x21c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	085a      	lsrs	r2, r3, #1
 800aae4:	4b38      	ldr	r3, [pc, #224]	; (800abc8 <DHCP_run+0x220>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d259      	bcs.n	800aba0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800aaf0:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <DHCP_run+0x20c>)
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	4b35      	ldr	r3, [pc, #212]	; (800abcc <DHCP_run+0x224>)
 800aaf6:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800aaf8:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <DHCP_run+0x20c>)
 800aafa:	785a      	ldrb	r2, [r3, #1]
 800aafc:	4b33      	ldr	r3, [pc, #204]	; (800abcc <DHCP_run+0x224>)
 800aafe:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800ab00:	4b2c      	ldr	r3, [pc, #176]	; (800abb4 <DHCP_run+0x20c>)
 800ab02:	789a      	ldrb	r2, [r3, #2]
 800ab04:	4b31      	ldr	r3, [pc, #196]	; (800abcc <DHCP_run+0x224>)
 800ab06:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800ab08:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <DHCP_run+0x20c>)
 800ab0a:	78da      	ldrb	r2, [r3, #3]
 800ab0c:	4b2f      	ldr	r3, [pc, #188]	; (800abcc <DHCP_run+0x224>)
 800ab0e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800ab10:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <DHCP_run+0x228>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	4a2e      	ldr	r2, [pc, #184]	; (800abd0 <DHCP_run+0x228>)
 800ab18:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800ab1a:	f7ff f94b 	bl	8009db4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800ab1e:	f000 f98f 	bl	800ae40 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800ab22:	4b22      	ldr	r3, [pc, #136]	; (800abac <DHCP_run+0x204>)
 800ab24:	2204      	movs	r2, #4
 800ab26:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ab28:	e03a      	b.n	800aba0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800ab2a:	2304      	movs	r3, #4
 800ab2c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800ab2e:	79bb      	ldrb	r3, [r7, #6]
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	d125      	bne.n	800ab80 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800ab34:	4b27      	ldr	r3, [pc, #156]	; (800abd4 <DHCP_run+0x22c>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800ab3a:	4b24      	ldr	r3, [pc, #144]	; (800abcc <DHCP_run+0x224>)
 800ab3c:	781a      	ldrb	r2, [r3, #0]
 800ab3e:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <DHCP_run+0x20c>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d111      	bne.n	800ab6a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800ab46:	4b21      	ldr	r3, [pc, #132]	; (800abcc <DHCP_run+0x224>)
 800ab48:	785a      	ldrb	r2, [r3, #1]
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <DHCP_run+0x20c>)
 800ab4c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d10b      	bne.n	800ab6a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800ab52:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <DHCP_run+0x224>)
 800ab54:	789a      	ldrb	r2, [r3, #2]
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <DHCP_run+0x20c>)
 800ab58:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d105      	bne.n	800ab6a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <DHCP_run+0x224>)
 800ab60:	78da      	ldrb	r2, [r3, #3]
 800ab62:	4b14      	ldr	r3, [pc, #80]	; (800abb4 <DHCP_run+0x20c>)
 800ab64:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d004      	beq.n	800ab74 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800ab6e:	4b1a      	ldr	r3, [pc, #104]	; (800abd8 <DHCP_run+0x230>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800ab74:	f000 f964 	bl	800ae40 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800ab78:	4b0c      	ldr	r3, [pc, #48]	; (800abac <DHCP_run+0x204>)
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800ab7e:	e010      	b.n	800aba2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800ab80:	79bb      	ldrb	r3, [r7, #6]
 800ab82:	2b06      	cmp	r3, #6
 800ab84:	d105      	bne.n	800ab92 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800ab86:	f000 f95b 	bl	800ae40 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800ab8a:	4b08      	ldr	r3, [pc, #32]	; (800abac <DHCP_run+0x204>)
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	701a      	strb	r2, [r3, #0]
	   	break;
 800ab90:	e007      	b.n	800aba2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800ab92:	f000 f823 	bl	800abdc <check_DHCP_timeout>
 800ab96:	4603      	mov	r3, r0
 800ab98:	71fb      	strb	r3, [r7, #7]
	   	break;
 800ab9a:	e002      	b.n	800aba2 <DHCP_run+0x1fa>
		default :
   		break;
 800ab9c:	bf00      	nop
 800ab9e:	e000      	b.n	800aba2 <DHCP_run+0x1fa>
		break;
 800aba0:	bf00      	nop
	}

	return ret;
 800aba2:	79fb      	ldrb	r3, [r7, #7]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	200004ec 	.word	0x200004ec
 800abb0:	200013e0 	.word	0x200013e0
 800abb4:	200004dc 	.word	0x200004dc
 800abb8:	200013dc 	.word	0x200013dc
 800abbc:	20000094 	.word	0x20000094
 800abc0:	2000009c 	.word	0x2000009c
 800abc4:	20000084 	.word	0x20000084
 800abc8:	200004f0 	.word	0x200004f0
 800abcc:	200004d8 	.word	0x200004d8
 800abd0:	200013d0 	.word	0x200013d0
 800abd4:	200004ed 	.word	0x200004ed
 800abd8:	20000098 	.word	0x20000098

0800abdc <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800abe2:	2301      	movs	r3, #1
 800abe4:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800abe6:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <check_DHCP_timeout+0xb0>)
 800abe8:	f993 3000 	ldrsb.w	r3, [r3]
 800abec:	2b01      	cmp	r3, #1
 800abee:	dc2d      	bgt.n	800ac4c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800abf0:	4b27      	ldr	r3, [pc, #156]	; (800ac90 <check_DHCP_timeout+0xb4>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	4b27      	ldr	r3, [pc, #156]	; (800ac94 <check_DHCP_timeout+0xb8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d242      	bcs.n	800ac82 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800abfc:	4b26      	ldr	r3, [pc, #152]	; (800ac98 <check_DHCP_timeout+0xbc>)
 800abfe:	f993 3000 	ldrsb.w	r3, [r3]
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d00c      	beq.n	800ac20 <check_DHCP_timeout+0x44>
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	dc0d      	bgt.n	800ac26 <check_DHCP_timeout+0x4a>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d002      	beq.n	800ac14 <check_DHCP_timeout+0x38>
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d003      	beq.n	800ac1a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800ac12:	e008      	b.n	800ac26 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800ac14:	f7fe ff08 	bl	8009a28 <send_DHCP_DISCOVER>
				break;
 800ac18:	e006      	b.n	800ac28 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800ac1a:	f7ff f8cb 	bl	8009db4 <send_DHCP_REQUEST>
				break;
 800ac1e:	e003      	b.n	800ac28 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800ac20:	f7ff f8c8 	bl	8009db4 <send_DHCP_REQUEST>
				break;
 800ac24:	e000      	b.n	800ac28 <check_DHCP_timeout+0x4c>
				break;
 800ac26:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <check_DHCP_timeout+0xb8>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800ac2e:	4b19      	ldr	r3, [pc, #100]	; (800ac94 <check_DHCP_timeout+0xb8>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	330a      	adds	r3, #10
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <check_DHCP_timeout+0xb4>)
 800ac36:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <check_DHCP_timeout+0xb0>)
 800ac3a:	f993 3000 	ldrsb.w	r3, [r3]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	3301      	adds	r3, #1
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	b25a      	sxtb	r2, r3
 800ac46:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <check_DHCP_timeout+0xb0>)
 800ac48:	701a      	strb	r2, [r3, #0]
 800ac4a:	e01a      	b.n	800ac82 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800ac4c:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <check_DHCP_timeout+0xbc>)
 800ac4e:	f993 3000 	ldrsb.w	r3, [r3]
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d00c      	beq.n	800ac70 <check_DHCP_timeout+0x94>
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	dc10      	bgt.n	800ac7c <check_DHCP_timeout+0xa0>
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d002      	beq.n	800ac64 <check_DHCP_timeout+0x88>
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d006      	beq.n	800ac70 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800ac62:	e00b      	b.n	800ac7c <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800ac64:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <check_DHCP_timeout+0xbc>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	71fb      	strb	r3, [r7, #7]
				break;
 800ac6e:	e006      	b.n	800ac7e <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800ac70:	f7fe feda 	bl	8009a28 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800ac74:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <check_DHCP_timeout+0xbc>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	701a      	strb	r2, [r3, #0]
				break;
 800ac7a:	e000      	b.n	800ac7e <check_DHCP_timeout+0xa2>
				break;
 800ac7c:	bf00      	nop
		}
		reset_DHCP_timeout();
 800ac7e:	f000 f8df 	bl	800ae40 <reset_DHCP_timeout>
	}
	return ret;
 800ac82:	79fb      	ldrb	r3, [r7, #7]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	200004ed 	.word	0x200004ed
 800ac90:	20000088 	.word	0x20000088
 800ac94:	200004f0 	.word	0x200004f0
 800ac98:	200004ec 	.word	0x200004ec

0800ac9c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800aca2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800aca6:	f002 fabf 	bl	800d228 <WIZCHIP_READ>
 800acaa:	4603      	mov	r3, r0
 800acac:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800acae:	2103      	movs	r1, #3
 800acb0:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800acb4:	f002 fb04 	bl	800d2c0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800acb8:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <check_DHCP_leasedIP+0x6c>)
 800acba:	7818      	ldrb	r0, [r3, #0]
 800acbc:	f241 3388 	movw	r3, #5000	; 0x1388
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <check_DHCP_leasedIP+0x70>)
 800acc4:	2211      	movs	r2, #17
 800acc6:	4912      	ldr	r1, [pc, #72]	; (800ad10 <check_DHCP_leasedIP+0x74>)
 800acc8:	f001 fe2c 	bl	800c924 <sendto>
 800accc:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	4619      	mov	r1, r3
 800acd2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800acd6:	f002 faf3 	bl	800d2c0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	f113 0f0d 	cmn.w	r3, #13
 800ace0:	d101      	bne.n	800ace6 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e00c      	b.n	800ad00 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800ace6:	f7ff faef 	bl	800a2c8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800acea:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <check_DHCP_leasedIP+0x78>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800acf0:	bf00      	nop
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <check_DHCP_leasedIP+0x78>)
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d9f9      	bls.n	800acf2 <check_DHCP_leasedIP+0x56>

		return 0;
 800acfe:	2300      	movs	r3, #0
	}
}	
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200013e0 	.word	0x200013e0
 800ad0c:	200004dc 	.word	0x200004dc
 800ad10:	08012a78 	.word	0x08012a78
 800ad14:	200004f0 	.word	0x200004f0

0800ad18 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	6039      	str	r1, [r7, #0]
 800ad22:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800ad24:	2300      	movs	r3, #0
 800ad26:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 800ad28:	2206      	movs	r2, #6
 800ad2a:	493f      	ldr	r1, [pc, #252]	; (800ae28 <DHCP_init+0x110>)
 800ad2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800ad30:	f002 fb14 	bl	800d35c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800ad34:	4b3c      	ldr	r3, [pc, #240]	; (800ae28 <DHCP_init+0x110>)
 800ad36:	781a      	ldrb	r2, [r3, #0]
 800ad38:	4b3b      	ldr	r3, [pc, #236]	; (800ae28 <DHCP_init+0x110>)
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	4b39      	ldr	r3, [pc, #228]	; (800ae28 <DHCP_init+0x110>)
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <DHCP_init+0x110>)
 800ad4a:	78db      	ldrb	r3, [r3, #3]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	4b35      	ldr	r3, [pc, #212]	; (800ae28 <DHCP_init+0x110>)
 800ad52:	791b      	ldrb	r3, [r3, #4]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	4b33      	ldr	r3, [pc, #204]	; (800ae28 <DHCP_init+0x110>)
 800ad5a:	795b      	ldrb	r3, [r3, #5]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d117      	bne.n	800ad94 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800ad64:	4b30      	ldr	r3, [pc, #192]	; (800ae28 <DHCP_init+0x110>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800ad6a:	4b2f      	ldr	r3, [pc, #188]	; (800ae28 <DHCP_init+0x110>)
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800ad70:	4b2d      	ldr	r3, [pc, #180]	; (800ae28 <DHCP_init+0x110>)
 800ad72:	22dc      	movs	r2, #220	; 0xdc
 800ad74:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800ad76:	4b2c      	ldr	r3, [pc, #176]	; (800ae28 <DHCP_init+0x110>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800ad7c:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <DHCP_init+0x110>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800ad82:	4b29      	ldr	r3, [pc, #164]	; (800ae28 <DHCP_init+0x110>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800ad88:	2206      	movs	r2, #6
 800ad8a:	4927      	ldr	r1, [pc, #156]	; (800ae28 <DHCP_init+0x110>)
 800ad8c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800ad90:	f002 fb44 	bl	800d41c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800ad94:	4a25      	ldr	r2, [pc, #148]	; (800ae2c <DHCP_init+0x114>)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800ad9a:	4a25      	ldr	r2, [pc, #148]	; (800ae30 <DHCP_init+0x118>)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800ada0:	4b24      	ldr	r3, [pc, #144]	; (800ae34 <DHCP_init+0x11c>)
 800ada2:	4a25      	ldr	r2, [pc, #148]	; (800ae38 <DHCP_init+0x120>)
 800ada4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800ada6:	4b20      	ldr	r3, [pc, #128]	; (800ae28 <DHCP_init+0x110>)
 800ada8:	78db      	ldrb	r3, [r3, #3]
 800adaa:	461a      	mov	r2, r3
 800adac:	4b21      	ldr	r3, [pc, #132]	; (800ae34 <DHCP_init+0x11c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	4a20      	ldr	r2, [pc, #128]	; (800ae34 <DHCP_init+0x11c>)
 800adb4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <DHCP_init+0x110>)
 800adb8:	791b      	ldrb	r3, [r3, #4]
 800adba:	461a      	mov	r2, r3
 800adbc:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <DHCP_init+0x11c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4413      	add	r3, r2
 800adc2:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <DHCP_init+0x11c>)
 800adc4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800adc6:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <DHCP_init+0x110>)
 800adc8:	795b      	ldrb	r3, [r3, #5]
 800adca:	461a      	mov	r2, r3
 800adcc:	4b19      	ldr	r3, [pc, #100]	; (800ae34 <DHCP_init+0x11c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4413      	add	r3, r2
 800add2:	4a18      	ldr	r2, [pc, #96]	; (800ae34 <DHCP_init+0x11c>)
 800add4:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <DHCP_init+0x110>)
 800add8:	78da      	ldrb	r2, [r3, #3]
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <DHCP_init+0x110>)
 800addc:	791b      	ldrb	r3, [r3, #4]
 800adde:	4053      	eors	r3, r2
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <DHCP_init+0x110>)
 800ade4:	795b      	ldrb	r3, [r3, #5]
 800ade6:	4053      	eors	r3, r2
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	461a      	mov	r2, r3
 800adec:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <DHCP_init+0x11c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4413      	add	r3, r2
 800adf2:	4a10      	ldr	r2, [pc, #64]	; (800ae34 <DHCP_init+0x11c>)
 800adf4:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	2204      	movs	r2, #4
 800adfc:	4619      	mov	r1, r3
 800adfe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800ae02:	f002 fb0b 	bl	800d41c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ae12:	f002 fb03 	bl	800d41c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800ae16:	f000 f813 	bl	800ae40 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800ae1a:	4b08      	ldr	r3, [pc, #32]	; (800ae3c <DHCP_init+0x124>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	200013c8 	.word	0x200013c8
 800ae2c:	200013e0 	.word	0x200013e0
 800ae30:	200013dc 	.word	0x200013dc
 800ae34:	200013d0 	.word	0x200013d0
 800ae38:	12345678 	.word	0x12345678
 800ae3c:	200004ec 	.word	0x200004ec

0800ae40 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800ae44:	4b06      	ldr	r3, [pc, #24]	; (800ae60 <reset_DHCP_timeout+0x20>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800ae4a:	4b06      	ldr	r3, [pc, #24]	; (800ae64 <reset_DHCP_timeout+0x24>)
 800ae4c:	220a      	movs	r2, #10
 800ae4e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <reset_DHCP_timeout+0x28>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
}
 800ae56:	bf00      	nop
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bc80      	pop	{r7}
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	200004f0 	.word	0x200004f0
 800ae64:	20000088 	.word	0x20000088
 800ae68:	200004ed 	.word	0x200004ed

0800ae6c <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <DHCP_time_handler+0x18>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	4a03      	ldr	r2, [pc, #12]	; (800ae84 <DHCP_time_handler+0x18>)
 800ae78:	6013      	str	r3, [r2, #0]
}
 800ae7a:	bf00      	nop
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	200004f0 	.word	0x200004f0

0800ae88 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <getIPfromDHCP+0x38>)
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	4a08      	ldr	r2, [pc, #32]	; (800aec0 <getIPfromDHCP+0x38>)
 800ae9e:	7852      	ldrb	r2, [r2, #1]
 800aea0:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3302      	adds	r3, #2
 800aea6:	4a06      	ldr	r2, [pc, #24]	; (800aec0 <getIPfromDHCP+0x38>)
 800aea8:	7892      	ldrb	r2, [r2, #2]
 800aeaa:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3303      	adds	r3, #3
 800aeb0:	4a03      	ldr	r2, [pc, #12]	; (800aec0 <getIPfromDHCP+0x38>)
 800aeb2:	78d2      	ldrb	r2, [r2, #3]
 800aeb4:	701a      	strb	r2, [r3, #0]
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr
 800aec0:	200004dc 	.word	0x200004dc

0800aec4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <getGWfromDHCP+0x38>)
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3301      	adds	r3, #1
 800aed8:	4a08      	ldr	r2, [pc, #32]	; (800aefc <getGWfromDHCP+0x38>)
 800aeda:	7852      	ldrb	r2, [r2, #1]
 800aedc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3302      	adds	r3, #2
 800aee2:	4a06      	ldr	r2, [pc, #24]	; (800aefc <getGWfromDHCP+0x38>)
 800aee4:	7892      	ldrb	r2, [r2, #2]
 800aee6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3303      	adds	r3, #3
 800aeec:	4a03      	ldr	r2, [pc, #12]	; (800aefc <getGWfromDHCP+0x38>)
 800aeee:	78d2      	ldrb	r2, [r2, #3]
 800aef0:	701a      	strb	r2, [r3, #0]
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr
 800aefc:	200004e0 	.word	0x200004e0

0800af00 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800af08:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <getSNfromDHCP+0x38>)
 800af0a:	781a      	ldrb	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3301      	adds	r3, #1
 800af14:	4a08      	ldr	r2, [pc, #32]	; (800af38 <getSNfromDHCP+0x38>)
 800af16:	7852      	ldrb	r2, [r2, #1]
 800af18:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3302      	adds	r3, #2
 800af1e:	4a06      	ldr	r2, [pc, #24]	; (800af38 <getSNfromDHCP+0x38>)
 800af20:	7892      	ldrb	r2, [r2, #2]
 800af22:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3303      	adds	r3, #3
 800af28:	4a03      	ldr	r2, [pc, #12]	; (800af38 <getSNfromDHCP+0x38>)
 800af2a:	78d2      	ldrb	r2, [r2, #3]
 800af2c:	701a      	strb	r2, [r3, #0]
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr
 800af38:	200004e4 	.word	0x200004e4

0800af3c <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <getDNSfromDHCP+0x38>)
 800af46:	781a      	ldrb	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	4a08      	ldr	r2, [pc, #32]	; (800af74 <getDNSfromDHCP+0x38>)
 800af52:	7852      	ldrb	r2, [r2, #1]
 800af54:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3302      	adds	r3, #2
 800af5a:	4a06      	ldr	r2, [pc, #24]	; (800af74 <getDNSfromDHCP+0x38>)
 800af5c:	7892      	ldrb	r2, [r2, #2]
 800af5e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3303      	adds	r3, #3
 800af64:	4a03      	ldr	r2, [pc, #12]	; (800af74 <getDNSfromDHCP+0x38>)
 800af66:	78d2      	ldrb	r2, [r2, #3]
 800af68:	701a      	strb	r2, [r3, #0]
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	200004e8 	.word	0x200004e8

0800af78 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 800af7c:	4b02      	ldr	r3, [pc, #8]	; (800af88 <getDHCPLeasetime+0x10>)
 800af7e:	681b      	ldr	r3, [r3, #0]
}
 800af80:	4618      	mov	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	bc80      	pop	{r7}
 800af86:	4770      	bx	lr
 800af88:	20000084 	.word	0x20000084

0800af8c <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	2b09      	cmp	r3, #9
 800afa2:	d803      	bhi.n	800afac <NibbleToHex+0x20>
    return nibble + '0';
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	3330      	adds	r3, #48	; 0x30
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e002      	b.n	800afb2 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	3337      	adds	r3, #55	; 0x37
 800afb0:	b2db      	uxtb	r3, r3
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr

0800afbc <linkParametersStorage>:

/**
 * Передаём указатель на массив со структурой
 */
void linkParametersStorage(parameter_record parameter_records_array[], uint8_t parameters_count)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	70fb      	strb	r3, [r7, #3]
	p_count = parameters_count;
 800afc8:	4a05      	ldr	r2, [pc, #20]	; (800afe0 <linkParametersStorage+0x24>)
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	7013      	strb	r3, [r2, #0]
	p_pointer = parameter_records_array;
 800afce:	4a05      	ldr	r2, [pc, #20]	; (800afe4 <linkParametersStorage+0x28>)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6013      	str	r3, [r2, #0]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	200013e8 	.word	0x200013e8
 800afe4:	200013e4 	.word	0x200013e4

0800afe8 <getIndexOfVariable>:
 */
uint8_t processParameter(uint32_t buf_pointer , parameter_record *parameter){
	return 0;
}

int8_t getIndexOfVariable(char *variable_text) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	for (int var_idx = 0; var_idx<p_count;var_idx++)
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e017      	b.n	800b026 <getIndexOfVariable+0x3e>
			{
			if (strncmp(p_pointer[var_idx].name,variable_text,_var_name_length) == 0)
 800aff6:	4b12      	ldr	r3, [pc, #72]	; (800b040 <getIndexOfVariable+0x58>)
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4613      	mov	r3, r2
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	440b      	add	r3, r1
 800b006:	4618      	mov	r0, r3
 800b008:	4b0e      	ldr	r3, [pc, #56]	; (800b044 <getIndexOfVariable+0x5c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	461a      	mov	r2, r3
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	f003 fdd0 	bl	800ebb4 <strncmp>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <getIndexOfVariable+0x38>
			 return var_idx;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	b25b      	sxtb	r3, r3
 800b01e:	e00a      	b.n	800b036 <getIndexOfVariable+0x4e>
	for (int var_idx = 0; var_idx<p_count;var_idx++)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	4b08      	ldr	r3, [pc, #32]	; (800b048 <getIndexOfVariable+0x60>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4293      	cmp	r3, r2
 800b030:	dbe1      	blt.n	800aff6 <getIndexOfVariable+0xe>
			}
	return -1; //не найдено
 800b032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200013e4 	.word	0x200013e4
 800b044:	200004f8 	.word	0x200004f8
 800b048:	200013e8 	.word	0x200013e8

0800b04c <clearCommandBuffer>:

void clearCommandBuffer()
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
	for(_var_name_length = 0; _var_name_length <NAME_LENGTH+8; _var_name_length++){
 800b050:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <clearCommandBuffer+0x34>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	e009      	b.n	800b06c <clearCommandBuffer+0x20>
		_command_text[_var_name_length] = 0;
 800b058:	4b09      	ldr	r3, [pc, #36]	; (800b080 <clearCommandBuffer+0x34>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <clearCommandBuffer+0x38>)
 800b05e:	2100      	movs	r1, #0
 800b060:	54d1      	strb	r1, [r2, r3]
	for(_var_name_length = 0; _var_name_length <NAME_LENGTH+8; _var_name_length++){
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <clearCommandBuffer+0x34>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	4a05      	ldr	r2, [pc, #20]	; (800b080 <clearCommandBuffer+0x34>)
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <clearCommandBuffer+0x34>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b17      	cmp	r3, #23
 800b072:	d9f1      	bls.n	800b058 <clearCommandBuffer+0xc>
	}
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	200004f8 	.word	0x200004f8
 800b084:	200004fc 	.word	0x200004fc

0800b088 <seekToChar>:
{

}

int16_t seekToChar(char *buffer, uint16_t length, char someChar)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	807b      	strh	r3, [r7, #2]
 800b094:	4613      	mov	r3, r2
 800b096:	707b      	strb	r3, [r7, #1]
for (uint16_t charIdx = 0; charIdx < length; charIdx++){
 800b098:	2300      	movs	r3, #0
 800b09a:	81fb      	strh	r3, [r7, #14]
 800b09c:	e00c      	b.n	800b0b8 <seekToChar+0x30>
	if (buffer[charIdx] == someChar) return charIdx;
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	787a      	ldrb	r2, [r7, #1]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d102      	bne.n	800b0b2 <seekToChar+0x2a>
 800b0ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b0b0:	e008      	b.n	800b0c4 <seekToChar+0x3c>
for (uint16_t charIdx = 0; charIdx < length; charIdx++){
 800b0b2:	89fb      	ldrh	r3, [r7, #14]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	81fb      	strh	r3, [r7, #14]
 800b0b8:	89fa      	ldrh	r2, [r7, #14]
 800b0ba:	887b      	ldrh	r3, [r7, #2]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d3ee      	bcc.n	800b09e <seekToChar+0x16>
}
return -1;
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bc80      	pop	{r7}
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <varToString>:
uint8_t varToString(parameter_record* variable, char *buffer)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
	switch (variable->format){
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7c1b      	ldrb	r3, [r3, #16]
 800b0de:	2b0a      	cmp	r3, #10
 800b0e0:	f200 808c 	bhi.w	800b1fc <varToString+0x12c>
 800b0e4:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <varToString+0x1c>)
 800b0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ea:	bf00      	nop
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	0800b119 	.word	0x0800b119
 800b0f4:	0800b131 	.word	0x0800b131
 800b0f8:	0800b147 	.word	0x0800b147
 800b0fc:	0800b15d 	.word	0x0800b15d
 800b100:	0800b173 	.word	0x0800b173
 800b104:	0800b189 	.word	0x0800b189
 800b108:	0800b19f 	.word	0x0800b19f
 800b10c:	0800b1bd 	.word	0x0800b1bd
 800b110:	0800b1d3 	.word	0x0800b1d3
 800b114:	0800b1e9 	.word	0x0800b1e9
			case TYPE_BOOL:
			case TYPE_CHAR:		 return sprintf(buffer,"%i",*(signed char *)variable->value); break;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	f993 3000 	ldrsb.w	r3, [r3]
 800b120:	461a      	mov	r2, r3
 800b122:	4939      	ldr	r1, [pc, #228]	; (800b208 <varToString+0x138>)
 800b124:	6838      	ldr	r0, [r7, #0]
 800b126:	f003 fd13 	bl	800eb50 <siprintf>
 800b12a:	4603      	mov	r3, r0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	e066      	b.n	800b1fe <varToString+0x12e>
			case TYPE_UCHAR: 	 return sprintf(buffer,"%d",*(uint8_t *)variable->value); break;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	4934      	ldr	r1, [pc, #208]	; (800b20c <varToString+0x13c>)
 800b13a:	6838      	ldr	r0, [r7, #0]
 800b13c:	f003 fd08 	bl	800eb50 <siprintf>
 800b140:	4603      	mov	r3, r0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	e05b      	b.n	800b1fe <varToString+0x12e>
			case TYPE_INT: 		 return sprintf(buffer,"%i",*(signed int *)variable->value); break;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	492e      	ldr	r1, [pc, #184]	; (800b208 <varToString+0x138>)
 800b150:	6838      	ldr	r0, [r7, #0]
 800b152:	f003 fcfd 	bl	800eb50 <siprintf>
 800b156:	4603      	mov	r3, r0
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	e050      	b.n	800b1fe <varToString+0x12e>
			case TYPE_UINT: 	 return sprintf(buffer,"%i",*(unsigned int *)variable->value); break;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	4928      	ldr	r1, [pc, #160]	; (800b208 <varToString+0x138>)
 800b166:	6838      	ldr	r0, [r7, #0]
 800b168:	f003 fcf2 	bl	800eb50 <siprintf>
 800b16c:	4603      	mov	r3, r0
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	e045      	b.n	800b1fe <varToString+0x12e>
			case TYPE_LONG: 	 return sprintf(buffer,"%l",*(signed long *)variable->value); break;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	4925      	ldr	r1, [pc, #148]	; (800b210 <varToString+0x140>)
 800b17c:	6838      	ldr	r0, [r7, #0]
 800b17e:	f003 fce7 	bl	800eb50 <siprintf>
 800b182:	4603      	mov	r3, r0
 800b184:	b2db      	uxtb	r3, r3
 800b186:	e03a      	b.n	800b1fe <varToString+0x12e>
			case TYPE_ULONG: 	 return sprintf(buffer,"%l",*(unsigned long *)variable->value); break;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	491f      	ldr	r1, [pc, #124]	; (800b210 <varToString+0x140>)
 800b192:	6838      	ldr	r0, [r7, #0]
 800b194:	f003 fcdc 	bl	800eb50 <siprintf>
 800b198:	4603      	mov	r3, r0
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	e02f      	b.n	800b1fe <varToString+0x12e>
		    case TYPE_FLOAT: 	 return sprintf(buffer,"%f",*(float *)variable->value); break;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f5 f9ab 	bl	8000500 <__aeabi_f2d>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4919      	ldr	r1, [pc, #100]	; (800b214 <varToString+0x144>)
 800b1b0:	6838      	ldr	r0, [r7, #0]
 800b1b2:	f003 fccd 	bl	800eb50 <siprintf>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	e020      	b.n	800b1fe <varToString+0x12e>
			case TYPE_DOUBLE: 	 return sprintf(buffer,"%f",*(double *)variable->value); break;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	4913      	ldr	r1, [pc, #76]	; (800b214 <varToString+0x144>)
 800b1c6:	6838      	ldr	r0, [r7, #0]
 800b1c8:	f003 fcc2 	bl	800eb50 <siprintf>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	e015      	b.n	800b1fe <varToString+0x12e>
			case TYPE_ASCIICHAR: return sprintf(buffer,"%c",*(char *)variable->value); break;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	490f      	ldr	r1, [pc, #60]	; (800b218 <varToString+0x148>)
 800b1dc:	6838      	ldr	r0, [r7, #0]
 800b1de:	f003 fcb7 	bl	800eb50 <siprintf>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	e00a      	b.n	800b1fe <varToString+0x12e>
			case TYPE_STRING: 	 return sprintf(buffer,"%s",(char *)(variable->value)); break;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	490b      	ldr	r1, [pc, #44]	; (800b21c <varToString+0x14c>)
 800b1f0:	6838      	ldr	r0, [r7, #0]
 800b1f2:	f003 fcad 	bl	800eb50 <siprintf>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	e000      	b.n	800b1fe <varToString+0x12e>
			default: return 0;
 800b1fc:	2300      	movs	r3, #0
	}
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	08012a8c 	.word	0x08012a8c
 800b20c:	08012a90 	.word	0x08012a90
 800b210:	08012a94 	.word	0x08012a94
 800b214:	08012a98 	.word	0x08012a98
 800b218:	08012a9c 	.word	0x08012a9c
 800b21c:	08012aa0 	.word	0x08012aa0

0800b220 <varRangeToString>:

uint8_t varRangeToString(parameter_record* variable, char *buffer)
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
	uint8_t answer = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	73fb      	strb	r3, [r7, #15]
	switch (variable->format){
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7c1b      	ldrb	r3, [r3, #16]
 800b232:	2b0a      	cmp	r3, #10
 800b234:	f200 8206 	bhi.w	800b644 <varRangeToString+0x424>
 800b238:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <varRangeToString+0x20>)
 800b23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23e:	bf00      	nop
 800b240:	0800b26d 	.word	0x0800b26d
 800b244:	0800b27b 	.word	0x0800b27b
 800b248:	0800b2d3 	.word	0x0800b2d3
 800b24c:	0800b329 	.word	0x0800b329
 800b250:	0800b381 	.word	0x0800b381
 800b254:	0800b3d9 	.word	0x0800b3d9
 800b258:	0800b42f 	.word	0x0800b42f
 800b25c:	0800b48f 	.word	0x0800b48f
 800b260:	0800b56f 	.word	0x0800b56f
 800b264:	0800b2d3 	.word	0x0800b2d3
 800b268:	0800b619 	.word	0x0800b619
			case TYPE_BOOL:		 return sprintf(buffer,"0:1:1"); break;
 800b26c:	499e      	ldr	r1, [pc, #632]	; (800b4e8 <varRangeToString+0x2c8>)
 800b26e:	6838      	ldr	r0, [r7, #0]
 800b270:	f003 fc6e 	bl	800eb50 <siprintf>
 800b274:	4603      	mov	r3, r0
 800b276:	b2db      	uxtb	r3, r3
 800b278:	e1e7      	b.n	800b64a <varRangeToString+0x42a>
			case TYPE_CHAR:
				answer +=sprintf(buffer+answer,"%i",(variable->dimensions > 0)?(*(char_dimensions *)variable->dimensions).minVal:-128);
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	18d0      	adds	r0, r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <varRangeToString+0x70>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	e001      	b.n	800b294 <varRangeToString+0x74>
 800b290:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800b294:	461a      	mov	r2, r3
 800b296:	4995      	ldr	r1, [pc, #596]	; (800b4ec <varRangeToString+0x2cc>)
 800b298:	f003 fc5a 	bl	800eb50 <siprintf>
 800b29c:	4603      	mov	r3, r0
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%i",(variable->dimensions > 0)?(*(char_dimensions *)variable->dimensions).maxVal:127);
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	18d0      	adds	r0, r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <varRangeToString+0x9c>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	e000      	b.n	800b2be <varRangeToString+0x9e>
 800b2bc:	237f      	movs	r3, #127	; 0x7f
 800b2be:	461a      	mov	r2, r3
 800b2c0:	498b      	ldr	r1, [pc, #556]	; (800b4f0 <varRangeToString+0x2d0>)
 800b2c2:	f003 fc45 	bl	800eb50 <siprintf>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	73fb      	strb	r3, [r7, #15]
				break;
 800b2d0:	e1ba      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_ASCIICHAR:
			case TYPE_UCHAR:
				answer +=sprintf(buffer+answer,"%u",(variable->dimensions > 0)?(*(uchar_dimensions *)variable->dimensions).minVal:0);
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	18d0      	adds	r0, r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <varRangeToString+0xc8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	e000      	b.n	800b2ea <varRangeToString+0xca>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4981      	ldr	r1, [pc, #516]	; (800b4f4 <varRangeToString+0x2d4>)
 800b2ee:	f003 fc2f 	bl	800eb50 <siprintf>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%u",(variable->dimensions > 0)?(*(uchar_dimensions *)variable->dimensions).maxVal:255);
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	18d0      	adds	r0, r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <varRangeToString+0xf2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	e000      	b.n	800b314 <varRangeToString+0xf4>
 800b312:	23ff      	movs	r3, #255	; 0xff
 800b314:	461a      	mov	r2, r3
 800b316:	4978      	ldr	r1, [pc, #480]	; (800b4f8 <varRangeToString+0x2d8>)
 800b318:	f003 fc1a 	bl	800eb50 <siprintf>
 800b31c:	4603      	mov	r3, r0
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	4413      	add	r3, r2
 800b324:	73fb      	strb	r3, [r7, #15]
				 break;
 800b326:	e18f      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_INT:
				answer +=sprintf(buffer+answer,"%i",(variable->dimensions > 0)?(*(int_dimensions *)variable->dimensions).minVal:-32768);
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	18d0      	adds	r0, r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <varRangeToString+0x11e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	e000      	b.n	800b340 <varRangeToString+0x120>
 800b33e:	4b6f      	ldr	r3, [pc, #444]	; (800b4fc <varRangeToString+0x2dc>)
 800b340:	461a      	mov	r2, r3
 800b342:	496a      	ldr	r1, [pc, #424]	; (800b4ec <varRangeToString+0x2cc>)
 800b344:	f003 fc04 	bl	800eb50 <siprintf>
 800b348:	4603      	mov	r3, r0
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	4413      	add	r3, r2
 800b350:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%i",(variable->dimensions > 0)?(*(int_dimensions *)variable->dimensions).maxVal:32767);
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	18d0      	adds	r0, r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <varRangeToString+0x148>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	e001      	b.n	800b36c <varRangeToString+0x14c>
 800b368:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b36c:	461a      	mov	r2, r3
 800b36e:	4960      	ldr	r1, [pc, #384]	; (800b4f0 <varRangeToString+0x2d0>)
 800b370:	f003 fbee 	bl	800eb50 <siprintf>
 800b374:	4603      	mov	r3, r0
 800b376:	b2da      	uxtb	r2, r3
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	4413      	add	r3, r2
 800b37c:	73fb      	strb	r3, [r7, #15]
				break;
 800b37e:	e163      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_UINT:
				answer +=sprintf(buffer+answer,"%u",(variable->dimensions > 0)?(*(uint_dimensions *)variable->dimensions).minVal:0);
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	18d0      	adds	r0, r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <varRangeToString+0x176>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	e000      	b.n	800b398 <varRangeToString+0x178>
 800b396:	2300      	movs	r3, #0
 800b398:	461a      	mov	r2, r3
 800b39a:	4956      	ldr	r1, [pc, #344]	; (800b4f4 <varRangeToString+0x2d4>)
 800b39c:	f003 fbd8 	bl	800eb50 <siprintf>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%u",(variable->dimensions > 0)?(*(uint_dimensions *)variable->dimensions).maxVal:65535);
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	18d0      	adds	r0, r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <varRangeToString+0x1a0>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	e001      	b.n	800b3c4 <varRangeToString+0x1a4>
 800b3c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	494c      	ldr	r1, [pc, #304]	; (800b4f8 <varRangeToString+0x2d8>)
 800b3c8:	f003 fbc2 	bl	800eb50 <siprintf>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	73fb      	strb	r3, [r7, #15]
				break;
 800b3d6:	e137      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_LONG:
				answer +=sprintf(buffer+answer,"%l",((variable->dimensions > 0)?(*(long_dimensions *)variable->dimensions).minVal:-2147483647));
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	18d0      	adds	r0, r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d003      	beq.n	800b3ee <varRangeToString+0x1ce>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	e000      	b.n	800b3f0 <varRangeToString+0x1d0>
 800b3ee:	4b44      	ldr	r3, [pc, #272]	; (800b500 <varRangeToString+0x2e0>)
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4944      	ldr	r1, [pc, #272]	; (800b504 <varRangeToString+0x2e4>)
 800b3f4:	f003 fbac 	bl	800eb50 <siprintf>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	4413      	add	r3, r2
 800b400:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%l",((variable->dimensions > 0)?(*(long_dimensions *)variable->dimensions).maxVal:-2147483647));
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	18d0      	adds	r0, r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <varRangeToString+0x1f8>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	e000      	b.n	800b41a <varRangeToString+0x1fa>
 800b418:	4b39      	ldr	r3, [pc, #228]	; (800b500 <varRangeToString+0x2e0>)
 800b41a:	461a      	mov	r2, r3
 800b41c:	493a      	ldr	r1, [pc, #232]	; (800b508 <varRangeToString+0x2e8>)
 800b41e:	f003 fb97 	bl	800eb50 <siprintf>
 800b422:	4603      	mov	r3, r0
 800b424:	b2da      	uxtb	r2, r3
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	4413      	add	r3, r2
 800b42a:	73fb      	strb	r3, [r7, #15]
				break;
 800b42c:	e10c      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_ULONG:
				answer +=sprintf(buffer+answer,"%lu",((variable->dimensions > 0)?(*(ulong_dimensions *)variable->dimensions).minVal:0));
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	18d0      	adds	r0, r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d003      	beq.n	800b444 <varRangeToString+0x224>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	e000      	b.n	800b446 <varRangeToString+0x226>
 800b444:	2300      	movs	r3, #0
 800b446:	461a      	mov	r2, r3
 800b448:	4930      	ldr	r1, [pc, #192]	; (800b50c <varRangeToString+0x2ec>)
 800b44a:	f003 fb81 	bl	800eb50 <siprintf>
 800b44e:	4603      	mov	r3, r0
 800b450:	b2da      	uxtb	r2, r3
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	4413      	add	r3, r2
 800b456:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%ll",((variable->dimensions > 0)?(*(ulong_dimensions *)variable->dimensions).maxVal:4294967295));
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	18d0      	adds	r0, r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d006      	beq.n	800b474 <varRangeToString+0x254>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	461a      	mov	r2, r3
 800b46e:	f04f 0300 	mov.w	r3, #0
 800b472:	e003      	b.n	800b47c <varRangeToString+0x25c>
 800b474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b478:	f04f 0300 	mov.w	r3, #0
 800b47c:	4924      	ldr	r1, [pc, #144]	; (800b510 <varRangeToString+0x2f0>)
 800b47e:	f003 fb67 	bl	800eb50 <siprintf>
 800b482:	4603      	mov	r3, r0
 800b484:	b2da      	uxtb	r2, r3
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	4413      	add	r3, r2
 800b48a:	73fb      	strb	r3, [r7, #15]
			break;
 800b48c:	e0dc      	b.n	800b648 <varRangeToString+0x428>
		    case TYPE_FLOAT:
		    	answer +=sprintf(buffer+answer,"%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).minVal:-100);
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	18d4      	adds	r4, r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <varRangeToString+0x28e>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7f5 f82c 	bl	8000500 <__aeabi_f2d>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	e002      	b.n	800b4b4 <varRangeToString+0x294>
 800b4ae:	f04f 0200 	mov.w	r2, #0
 800b4b2:	4b18      	ldr	r3, [pc, #96]	; (800b514 <varRangeToString+0x2f4>)
 800b4b4:	4918      	ldr	r1, [pc, #96]	; (800b518 <varRangeToString+0x2f8>)
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f003 fb4a 	bl	800eb50 <siprintf>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	73fb      	strb	r3, [r7, #15]
		    	answer +=sprintf(buffer+answer,":%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).maxVal:100);
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	18d4      	adds	r4, r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d023      	beq.n	800b51c <varRangeToString+0x2fc>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f5 f810 	bl	8000500 <__aeabi_f2d>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	e01d      	b.n	800b522 <varRangeToString+0x302>
 800b4e6:	bf00      	nop
 800b4e8:	08012aa4 	.word	0x08012aa4
 800b4ec:	08012a8c 	.word	0x08012a8c
 800b4f0:	08012aac 	.word	0x08012aac
 800b4f4:	08012ab0 	.word	0x08012ab0
 800b4f8:	08012ab4 	.word	0x08012ab4
 800b4fc:	ffff8000 	.word	0xffff8000
 800b500:	80000001 	.word	0x80000001
 800b504:	08012a94 	.word	0x08012a94
 800b508:	08012ab8 	.word	0x08012ab8
 800b50c:	08012abc 	.word	0x08012abc
 800b510:	08012ac0 	.word	0x08012ac0
 800b514:	c0590000 	.word	0xc0590000
 800b518:	08012a98 	.word	0x08012a98
 800b51c:	f04f 0200 	mov.w	r2, #0
 800b520:	4b4f      	ldr	r3, [pc, #316]	; (800b660 <varRangeToString+0x440>)
 800b522:	4950      	ldr	r1, [pc, #320]	; (800b664 <varRangeToString+0x444>)
 800b524:	4620      	mov	r0, r4
 800b526:	f003 fb13 	bl	800eb50 <siprintf>
 800b52a:	4603      	mov	r3, r0
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	4413      	add	r3, r2
 800b532:	73fb      	strb	r3, [r7, #15]
		    	answer +=sprintf(buffer+answer,":%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).defaultStep:0.01);
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	18d4      	adds	r4, r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d008      	beq.n	800b554 <varRangeToString+0x334>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f4 ffd9 	bl	8000500 <__aeabi_f2d>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	e002      	b.n	800b55a <varRangeToString+0x33a>
 800b554:	a340      	add	r3, pc, #256	; (adr r3, 800b658 <varRangeToString+0x438>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	4942      	ldr	r1, [pc, #264]	; (800b664 <varRangeToString+0x444>)
 800b55c:	4620      	mov	r0, r4
 800b55e:	f003 faf7 	bl	800eb50 <siprintf>
 800b562:	4603      	mov	r3, r0
 800b564:	b2da      	uxtb	r2, r3
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	4413      	add	r3, r2
 800b56a:	73fb      	strb	r3, [r7, #15]
		    	break;
 800b56c:	e06c      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_DOUBLE:
				answer +=sprintf(buffer+answer,"%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).minVal:-100);
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	18d4      	adds	r4, r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	695b      	ldr	r3, [r3, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d008      	beq.n	800b58e <varRangeToString+0x36e>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4618      	mov	r0, r3
 800b584:	f7f4 ffbc 	bl	8000500 <__aeabi_f2d>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	e002      	b.n	800b594 <varRangeToString+0x374>
 800b58e:	f04f 0200 	mov.w	r2, #0
 800b592:	4b35      	ldr	r3, [pc, #212]	; (800b668 <varRangeToString+0x448>)
 800b594:	4935      	ldr	r1, [pc, #212]	; (800b66c <varRangeToString+0x44c>)
 800b596:	4620      	mov	r0, r4
 800b598:	f003 fada 	bl	800eb50 <siprintf>
 800b59c:	4603      	mov	r3, r0
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).maxVal:100);
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	18d4      	adds	r4, r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d008      	beq.n	800b5c6 <varRangeToString+0x3a6>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f4 ffa0 	bl	8000500 <__aeabi_f2d>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	e002      	b.n	800b5cc <varRangeToString+0x3ac>
 800b5c6:	f04f 0200 	mov.w	r2, #0
 800b5ca:	4b25      	ldr	r3, [pc, #148]	; (800b660 <varRangeToString+0x440>)
 800b5cc:	4925      	ldr	r1, [pc, #148]	; (800b664 <varRangeToString+0x444>)
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f003 fabe 	bl	800eb50 <siprintf>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	4413      	add	r3, r2
 800b5dc:	73fb      	strb	r3, [r7, #15]
				answer +=sprintf(buffer+answer,":%f",(variable->dimensions > 0)?(*(float_dimensions *)variable->dimensions).defaultStep:0.01);
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	18d4      	adds	r4, r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d008      	beq.n	800b5fe <varRangeToString+0x3de>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7f4 ff84 	bl	8000500 <__aeabi_f2d>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	e002      	b.n	800b604 <varRangeToString+0x3e4>
 800b5fe:	a316      	add	r3, pc, #88	; (adr r3, 800b658 <varRangeToString+0x438>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	4917      	ldr	r1, [pc, #92]	; (800b664 <varRangeToString+0x444>)
 800b606:	4620      	mov	r0, r4
 800b608:	f003 faa2 	bl	800eb50 <siprintf>
 800b60c:	4603      	mov	r3, r0
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	4413      	add	r3, r2
 800b614:	73fb      	strb	r3, [r7, #15]
			break;
 800b616:	e017      	b.n	800b648 <varRangeToString+0x428>
			case TYPE_STRING:
				answer += sprintf(buffer+answer,"%i",(variable->dimensions > 0)?(*(string_dimensions *)variable->dimensions).charsCount:32);
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	18d0      	adds	r0, r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <varRangeToString+0x40e>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	e000      	b.n	800b630 <varRangeToString+0x410>
 800b62e:	2320      	movs	r3, #32
 800b630:	461a      	mov	r2, r3
 800b632:	490f      	ldr	r1, [pc, #60]	; (800b670 <varRangeToString+0x450>)
 800b634:	f003 fa8c 	bl	800eb50 <siprintf>
 800b638:	4603      	mov	r3, r0
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4413      	add	r3, r2
 800b640:	73fb      	strb	r3, [r7, #15]
				break;
 800b642:	e001      	b.n	800b648 <varRangeToString+0x428>
			default: return 0;
 800b644:	2300      	movs	r3, #0
 800b646:	e000      	b.n	800b64a <varRangeToString+0x42a>
	}
	return answer;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd90      	pop	{r4, r7, pc}
 800b652:	bf00      	nop
 800b654:	f3af 8000 	nop.w
 800b658:	47ae147b 	.word	0x47ae147b
 800b65c:	3f847ae1 	.word	0x3f847ae1
 800b660:	40590000 	.word	0x40590000
 800b664:	08012ac8 	.word	0x08012ac8
 800b668:	c0590000 	.word	0xc0590000
 800b66c:	08012a98 	.word	0x08012a98
 800b670:	08012a8c 	.word	0x08012a8c

0800b674 <parseCommand>:
/**
 * Расшифровываем, чаво хотели от микрухи
 */
uint32_t parseCommand(char *rx_buffer, uint32_t rx_seek, char *tx_buffer)
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b08b      	sub	sp, #44	; 0x2c
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
	_chars_to_send = 0;
 800b680:	4bad      	ldr	r3, [pc, #692]	; (800b938 <parseCommand+0x2c4>)
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
	unsigned int idxOfCharInBuffer = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int idxOfParameter = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	623b      	str	r3, [r7, #32]

	int8_t var_idx = -1;
 800b68e:	23ff      	movs	r3, #255	; 0xff
 800b690:	77fb      	strb	r3, [r7, #31]
	while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!=' '){
 800b692:	e00b      	b.n	800b6ac <parseCommand+0x38>
		_command_text[idxOfCharInBuffer] = rx_buffer[idxOfCharInBuffer];
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	4413      	add	r3, r2
 800b69a:	7819      	ldrb	r1, [r3, #0]
 800b69c:	4aa7      	ldr	r2, [pc, #668]	; (800b93c <parseCommand+0x2c8>)
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	4413      	add	r3, r2
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	701a      	strb	r2, [r3, #0]
		idxOfCharInBuffer++;
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
	while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!=' '){
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	4413      	add	r3, r2
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d005      	beq.n	800b6c4 <parseCommand+0x50>
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	4413      	add	r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b20      	cmp	r3, #32
 800b6c2:	d1e7      	bne.n	800b694 <parseCommand+0x20>
	}
	_current_command = -1;
 800b6c4:	4b9e      	ldr	r3, [pc, #632]	; (800b940 <parseCommand+0x2cc>)
 800b6c6:	22ff      	movs	r2, #255	; 0xff
 800b6c8:	701a      	strb	r2, [r3, #0]
	if (strncmp(strlwr(_command_text), "ok",2)== 0){
 800b6ca:	489c      	ldr	r0, [pc, #624]	; (800b93c <parseCommand+0x2c8>)
 800b6cc:	f003 fa60 	bl	800eb90 <strlwr>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	499b      	ldr	r1, [pc, #620]	; (800b944 <parseCommand+0x2d0>)
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f003 fa6c 	bl	800ebb4 <strncmp>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d102      	bne.n	800b6e8 <parseCommand+0x74>
			_current_command = COMMAND_ECHO_OK;
 800b6e2:	4b97      	ldr	r3, [pc, #604]	; (800b940 <parseCommand+0x2cc>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	701a      	strb	r2, [r3, #0]
		}
	if (strncmp(strlwr(_command_text), "list",4)== 0){
 800b6e8:	4894      	ldr	r0, [pc, #592]	; (800b93c <parseCommand+0x2c8>)
 800b6ea:	f003 fa51 	bl	800eb90 <strlwr>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2204      	movs	r2, #4
 800b6f2:	4995      	ldr	r1, [pc, #596]	; (800b948 <parseCommand+0x2d4>)
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f003 fa5d 	bl	800ebb4 <strncmp>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <parseCommand+0x92>
				_current_command = COMMAND_LIST_OF_VARIABLES;
 800b700:	4b8f      	ldr	r3, [pc, #572]	; (800b940 <parseCommand+0x2cc>)
 800b702:	2201      	movs	r2, #1
 800b704:	701a      	strb	r2, [r3, #0]
			}
	if (strncmp(strlwr(_command_text), "get",3)== 0){
 800b706:	488d      	ldr	r0, [pc, #564]	; (800b93c <parseCommand+0x2c8>)
 800b708:	f003 fa42 	bl	800eb90 <strlwr>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2203      	movs	r2, #3
 800b710:	498e      	ldr	r1, [pc, #568]	; (800b94c <parseCommand+0x2d8>)
 800b712:	4618      	mov	r0, r3
 800b714:	f003 fa4e 	bl	800ebb4 <strncmp>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <parseCommand+0xb0>
						_current_command = COMMAND_GET_VARIABLE;
 800b71e:	4b88      	ldr	r3, [pc, #544]	; (800b940 <parseCommand+0x2cc>)
 800b720:	2203      	movs	r2, #3
 800b722:	701a      	strb	r2, [r3, #0]
					}
	if (strncmp(strlwr(_command_text), "set",3)== 0){
 800b724:	4885      	ldr	r0, [pc, #532]	; (800b93c <parseCommand+0x2c8>)
 800b726:	f003 fa33 	bl	800eb90 <strlwr>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2203      	movs	r2, #3
 800b72e:	4988      	ldr	r1, [pc, #544]	; (800b950 <parseCommand+0x2dc>)
 800b730:	4618      	mov	r0, r3
 800b732:	f003 fa3f 	bl	800ebb4 <strncmp>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <parseCommand+0xce>
							_current_command = COMMAND_SET_VARIABLE;
 800b73c:	4b80      	ldr	r3, [pc, #512]	; (800b940 <parseCommand+0x2cc>)
 800b73e:	2204      	movs	r2, #4
 800b740:	701a      	strb	r2, [r3, #0]
						}
	if (strncmp(strlwr(_command_text), "run",3)== 0){
 800b742:	487e      	ldr	r0, [pc, #504]	; (800b93c <parseCommand+0x2c8>)
 800b744:	f003 fa24 	bl	800eb90 <strlwr>
 800b748:	4603      	mov	r3, r0
 800b74a:	2203      	movs	r2, #3
 800b74c:	4981      	ldr	r1, [pc, #516]	; (800b954 <parseCommand+0x2e0>)
 800b74e:	4618      	mov	r0, r3
 800b750:	f003 fa30 	bl	800ebb4 <strncmp>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d102      	bne.n	800b760 <parseCommand+0xec>
							_current_command = COMMAND_RUN;
 800b75a:	4b79      	ldr	r3, [pc, #484]	; (800b940 <parseCommand+0x2cc>)
 800b75c:	2205      	movs	r2, #5
 800b75e:	701a      	strb	r2, [r3, #0]
						}
	if (strncmp(strlwr(_command_text), "runnable",8)== 0){
 800b760:	4876      	ldr	r0, [pc, #472]	; (800b93c <parseCommand+0x2c8>)
 800b762:	f003 fa15 	bl	800eb90 <strlwr>
 800b766:	4603      	mov	r3, r0
 800b768:	2208      	movs	r2, #8
 800b76a:	497b      	ldr	r1, [pc, #492]	; (800b958 <parseCommand+0x2e4>)
 800b76c:	4618      	mov	r0, r3
 800b76e:	f003 fa21 	bl	800ebb4 <strncmp>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <parseCommand+0x10a>
						_current_command = COMMAND_LIST_OF_COMMANDS;
 800b778:	4b71      	ldr	r3, [pc, #452]	; (800b940 <parseCommand+0x2cc>)
 800b77a:	2202      	movs	r2, #2
 800b77c:	701a      	strb	r2, [r3, #0]
					}

	switch(_current_command)
 800b77e:	4b70      	ldr	r3, [pc, #448]	; (800b940 <parseCommand+0x2cc>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b05      	cmp	r3, #5
 800b784:	f200 8476 	bhi.w	800c074 <parseCommand+0xa00>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <parseCommand+0x11c>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800c095 	.word	0x0800c095
 800b794:	0800b7a9 	.word	0x0800b7a9
 800b798:	0800b931 	.word	0x0800b931
 800b79c:	0800b9f5 	.word	0x0800b9f5
 800b7a0:	0800bad3 	.word	0x0800bad3
 800b7a4:	0800bf5b 	.word	0x0800bf5b
	 *  получили LIST - отвечаем списком доступных для редактирования переменных
	 *  (если границы не определены - выводим дефолтные для типа)
	 */
	case COMMAND_LIST_OF_VARIABLES:

		for (idxOfParameter = 0; idxOfParameter<p_count;idxOfParameter++)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	623b      	str	r3, [r7, #32]
 800b7ac:	e0b8      	b.n	800b920 <parseCommand+0x2ac>
		{
		if (p_pointer[idxOfParameter].format < TYPE_MACROS) {
 800b7ae:	4b6b      	ldr	r3, [pc, #428]	; (800b95c <parseCommand+0x2e8>)
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	6a3a      	ldr	r2, [r7, #32]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	1a9b      	subs	r3, r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	440b      	add	r3, r1
 800b7be:	7c1b      	ldrb	r3, [r3, #16]
 800b7c0:	2b0a      	cmp	r3, #10
 800b7c2:	f200 80aa 	bhi.w	800b91a <parseCommand+0x2a6>
			_chars_to_send += sprintf(tx_buffer+_chars_to_send,"%s ",p_pointer[idxOfParameter].name); //имя
 800b7c6:	4b5c      	ldr	r3, [pc, #368]	; (800b938 <parseCommand+0x2c4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	18d0      	adds	r0, r2, r3
 800b7ce:	4b63      	ldr	r3, [pc, #396]	; (800b95c <parseCommand+0x2e8>)
 800b7d0:	6819      	ldr	r1, [r3, #0]
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	440b      	add	r3, r1
 800b7de:	461a      	mov	r2, r3
 800b7e0:	495f      	ldr	r1, [pc, #380]	; (800b960 <parseCommand+0x2ec>)
 800b7e2:	f003 f9b5 	bl	800eb50 <siprintf>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	4b53      	ldr	r3, [pc, #332]	; (800b938 <parseCommand+0x2c4>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	4a51      	ldr	r2, [pc, #324]	; (800b938 <parseCommand+0x2c4>)
 800b7f2:	6013      	str	r3, [r2, #0]
				switch (p_pointer[idxOfParameter].format){
 800b7f4:	4b59      	ldr	r3, [pc, #356]	; (800b95c <parseCommand+0x2e8>)
 800b7f6:	6819      	ldr	r1, [r3, #0]
 800b7f8:	6a3a      	ldr	r2, [r7, #32]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	7c1b      	ldrb	r3, [r3, #16]
 800b806:	2b0a      	cmp	r3, #10
 800b808:	dc3a      	bgt.n	800b880 <parseCommand+0x20c>
 800b80a:	2b09      	cmp	r3, #9
 800b80c:	da28      	bge.n	800b860 <parseCommand+0x1ec>
 800b80e:	2b06      	cmp	r3, #6
 800b810:	dc02      	bgt.n	800b818 <parseCommand+0x1a4>
 800b812:	2b00      	cmp	r3, #0
 800b814:	da04      	bge.n	800b820 <parseCommand+0x1ac>
 800b816:	e033      	b.n	800b880 <parseCommand+0x20c>
 800b818:	3b07      	subs	r3, #7
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d830      	bhi.n	800b880 <parseCommand+0x20c>
 800b81e:	e00f      	b.n	800b840 <parseCommand+0x1cc>
					case TYPE_CHAR:
					case TYPE_UCHAR:
					case TYPE_INT:
					case TYPE_UINT:
					case TYPE_LONG:
					case TYPE_ULONG: _chars_to_send += sprintf(tx_buffer+_chars_to_send,"int ["); break;
 800b820:	4b45      	ldr	r3, [pc, #276]	; (800b938 <parseCommand+0x2c4>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	4413      	add	r3, r2
 800b828:	494e      	ldr	r1, [pc, #312]	; (800b964 <parseCommand+0x2f0>)
 800b82a:	4618      	mov	r0, r3
 800b82c:	f003 f990 	bl	800eb50 <siprintf>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	4b40      	ldr	r3, [pc, #256]	; (800b938 <parseCommand+0x2c4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	4a3f      	ldr	r2, [pc, #252]	; (800b938 <parseCommand+0x2c4>)
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	e01f      	b.n	800b880 <parseCommand+0x20c>
					case TYPE_FLOAT:
					case TYPE_DOUBLE: _chars_to_send += sprintf(tx_buffer+_chars_to_send,"flt ["); break;
 800b840:	4b3d      	ldr	r3, [pc, #244]	; (800b938 <parseCommand+0x2c4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	4413      	add	r3, r2
 800b848:	4947      	ldr	r1, [pc, #284]	; (800b968 <parseCommand+0x2f4>)
 800b84a:	4618      	mov	r0, r3
 800b84c:	f003 f980 	bl	800eb50 <siprintf>
 800b850:	4603      	mov	r3, r0
 800b852:	461a      	mov	r2, r3
 800b854:	4b38      	ldr	r3, [pc, #224]	; (800b938 <parseCommand+0x2c4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4413      	add	r3, r2
 800b85a:	4a37      	ldr	r2, [pc, #220]	; (800b938 <parseCommand+0x2c4>)
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	e00f      	b.n	800b880 <parseCommand+0x20c>
					case TYPE_ASCIICHAR:
					case TYPE_STRING: _chars_to_send += sprintf(tx_buffer+_chars_to_send,"str ["); break;
 800b860:	4b35      	ldr	r3, [pc, #212]	; (800b938 <parseCommand+0x2c4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	4413      	add	r3, r2
 800b868:	4940      	ldr	r1, [pc, #256]	; (800b96c <parseCommand+0x2f8>)
 800b86a:	4618      	mov	r0, r3
 800b86c:	f003 f970 	bl	800eb50 <siprintf>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	4b30      	ldr	r3, [pc, #192]	; (800b938 <parseCommand+0x2c4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4413      	add	r3, r2
 800b87a:	4a2f      	ldr	r2, [pc, #188]	; (800b938 <parseCommand+0x2c4>)
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	bf00      	nop
					}
				_chars_to_send += varRangeToString(&p_pointer[idxOfParameter], tx_buffer+_chars_to_send);
 800b880:	4b36      	ldr	r3, [pc, #216]	; (800b95c <parseCommand+0x2e8>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6a3a      	ldr	r2, [r7, #32]
 800b886:	4613      	mov	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	18c8      	adds	r0, r1, r3
 800b890:	4b29      	ldr	r3, [pc, #164]	; (800b938 <parseCommand+0x2c4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	4413      	add	r3, r2
 800b898:	4619      	mov	r1, r3
 800b89a:	f7ff fcc1 	bl	800b220 <varRangeToString>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4b25      	ldr	r3, [pc, #148]	; (800b938 <parseCommand+0x2c4>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	4a23      	ldr	r2, [pc, #140]	; (800b938 <parseCommand+0x2c4>)
 800b8aa:	6013      	str	r3, [r2, #0]
				_chars_to_send += sprintf(tx_buffer+_chars_to_send,"]=");
 800b8ac:	4b22      	ldr	r3, [pc, #136]	; (800b938 <parseCommand+0x2c4>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	492e      	ldr	r1, [pc, #184]	; (800b970 <parseCommand+0x2fc>)
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f003 f94a 	bl	800eb50 <siprintf>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	4b1d      	ldr	r3, [pc, #116]	; (800b938 <parseCommand+0x2c4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	4a1c      	ldr	r2, [pc, #112]	; (800b938 <parseCommand+0x2c4>)
 800b8c8:	6013      	str	r3, [r2, #0]
				_chars_to_send += varToString(&p_pointer[idxOfParameter], tx_buffer+_chars_to_send);
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <parseCommand+0x2e8>)
 800b8cc:	6819      	ldr	r1, [r3, #0]
 800b8ce:	6a3a      	ldr	r2, [r7, #32]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	18c8      	adds	r0, r1, r3
 800b8da:	4b17      	ldr	r3, [pc, #92]	; (800b938 <parseCommand+0x2c4>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f7ff fbf4 	bl	800b0d0 <varToString>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b12      	ldr	r3, [pc, #72]	; (800b938 <parseCommand+0x2c4>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	4a11      	ldr	r2, [pc, #68]	; (800b938 <parseCommand+0x2c4>)
 800b8f4:	6013      	str	r3, [r2, #0]
#if(defined TX_END_CRLF || defined TX_END_CR)
				tx_buffer[_chars_to_send++]='\r';
 800b8f6:	4b10      	ldr	r3, [pc, #64]	; (800b938 <parseCommand+0x2c4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	490e      	ldr	r1, [pc, #56]	; (800b938 <parseCommand+0x2c4>)
 800b8fe:	600a      	str	r2, [r1, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4413      	add	r3, r2
 800b904:	220d      	movs	r2, #13
 800b906:	701a      	strb	r2, [r3, #0]
#endif
#if(defined TX_END_CRLF || defined TX_END_LF)
				tx_buffer[_chars_to_send++]='\n';
 800b908:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <parseCommand+0x2c4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	490a      	ldr	r1, [pc, #40]	; (800b938 <parseCommand+0x2c4>)
 800b910:	600a      	str	r2, [r1, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	220a      	movs	r2, #10
 800b918:	701a      	strb	r2, [r3, #0]
		for (idxOfParameter = 0; idxOfParameter<p_count;idxOfParameter++)
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	3301      	adds	r3, #1
 800b91e:	623b      	str	r3, [r7, #32]
 800b920:	4b14      	ldr	r3, [pc, #80]	; (800b974 <parseCommand+0x300>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	4293      	cmp	r3, r2
 800b92a:	f4ff af40 	bcc.w	800b7ae <parseCommand+0x13a>
#endif
		}
	}

		break;
 800b92e:	e3b2      	b.n	800c096 <parseCommand+0xa22>
		/*
		 *  получили RUNNABLE - отвечаем списком доступных для вызова макросов
		 */
	case COMMAND_LIST_OF_COMMANDS:
		for (idxOfParameter = 0; idxOfParameter<p_count;idxOfParameter++)
 800b930:	2300      	movs	r3, #0
 800b932:	623b      	str	r3, [r7, #32]
 800b934:	e057      	b.n	800b9e6 <parseCommand+0x372>
 800b936:	bf00      	nop
 800b938:	200004f4 	.word	0x200004f4
 800b93c:	200004fc 	.word	0x200004fc
 800b940:	200000a0 	.word	0x200000a0
 800b944:	08012acc 	.word	0x08012acc
 800b948:	08012ad0 	.word	0x08012ad0
 800b94c:	08012ad8 	.word	0x08012ad8
 800b950:	08012adc 	.word	0x08012adc
 800b954:	08012ae0 	.word	0x08012ae0
 800b958:	08012ae4 	.word	0x08012ae4
 800b95c:	200013e4 	.word	0x200013e4
 800b960:	08012af0 	.word	0x08012af0
 800b964:	08012af4 	.word	0x08012af4
 800b968:	08012afc 	.word	0x08012afc
 800b96c:	08012b04 	.word	0x08012b04
 800b970:	08012b0c 	.word	0x08012b0c
 800b974:	200013e8 	.word	0x200013e8
				{
				if (p_pointer[idxOfParameter].format == TYPE_MACROS)
 800b978:	4ba6      	ldr	r3, [pc, #664]	; (800bc14 <parseCommand+0x5a0>)
 800b97a:	6819      	ldr	r1, [r3, #0]
 800b97c:	6a3a      	ldr	r2, [r7, #32]
 800b97e:	4613      	mov	r3, r2
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	7c1b      	ldrb	r3, [r3, #16]
 800b98a:	2b0b      	cmp	r3, #11
 800b98c:	d116      	bne.n	800b9bc <parseCommand+0x348>
				_chars_to_send += sprintf(tx_buffer+_chars_to_send,"%s ",p_pointer[idxOfParameter].name); //имя
 800b98e:	4ba2      	ldr	r3, [pc, #648]	; (800bc18 <parseCommand+0x5a4>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	18d0      	adds	r0, r2, r3
 800b996:	4b9f      	ldr	r3, [pc, #636]	; (800bc14 <parseCommand+0x5a0>)
 800b998:	6819      	ldr	r1, [r3, #0]
 800b99a:	6a3a      	ldr	r2, [r7, #32]
 800b99c:	4613      	mov	r3, r2
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	1a9b      	subs	r3, r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	440b      	add	r3, r1
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	499c      	ldr	r1, [pc, #624]	; (800bc1c <parseCommand+0x5a8>)
 800b9aa:	f003 f8d1 	bl	800eb50 <siprintf>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4b99      	ldr	r3, [pc, #612]	; (800bc18 <parseCommand+0x5a4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	4a97      	ldr	r2, [pc, #604]	; (800bc18 <parseCommand+0x5a4>)
 800b9ba:	6013      	str	r3, [r2, #0]
#if(defined TX_END_CRLF || defined TX_END_CR)
				tx_buffer[_chars_to_send++]='\r';
 800b9bc:	4b96      	ldr	r3, [pc, #600]	; (800bc18 <parseCommand+0x5a4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	4995      	ldr	r1, [pc, #596]	; (800bc18 <parseCommand+0x5a4>)
 800b9c4:	600a      	str	r2, [r1, #0]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	220d      	movs	r2, #13
 800b9cc:	701a      	strb	r2, [r3, #0]
#endif
#if(defined TX_END_CRLF || defined TX_END_LF)
				tx_buffer[_chars_to_send++]='\n';
 800b9ce:	4b92      	ldr	r3, [pc, #584]	; (800bc18 <parseCommand+0x5a4>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	4990      	ldr	r1, [pc, #576]	; (800bc18 <parseCommand+0x5a4>)
 800b9d6:	600a      	str	r2, [r1, #0]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	4413      	add	r3, r2
 800b9dc:	220a      	movs	r2, #10
 800b9de:	701a      	strb	r2, [r3, #0]
		for (idxOfParameter = 0; idxOfParameter<p_count;idxOfParameter++)
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	4b8e      	ldr	r3, [pc, #568]	; (800bc20 <parseCommand+0x5ac>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d3c2      	bcc.n	800b978 <parseCommand+0x304>
#endif
				}
		break;
 800b9f2:	e350      	b.n	800c096 <parseCommand+0xa22>
		/*
		 *  получили RUNNABLE - отвечаем списком доступных для вызова макросов
		 */

	case COMMAND_GET_VARIABLE:
		clearCommandBuffer();
 800b9f4:	f7ff fb2a 	bl	800b04c <clearCommandBuffer>
		_var_name_length = 0;
 800b9f8:	4b8a      	ldr	r3, [pc, #552]	; (800bc24 <parseCommand+0x5b0>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
		while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800b9fe:	e015      	b.n	800ba2c <parseCommand+0x3b8>
					if (rx_buffer[idxOfCharInBuffer] !=' '){
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	4413      	add	r3, r2
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b20      	cmp	r3, #32
 800ba0a:	d00c      	beq.n	800ba26 <parseCommand+0x3b2>
						_command_text[_var_name_length] = rx_buffer[idxOfCharInBuffer]; //записываем
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	441a      	add	r2, r3
 800ba12:	4b84      	ldr	r3, [pc, #528]	; (800bc24 <parseCommand+0x5b0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	7811      	ldrb	r1, [r2, #0]
 800ba18:	4a83      	ldr	r2, [pc, #524]	; (800bc28 <parseCommand+0x5b4>)
 800ba1a:	54d1      	strb	r1, [r2, r3]
						_var_name_length++;
 800ba1c:	4b81      	ldr	r3, [pc, #516]	; (800bc24 <parseCommand+0x5b0>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	4a80      	ldr	r2, [pc, #512]	; (800bc24 <parseCommand+0x5b0>)
 800ba24:	6013      	str	r3, [r2, #0]
					}
					idxOfCharInBuffer++;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	3301      	adds	r3, #1
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
		while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	4413      	add	r3, r2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <parseCommand+0x3dc>
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b0d      	cmp	r3, #13
 800ba42:	d005      	beq.n	800ba50 <parseCommand+0x3dc>
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	4413      	add	r3, r2
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b0a      	cmp	r3, #10
 800ba4e:	d1d7      	bne.n	800ba00 <parseCommand+0x38c>
				}

		var_idx = getIndexOfVariable(_command_text);
 800ba50:	4875      	ldr	r0, [pc, #468]	; (800bc28 <parseCommand+0x5b4>)
 800ba52:	f7ff fac9 	bl	800afe8 <getIndexOfVariable>
 800ba56:	4603      	mov	r3, r0
 800ba58:	77fb      	strb	r3, [r7, #31]

		if (var_idx == -1) {
 800ba5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba62:	d10f      	bne.n	800ba84 <parseCommand+0x410>
			_chars_to_send += sprintf(tx_buffer+_chars_to_send,"UNKNOWN_VARIABLE\n");
 800ba64:	4b6c      	ldr	r3, [pc, #432]	; (800bc18 <parseCommand+0x5a4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	496f      	ldr	r1, [pc, #444]	; (800bc2c <parseCommand+0x5b8>)
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f003 f86e 	bl	800eb50 <siprintf>
 800ba74:	4603      	mov	r3, r0
 800ba76:	461a      	mov	r2, r3
 800ba78:	4b67      	ldr	r3, [pc, #412]	; (800bc18 <parseCommand+0x5a4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	4a66      	ldr	r2, [pc, #408]	; (800bc18 <parseCommand+0x5a4>)
 800ba80:	6013      	str	r3, [r2, #0]
#if(defined TX_END_CRLF || defined TX_END_LF)
				tx_buffer[_chars_to_send++]='\n';
#endif
		}

	break; // получили GET @VAR - отвечаем текстовым эквивалентом значения этой переменной в зависимости от её типа
 800ba82:	e308      	b.n	800c096 <parseCommand+0xa22>
			_chars_to_send += varToString(&p_pointer[var_idx], tx_buffer);
 800ba84:	4b63      	ldr	r3, [pc, #396]	; (800bc14 <parseCommand+0x5a0>)
 800ba86:	6819      	ldr	r1, [r3, #0]
 800ba88:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	1a9b      	subs	r3, r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	440b      	add	r3, r1
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fb19 	bl	800b0d0 <varToString>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	4b5d      	ldr	r3, [pc, #372]	; (800bc18 <parseCommand+0x5a4>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4413      	add	r3, r2
 800baa8:	4a5b      	ldr	r2, [pc, #364]	; (800bc18 <parseCommand+0x5a4>)
 800baaa:	6013      	str	r3, [r2, #0]
				tx_buffer[_chars_to_send++]='\r';
 800baac:	4b5a      	ldr	r3, [pc, #360]	; (800bc18 <parseCommand+0x5a4>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	4959      	ldr	r1, [pc, #356]	; (800bc18 <parseCommand+0x5a4>)
 800bab4:	600a      	str	r2, [r1, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	220d      	movs	r2, #13
 800babc:	701a      	strb	r2, [r3, #0]
				tx_buffer[_chars_to_send++]='\n';
 800babe:	4b56      	ldr	r3, [pc, #344]	; (800bc18 <parseCommand+0x5a4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	4954      	ldr	r1, [pc, #336]	; (800bc18 <parseCommand+0x5a4>)
 800bac6:	600a      	str	r2, [r1, #0]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	220a      	movs	r2, #10
 800bace:	701a      	strb	r2, [r3, #0]
	break; // получили GET @VAR - отвечаем текстовым эквивалентом значения этой переменной в зависимости от её типа
 800bad0:	e2e1      	b.n	800c096 <parseCommand+0xa22>
	case COMMAND_SET_VARIABLE:
		clearCommandBuffer();
 800bad2:	f7ff fabb 	bl	800b04c <clearCommandBuffer>
			_var_name_length = 0;
 800bad6:	4b53      	ldr	r3, [pc, #332]	; (800bc24 <parseCommand+0x5b0>)
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
			while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='=' && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800badc:	e015      	b.n	800bb0a <parseCommand+0x496>
						if (rx_buffer[idxOfCharInBuffer] !=' '){
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	4413      	add	r3, r2
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d00c      	beq.n	800bb04 <parseCommand+0x490>
							_command_text[_var_name_length] = rx_buffer[idxOfCharInBuffer]; //записываем
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	441a      	add	r2, r3
 800baf0:	4b4c      	ldr	r3, [pc, #304]	; (800bc24 <parseCommand+0x5b0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	7811      	ldrb	r1, [r2, #0]
 800baf6:	4a4c      	ldr	r2, [pc, #304]	; (800bc28 <parseCommand+0x5b4>)
 800baf8:	54d1      	strb	r1, [r2, r3]
							_var_name_length++;
 800bafa:	4b4a      	ldr	r3, [pc, #296]	; (800bc24 <parseCommand+0x5b0>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	4a48      	ldr	r2, [pc, #288]	; (800bc24 <parseCommand+0x5b0>)
 800bb02:	6013      	str	r3, [r2, #0]
						}
						idxOfCharInBuffer++;
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	3301      	adds	r3, #1
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
			while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='=' && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	4413      	add	r3, r2
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d011      	beq.n	800bb3a <parseCommand+0x4c6>
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	4413      	add	r3, r2
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b3d      	cmp	r3, #61	; 0x3d
 800bb20:	d00b      	beq.n	800bb3a <parseCommand+0x4c6>
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	4413      	add	r3, r2
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2b0d      	cmp	r3, #13
 800bb2c:	d005      	beq.n	800bb3a <parseCommand+0x4c6>
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	4413      	add	r3, r2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b0a      	cmp	r3, #10
 800bb38:	d1d1      	bne.n	800bade <parseCommand+0x46a>
					}
			var_idx = getIndexOfVariable(_command_text);
 800bb3a:	483b      	ldr	r0, [pc, #236]	; (800bc28 <parseCommand+0x5b4>)
 800bb3c:	f7ff fa54 	bl	800afe8 <getIndexOfVariable>
 800bb40:	4603      	mov	r3, r0
 800bb42:	77fb      	strb	r3, [r7, #31]
			int16_t seek = seekToChar(rx_buffer, 1024,'=');
 800bb44:	223d      	movs	r2, #61	; 0x3d
 800bb46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff fa9c 	bl	800b088 <seekToChar>
 800bb50:	4603      	mov	r3, r0
 800bb52:	82fb      	strh	r3, [r7, #22]
			if (seek == -1)
 800bb54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb5c:	d108      	bne.n	800bb70 <parseCommand+0x4fc>
				_chars_to_send = sprintf(tx_buffer, "VALUE_NOT_FOUND");
 800bb5e:	4934      	ldr	r1, [pc, #208]	; (800bc30 <parseCommand+0x5bc>)
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f002 fff5 	bl	800eb50 <siprintf>
 800bb66:	4603      	mov	r3, r0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4b2b      	ldr	r3, [pc, #172]	; (800bc18 <parseCommand+0x5a4>)
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	e1ca      	b.n	800bf06 <parseCommand+0x892>
			else
			switch (p_pointer[var_idx].format){
 800bb70:	4b28      	ldr	r3, [pc, #160]	; (800bc14 <parseCommand+0x5a0>)
 800bb72:	6819      	ldr	r1, [r3, #0]
 800bb74:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	1a9b      	subs	r3, r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	440b      	add	r3, r1
 800bb82:	7c1b      	ldrb	r3, [r3, #16]
 800bb84:	2b0a      	cmp	r3, #10
 800bb86:	f200 81be 	bhi.w	800bf06 <parseCommand+0x892>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <parseCommand+0x51c>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbbd 	.word	0x0800bbbd
 800bb94:	0800bbeb 	.word	0x0800bbeb
 800bb98:	0800bc35 	.word	0x0800bc35
 800bb9c:	0800bc5f 	.word	0x0800bc5f
 800bba0:	0800bc87 	.word	0x0800bc87
 800bba4:	0800bcb1 	.word	0x0800bcb1
 800bba8:	0800bcd9 	.word	0x0800bcd9
 800bbac:	0800bd03 	.word	0x0800bd03
 800bbb0:	0800bd2b 	.word	0x0800bd2b
 800bbb4:	0800bd57 	.word	0x0800bd57
 800bbb8:	0800bd7b 	.word	0x0800bd7b
					case TYPE_BOOL:
						(*(char *)p_pointer[var_idx].value) = (rx_buffer[seek] == '1')?(1):(0);
 800bbbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b31      	cmp	r3, #49	; 0x31
 800bbc8:	bf0c      	ite	eq
 800bbca:	2301      	moveq	r3, #1
 800bbcc:	2300      	movne	r3, #0
 800bbce:	b2d8      	uxtb	r0, r3
 800bbd0:	4b10      	ldr	r3, [pc, #64]	; (800bc14 <parseCommand+0x5a0>)
 800bbd2:	6819      	ldr	r1, [r3, #0]
 800bbd4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	701a      	strb	r2, [r3, #0]
					break;
 800bbe8:	e18d      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_CHAR:
						(*(char *)p_pointer[var_idx].value) = atoi(rx_buffer+seek+1);
 800bbea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f002 f82f 	bl	800dc58 <atoi>
 800bbfa:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <parseCommand+0x5a0>)
 800bbfc:	6819      	ldr	r1, [r3, #0]
 800bbfe:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bc02:	4613      	mov	r3, r2
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	1a9b      	subs	r3, r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	b2c2      	uxtb	r2, r0
 800bc10:	701a      	strb	r2, [r3, #0]
					break;
 800bc12:	e178      	b.n	800bf06 <parseCommand+0x892>
 800bc14:	200013e4 	.word	0x200013e4
 800bc18:	200004f4 	.word	0x200004f4
 800bc1c:	08012af0 	.word	0x08012af0
 800bc20:	200013e8 	.word	0x200013e8
 800bc24:	200004f8 	.word	0x200004f8
 800bc28:	200004fc 	.word	0x200004fc
 800bc2c:	08012b10 	.word	0x08012b10
 800bc30:	08012b24 	.word	0x08012b24
					case TYPE_UCHAR:
						(*(unsigned char *)p_pointer[var_idx].value) = atoi(rx_buffer+seek+1);
 800bc34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f002 f80a 	bl	800dc58 <atoi>
 800bc44:	4b92      	ldr	r3, [pc, #584]	; (800be90 <parseCommand+0x81c>)
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	1a9b      	subs	r3, r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	b2c2      	uxtb	r2, r0
 800bc5a:	701a      	strb	r2, [r3, #0]
					break;
 800bc5c:	e153      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_INT:
						(*(int *)p_pointer[var_idx].value) = atoi(rx_buffer+seek+1);
 800bc5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bc62:	3301      	adds	r3, #1
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	18d0      	adds	r0, r2, r3
 800bc68:	4b89      	ldr	r3, [pc, #548]	; (800be90 <parseCommand+0x81c>)
 800bc6a:	6819      	ldr	r1, [r3, #0]
 800bc6c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bc70:	4613      	mov	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	1a9b      	subs	r3, r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	699c      	ldr	r4, [r3, #24]
 800bc7c:	f001 ffec 	bl	800dc58 <atoi>
 800bc80:	4603      	mov	r3, r0
 800bc82:	6023      	str	r3, [r4, #0]
					break;
 800bc84:	e13f      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_UINT:
						(*(unsigned int *)p_pointer[var_idx].value) = atoi(rx_buffer+seek+1);
 800bc86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4413      	add	r3, r2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f001 ffe1 	bl	800dc58 <atoi>
 800bc96:	4b7e      	ldr	r3, [pc, #504]	; (800be90 <parseCommand+0x81c>)
 800bc98:	6819      	ldr	r1, [r3, #0]
 800bc9a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	1a9b      	subs	r3, r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	4602      	mov	r2, r0
 800bcac:	601a      	str	r2, [r3, #0]
					break;
 800bcae:	e12a      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_LONG:
						(*(long *)p_pointer[var_idx].value) = atol(rx_buffer+seek+1);
 800bcb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	18d0      	adds	r0, r2, r3
 800bcba:	4b75      	ldr	r3, [pc, #468]	; (800be90 <parseCommand+0x81c>)
 800bcbc:	6819      	ldr	r1, [r3, #0]
 800bcbe:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	1a9b      	subs	r3, r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	440b      	add	r3, r1
 800bccc:	699c      	ldr	r4, [r3, #24]
 800bcce:	f001 ffc7 	bl	800dc60 <atol>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	6023      	str	r3, [r4, #0]
					break;
 800bcd6:	e116      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_ULONG:
						(*(unsigned long *)p_pointer[var_idx].value) = atol(rx_buffer+seek+1);
 800bcd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4413      	add	r3, r2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 ffbc 	bl	800dc60 <atol>
 800bce8:	4b69      	ldr	r3, [pc, #420]	; (800be90 <parseCommand+0x81c>)
 800bcea:	6819      	ldr	r1, [r3, #0]
 800bcec:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	1a9b      	subs	r3, r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	601a      	str	r2, [r3, #0]
					break;
 800bd00:	e101      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_FLOAT:
						(*(float *)p_pointer[var_idx].value) = atoff(rx_buffer+seek+1);
 800bd02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd06:	3301      	adds	r3, #1
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	18d0      	adds	r0, r2, r3
 800bd0c:	4b60      	ldr	r3, [pc, #384]	; (800be90 <parseCommand+0x81c>)
 800bd0e:	6819      	ldr	r1, [r3, #0]
 800bd10:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bd14:	4613      	mov	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	1a9b      	subs	r3, r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	699c      	ldr	r4, [r3, #24]
 800bd20:	f001 ff97 	bl	800dc52 <atoff>
 800bd24:	4603      	mov	r3, r0
 800bd26:	6023      	str	r3, [r4, #0]
					break;
 800bd28:	e0ed      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_DOUBLE:
						(*(double *)p_pointer[var_idx].value) = atof(rx_buffer+seek+1);
 800bd2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	18d0      	adds	r0, r2, r3
 800bd34:	4b56      	ldr	r3, [pc, #344]	; (800be90 <parseCommand+0x81c>)
 800bd36:	6819      	ldr	r1, [r3, #0]
 800bd38:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	440b      	add	r3, r1
 800bd46:	699c      	ldr	r4, [r3, #24]
 800bd48:	f001 ff80 	bl	800dc4c <atof>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	e9c4 2300 	strd	r2, r3, [r4]
					break;
 800bd54:	e0d7      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_ASCIICHAR:
						(*(char *)p_pointer[var_idx].value) = rx_buffer[seek+1];
 800bd56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	18d1      	adds	r1, r2, r3
 800bd60:	4b4b      	ldr	r3, [pc, #300]	; (800be90 <parseCommand+0x81c>)
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	1a9b      	subs	r3, r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4403      	add	r3, r0
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	780a      	ldrb	r2, [r1, #0]
 800bd76:	701a      	strb	r2, [r3, #0]
					break;
 800bd78:	e0c5      	b.n	800bf06 <parseCommand+0x892>
					case TYPE_STRING:
						_chars_to_send = 0;
 800bd7a:	4b46      	ldr	r3, [pc, #280]	; (800be94 <parseCommand+0x820>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]
						seek = seekToChar(rx_buffer, 1024,'=');
 800bd80:	223d      	movs	r2, #61	; 0x3d
 800bd82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7ff f97e 	bl	800b088 <seekToChar>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	82fb      	strh	r3, [r7, #22]
						uint8_t newStringLength = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	757b      	strb	r3, [r7, #21]
						//Очищаем переменную
						for (idxOfCharInBuffer = 0; idxOfCharInBuffer < (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount; idxOfCharInBuffer++)
 800bd94:	2300      	movs	r3, #0
 800bd96:	627b      	str	r3, [r7, #36]	; 0x24
 800bd98:	e010      	b.n	800bdbc <parseCommand+0x748>
						{(*(char *)(p_pointer[var_idx].value+idxOfCharInBuffer)) = 0;}
 800bd9a:	4b3d      	ldr	r3, [pc, #244]	; (800be90 <parseCommand+0x81c>)
 800bd9c:	6819      	ldr	r1, [r3, #0]
 800bd9e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bda2:	4613      	mov	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	440b      	add	r3, r1
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	4413      	add	r3, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
						for (idxOfCharInBuffer = 0; idxOfCharInBuffer < (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount; idxOfCharInBuffer++)
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	3301      	adds	r3, #1
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24
 800bdbc:	4b34      	ldr	r3, [pc, #208]	; (800be90 <parseCommand+0x81c>)
 800bdbe:	6819      	ldr	r1, [r3, #0]
 800bdc0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	1a9b      	subs	r3, r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d3df      	bcc.n	800bd9a <parseCommand+0x726>

						while (rx_buffer[seek+_chars_to_send]!='\r' &&
 800bdda:	e031      	b.n	800be40 <parseCommand+0x7cc>
							   rx_buffer[seek+_chars_to_send]!='\n' &&
							   (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount >= _chars_to_send)
						{
							if (rx_buffer[seek+_chars_to_send+1]!='\r' &&
 800bddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bde0:	4b2c      	ldr	r3, [pc, #176]	; (800be94 <parseCommand+0x820>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4413      	add	r3, r2
 800bde6:	3301      	adds	r3, #1
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b0d      	cmp	r3, #13
 800bdf0:	d021      	beq.n	800be36 <parseCommand+0x7c2>
							   rx_buffer[seek+_chars_to_send+1]!='\n')
 800bdf2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bdf6:	4b27      	ldr	r3, [pc, #156]	; (800be94 <parseCommand+0x820>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	4413      	add	r3, r2
 800be02:	781b      	ldrb	r3, [r3, #0]
							if (rx_buffer[seek+_chars_to_send+1]!='\r' &&
 800be04:	2b0a      	cmp	r3, #10
 800be06:	d016      	beq.n	800be36 <parseCommand+0x7c2>
							(*(char *)(p_pointer[var_idx].value+_chars_to_send))=rx_buffer[_chars_to_send+seek+1];
 800be08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be0c:	4b21      	ldr	r3, [pc, #132]	; (800be94 <parseCommand+0x820>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4413      	add	r3, r2
 800be12:	3301      	adds	r3, #1
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	18d1      	adds	r1, r2, r3
 800be18:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <parseCommand+0x81c>)
 800be1a:	6818      	ldr	r0, [r3, #0]
 800be1c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800be20:	4613      	mov	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4403      	add	r3, r0
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	4b19      	ldr	r3, [pc, #100]	; (800be94 <parseCommand+0x820>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4413      	add	r3, r2
 800be32:	780a      	ldrb	r2, [r1, #0]
 800be34:	701a      	strb	r2, [r3, #0]
							_chars_to_send++;
 800be36:	4b17      	ldr	r3, [pc, #92]	; (800be94 <parseCommand+0x820>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3301      	adds	r3, #1
 800be3c:	4a15      	ldr	r2, [pc, #84]	; (800be94 <parseCommand+0x820>)
 800be3e:	6013      	str	r3, [r2, #0]
						while (rx_buffer[seek+_chars_to_send]!='\r' &&
 800be40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be44:	4b13      	ldr	r3, [pc, #76]	; (800be94 <parseCommand+0x820>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4413      	add	r3, r2
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	4413      	add	r3, r2
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b0d      	cmp	r3, #13
 800be52:	d019      	beq.n	800be88 <parseCommand+0x814>
							   rx_buffer[seek+_chars_to_send]!='\n' &&
 800be54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800be58:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <parseCommand+0x820>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4413      	add	r3, r2
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	781b      	ldrb	r3, [r3, #0]
						while (rx_buffer[seek+_chars_to_send]!='\r' &&
 800be64:	2b0a      	cmp	r3, #10
 800be66:	d00f      	beq.n	800be88 <parseCommand+0x814>
							   (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount >= _chars_to_send)
 800be68:	4b09      	ldr	r3, [pc, #36]	; (800be90 <parseCommand+0x81c>)
 800be6a:	6819      	ldr	r1, [r3, #0]
 800be6c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800be70:	4613      	mov	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	1a9b      	subs	r3, r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	440b      	add	r3, r1
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <parseCommand+0x820>)
 800be82:	681b      	ldr	r3, [r3, #0]
							   rx_buffer[seek+_chars_to_send]!='\n' &&
 800be84:	429a      	cmp	r2, r3
 800be86:	d2a9      	bcs.n	800bddc <parseCommand+0x768>
						}
						//записываем вывод
						for (idxOfCharInBuffer = 0; idxOfCharInBuffer < (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount; idxOfCharInBuffer++)
 800be88:	2300      	movs	r3, #0
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24
 800be8c:	e018      	b.n	800bec0 <parseCommand+0x84c>
 800be8e:	bf00      	nop
 800be90:	200013e4 	.word	0x200013e4
 800be94:	200004f4 	.word	0x200004f4
						{
							tx_buffer[idxOfCharInBuffer] = (*(char *)(p_pointer[var_idx].value+idxOfCharInBuffer));
 800be98:	4b98      	ldr	r3, [pc, #608]	; (800c0fc <parseCommand+0xa88>)
 800be9a:	6819      	ldr	r1, [r3, #0]
 800be9c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bea0:	4613      	mov	r3, r2
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	440b      	add	r3, r1
 800beaa:	699a      	ldr	r2, [r3, #24]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	441a      	add	r2, r3
 800beb0:	6879      	ldr	r1, [r7, #4]
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	440b      	add	r3, r1
 800beb6:	7812      	ldrb	r2, [r2, #0]
 800beb8:	701a      	strb	r2, [r3, #0]
						for (idxOfCharInBuffer = 0; idxOfCharInBuffer < (*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount; idxOfCharInBuffer++)
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	3301      	adds	r3, #1
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
 800bec0:	4b8e      	ldr	r3, [pc, #568]	; (800c0fc <parseCommand+0xa88>)
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bec8:	4613      	mov	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	1a9b      	subs	r3, r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	4293      	cmp	r3, r2
 800bedc:	d3dc      	bcc.n	800be98 <parseCommand+0x824>
						}

						tx_buffer[(*(string_dimensions *)p_pointer[var_idx].dimensions).charsCount]= 0;
 800bede:	4b87      	ldr	r3, [pc, #540]	; (800c0fc <parseCommand+0xa88>)
 800bee0:	6819      	ldr	r1, [r3, #0]
 800bee2:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bee6:	4613      	mov	r3, r2
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	461a      	mov	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4413      	add	r3, r2
 800befa:	2200      	movs	r2, #0
 800befc:	701a      	strb	r2, [r3, #0]
						_chars_to_send = 0;
 800befe:	4b80      	ldr	r3, [pc, #512]	; (800c100 <parseCommand+0xa8c>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
					break;
 800bf04:	bf00      	nop
				}

			_chars_to_send += varToString(&p_pointer[var_idx], tx_buffer+_chars_to_send);
 800bf06:	4b7d      	ldr	r3, [pc, #500]	; (800c0fc <parseCommand+0xa88>)
 800bf08:	6819      	ldr	r1, [r3, #0]
 800bf0a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	18c8      	adds	r0, r1, r3
 800bf18:	4b79      	ldr	r3, [pc, #484]	; (800c100 <parseCommand+0xa8c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	4413      	add	r3, r2
 800bf20:	4619      	mov	r1, r3
 800bf22:	f7ff f8d5 	bl	800b0d0 <varToString>
 800bf26:	4603      	mov	r3, r0
 800bf28:	461a      	mov	r2, r3
 800bf2a:	4b75      	ldr	r3, [pc, #468]	; (800c100 <parseCommand+0xa8c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4413      	add	r3, r2
 800bf30:	4a73      	ldr	r2, [pc, #460]	; (800c100 <parseCommand+0xa8c>)
 800bf32:	6013      	str	r3, [r2, #0]
#if(defined TX_END_CRLF || defined TX_END_CR)
				tx_buffer[_chars_to_send++]='\r';
 800bf34:	4b72      	ldr	r3, [pc, #456]	; (800c100 <parseCommand+0xa8c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	1c5a      	adds	r2, r3, #1
 800bf3a:	4971      	ldr	r1, [pc, #452]	; (800c100 <parseCommand+0xa8c>)
 800bf3c:	600a      	str	r2, [r1, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	4413      	add	r3, r2
 800bf42:	220d      	movs	r2, #13
 800bf44:	701a      	strb	r2, [r3, #0]
#endif
#if(defined TX_END_CRLF || defined TX_END_LF)
				tx_buffer[_chars_to_send++]='\n';
 800bf46:	4b6e      	ldr	r3, [pc, #440]	; (800c100 <parseCommand+0xa8c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	496c      	ldr	r1, [pc, #432]	; (800c100 <parseCommand+0xa8c>)
 800bf4e:	600a      	str	r2, [r1, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	4413      	add	r3, r2
 800bf54:	220a      	movs	r2, #10
 800bf56:	701a      	strb	r2, [r3, #0]
#endif
		break; // Получили SET VAR=значение - парсим и выполняем GET
 800bf58:	e09d      	b.n	800c096 <parseCommand+0xa22>

		case COMMAND_RUN:
			clearCommandBuffer();
 800bf5a:	f7ff f877 	bl	800b04c <clearCommandBuffer>
			_var_name_length = 0;
 800bf5e:	4b69      	ldr	r3, [pc, #420]	; (800c104 <parseCommand+0xa90>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	601a      	str	r2, [r3, #0]
			while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800bf64:	e015      	b.n	800bf92 <parseCommand+0x91e>
						if (rx_buffer[idxOfCharInBuffer] !=' '){
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	4413      	add	r3, r2
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	d00c      	beq.n	800bf8c <parseCommand+0x918>
							_command_text[_var_name_length] = rx_buffer[idxOfCharInBuffer]; //записываем
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	441a      	add	r2, r3
 800bf78:	4b62      	ldr	r3, [pc, #392]	; (800c104 <parseCommand+0xa90>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	7811      	ldrb	r1, [r2, #0]
 800bf7e:	4a62      	ldr	r2, [pc, #392]	; (800c108 <parseCommand+0xa94>)
 800bf80:	54d1      	strb	r1, [r2, r3]
							_var_name_length++;
 800bf82:	4b60      	ldr	r3, [pc, #384]	; (800c104 <parseCommand+0xa90>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3301      	adds	r3, #1
 800bf88:	4a5e      	ldr	r2, [pc, #376]	; (800c104 <parseCommand+0xa90>)
 800bf8a:	6013      	str	r3, [r2, #0]
						}
						idxOfCharInBuffer++;
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	3301      	adds	r3, #1
 800bf90:	627b      	str	r3, [r7, #36]	; 0x24
			while (rx_buffer[idxOfCharInBuffer]>0 && rx_buffer[idxOfCharInBuffer]!='\r' && rx_buffer[idxOfCharInBuffer]!='\n'){
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	4413      	add	r3, r2
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <parseCommand+0x942>
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	4413      	add	r3, r2
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b0d      	cmp	r3, #13
 800bfa8:	d005      	beq.n	800bfb6 <parseCommand+0x942>
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	4413      	add	r3, r2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b0a      	cmp	r3, #10
 800bfb4:	d1d7      	bne.n	800bf66 <parseCommand+0x8f2>
					}

			var_idx = getIndexOfVariable(_command_text);
 800bfb6:	4854      	ldr	r0, [pc, #336]	; (800c108 <parseCommand+0xa94>)
 800bfb8:	f7ff f816 	bl	800afe8 <getIndexOfVariable>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	77fb      	strb	r3, [r7, #31]

			if (var_idx == -1) {
 800bfc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc8:	d10f      	bne.n	800bfea <parseCommand+0x976>
				_chars_to_send += sprintf(tx_buffer+_chars_to_send,"UNKNOWN_VARIABLE\n");
 800bfca:	4b4d      	ldr	r3, [pc, #308]	; (800c100 <parseCommand+0xa8c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	494e      	ldr	r1, [pc, #312]	; (800c10c <parseCommand+0xa98>)
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f002 fdbb 	bl	800eb50 <siprintf>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	461a      	mov	r2, r3
 800bfde:	4b48      	ldr	r3, [pc, #288]	; (800c100 <parseCommand+0xa8c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4a46      	ldr	r2, [pc, #280]	; (800c100 <parseCommand+0xa8c>)
 800bfe6:	6013      	str	r3, [r2, #0]
					callback(); //вызываем как колбек
				} else {
					_chars_to_send += sprintf(tx_buffer+_chars_to_send,"%s IS NOT MACROS\r\n", p_pointer[var_idx].name);
				}
			}
			break;
 800bfe8:	e055      	b.n	800c096 <parseCommand+0xa22>
				if (p_pointer[var_idx].format == TYPE_MACROS) {
 800bfea:	4b44      	ldr	r3, [pc, #272]	; (800c0fc <parseCommand+0xa88>)
 800bfec:	6819      	ldr	r1, [r3, #0]
 800bfee:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800bff2:	4613      	mov	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	440b      	add	r3, r1
 800bffc:	7c1b      	ldrb	r3, [r3, #16]
 800bffe:	2b0b      	cmp	r3, #11
 800c000:	d11f      	bne.n	800c042 <parseCommand+0x9ce>
					_chars_to_send = sprintf(tx_buffer,"EXECUTE %s ...\r\n", p_pointer[var_idx].name);
 800c002:	4b3e      	ldr	r3, [pc, #248]	; (800c0fc <parseCommand+0xa88>)
 800c004:	6819      	ldr	r1, [r3, #0]
 800c006:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800c00a:	4613      	mov	r3, r2
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	1a9b      	subs	r3, r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	440b      	add	r3, r1
 800c014:	461a      	mov	r2, r3
 800c016:	493e      	ldr	r1, [pc, #248]	; (800c110 <parseCommand+0xa9c>)
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f002 fd99 	bl	800eb50 <siprintf>
 800c01e:	4603      	mov	r3, r0
 800c020:	461a      	mov	r2, r3
 800c022:	4b37      	ldr	r3, [pc, #220]	; (800c100 <parseCommand+0xa8c>)
 800c024:	601a      	str	r2, [r3, #0]
					callback = p_pointer[var_idx].value;
 800c026:	4b35      	ldr	r3, [pc, #212]	; (800c0fc <parseCommand+0xa88>)
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800c02e:	4613      	mov	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	1a9b      	subs	r3, r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	61bb      	str	r3, [r7, #24]
					callback(); //вызываем как колбек
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	4798      	blx	r3
			break;
 800c040:	e029      	b.n	800c096 <parseCommand+0xa22>
					_chars_to_send += sprintf(tx_buffer+_chars_to_send,"%s IS NOT MACROS\r\n", p_pointer[var_idx].name);
 800c042:	4b2f      	ldr	r3, [pc, #188]	; (800c100 <parseCommand+0xa8c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	18d0      	adds	r0, r2, r3
 800c04a:	4b2c      	ldr	r3, [pc, #176]	; (800c0fc <parseCommand+0xa88>)
 800c04c:	6819      	ldr	r1, [r3, #0]
 800c04e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800c052:	4613      	mov	r3, r2
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	440b      	add	r3, r1
 800c05c:	461a      	mov	r2, r3
 800c05e:	492d      	ldr	r1, [pc, #180]	; (800c114 <parseCommand+0xaa0>)
 800c060:	f002 fd76 	bl	800eb50 <siprintf>
 800c064:	4603      	mov	r3, r0
 800c066:	461a      	mov	r2, r3
 800c068:	4b25      	ldr	r3, [pc, #148]	; (800c100 <parseCommand+0xa8c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4413      	add	r3, r2
 800c06e:	4a24      	ldr	r2, [pc, #144]	; (800c100 <parseCommand+0xa8c>)
 800c070:	6013      	str	r3, [r2, #0]
			break;
 800c072:	e010      	b.n	800c096 <parseCommand+0xa22>
	default: _chars_to_send = rx_seek + 1 + sprintf(tx_buffer + 1 + rx_seek ," = UNKNOWN_COMMAND\r\n");
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	3301      	adds	r3, #1
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	4926      	ldr	r1, [pc, #152]	; (800c118 <parseCommand+0xaa4>)
 800c07e:	4618      	mov	r0, r3
 800c080:	f002 fd66 	bl	800eb50 <siprintf>
 800c084:	4603      	mov	r3, r0
 800c086:	461a      	mov	r2, r3
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4413      	add	r3, r2
 800c08c:	3301      	adds	r3, #1
 800c08e:	4a1c      	ldr	r2, [pc, #112]	; (800c100 <parseCommand+0xa8c>)
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	e000      	b.n	800c096 <parseCommand+0xa22>
	case COMMAND_ECHO_OK: break; // Получили OK - ответ пустой
 800c094:	bf00      	nop
	}
	tx_buffer[_chars_to_send++]='O';
 800c096:	4b1a      	ldr	r3, [pc, #104]	; (800c100 <parseCommand+0xa8c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	4918      	ldr	r1, [pc, #96]	; (800c100 <parseCommand+0xa8c>)
 800c09e:	600a      	str	r2, [r1, #0]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	224f      	movs	r2, #79	; 0x4f
 800c0a6:	701a      	strb	r2, [r3, #0]
	tx_buffer[_chars_to_send++]='K';
 800c0a8:	4b15      	ldr	r3, [pc, #84]	; (800c100 <parseCommand+0xa8c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	4914      	ldr	r1, [pc, #80]	; (800c100 <parseCommand+0xa8c>)
 800c0b0:	600a      	str	r2, [r1, #0]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	224b      	movs	r2, #75	; 0x4b
 800c0b8:	701a      	strb	r2, [r3, #0]
#if(defined TX_END_CRLF || defined TX_END_CR)
				tx_buffer[_chars_to_send++]='\r';
 800c0ba:	4b11      	ldr	r3, [pc, #68]	; (800c100 <parseCommand+0xa8c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	490f      	ldr	r1, [pc, #60]	; (800c100 <parseCommand+0xa8c>)
 800c0c2:	600a      	str	r2, [r1, #0]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	220d      	movs	r2, #13
 800c0ca:	701a      	strb	r2, [r3, #0]
#endif
#if(defined TX_END_CRLF || defined TX_END_LF)
				tx_buffer[_chars_to_send++]='\n';
 800c0cc:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <parseCommand+0xa8c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	490b      	ldr	r1, [pc, #44]	; (800c100 <parseCommand+0xa8c>)
 800c0d4:	600a      	str	r2, [r1, #0]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4413      	add	r3, r2
 800c0da:	220a      	movs	r2, #10
 800c0dc:	701a      	strb	r2, [r3, #0]
#endif
	tx_buffer[_chars_to_send++]=0;
 800c0de:	4b08      	ldr	r3, [pc, #32]	; (800c100 <parseCommand+0xa8c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	4906      	ldr	r1, [pc, #24]	; (800c100 <parseCommand+0xa8c>)
 800c0e6:	600a      	str	r2, [r1, #0]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	701a      	strb	r2, [r3, #0]
		return _chars_to_send;
 800c0f0:	4b03      	ldr	r3, [pc, #12]	; (800c100 <parseCommand+0xa8c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	372c      	adds	r7, #44	; 0x2c
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd90      	pop	{r4, r7, pc}
 800c0fc:	200013e4 	.word	0x200013e4
 800c100:	200004f4 	.word	0x200004f4
 800c104:	200004f8 	.word	0x200004f8
 800c108:	200004fc 	.word	0x200004fc
 800c10c:	08012b10 	.word	0x08012b10
 800c110:	08012b34 	.word	0x08012b34
 800c114:	08012b48 	.word	0x08012b48
 800c118:	08012b5c 	.word	0x08012b5c

0800c11c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800c11c:	b590      	push	{r4, r7, lr}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	4623      	mov	r3, r4
 800c12c:	71fb      	strb	r3, [r7, #7]
 800c12e:	4603      	mov	r3, r0
 800c130:	71bb      	strb	r3, [r7, #6]
 800c132:	460b      	mov	r3, r1
 800c134:	80bb      	strh	r3, [r7, #4]
 800c136:	4613      	mov	r3, r2
 800c138:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	2b08      	cmp	r3, #8
 800c13e:	d902      	bls.n	800c146 <socket+0x2a>
 800c140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c144:	e0f2      	b.n	800c32c <socket+0x210>
	switch(protocol)
 800c146:	79bb      	ldrb	r3, [r7, #6]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d005      	beq.n	800c158 <socket+0x3c>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dd11      	ble.n	800c174 <socket+0x58>
 800c150:	3b02      	subs	r3, #2
 800c152:	2b02      	cmp	r3, #2
 800c154:	d80e      	bhi.n	800c174 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800c156:	e011      	b.n	800c17c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800c158:	f107 030c 	add.w	r3, r7, #12
 800c15c:	2204      	movs	r2, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800c164:	f001 f8fa 	bl	800d35c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <socket+0x5e>
 800c16e:	f06f 0302 	mvn.w	r3, #2
 800c172:	e0db      	b.n	800c32c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800c174:	f06f 0304 	mvn.w	r3, #4
 800c178:	e0d8      	b.n	800c32c <socket+0x210>
	    break;
 800c17a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <socket+0x70>
 800c186:	f06f 0305 	mvn.w	r3, #5
 800c18a:	e0cf      	b.n	800c32c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d025      	beq.n	800c1de <socket+0xc2>
	{
   	switch(protocol)
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d002      	beq.n	800c19e <socket+0x82>
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d008      	beq.n	800c1ae <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800c19c:	e024      	b.n	800c1e8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800c19e:	78fb      	ldrb	r3, [r7, #3]
 800c1a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d11c      	bne.n	800c1e2 <socket+0xc6>
 800c1a8:	f06f 0305 	mvn.w	r3, #5
 800c1ac:	e0be      	b.n	800c32c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
 800c1b0:	f003 0320 	and.w	r3, r3, #32
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800c1b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	db02      	blt.n	800c1c6 <socket+0xaa>
 800c1c0:	f06f 0305 	mvn.w	r3, #5
 800c1c4:	e0b2      	b.n	800c32c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	f003 0310 	and.w	r3, r3, #16
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00a      	beq.n	800c1e6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800c1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	db06      	blt.n	800c1e6 <socket+0xca>
 800c1d8:	f06f 0305 	mvn.w	r3, #5
 800c1dc:	e0a6      	b.n	800c32c <socket+0x210>
   	}
   }
 800c1de:	bf00      	nop
 800c1e0:	e002      	b.n	800c1e8 <socket+0xcc>
   	      break;
 800c1e2:	bf00      	nop
 800c1e4:	e000      	b.n	800c1e8 <socket+0xcc>
   	      break;
 800c1e6:	bf00      	nop
	close(sn);
 800c1e8:	79fb      	ldrb	r3, [r7, #7]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 f8ac 	bl	800c348 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1fe:	f023 030f 	bic.w	r3, r3, #15
 800c202:	b25a      	sxtb	r2, r3
 800c204:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c208:	4313      	orrs	r3, r2
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	4619      	mov	r1, r3
 800c210:	f001 f856 	bl	800d2c0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800c214:	88bb      	ldrh	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d110      	bne.n	800c23c <socket+0x120>
	{
	   port = sock_any_port++;
 800c21a:	4b46      	ldr	r3, [pc, #280]	; (800c334 <socket+0x218>)
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	b291      	uxth	r1, r2
 800c222:	4a44      	ldr	r2, [pc, #272]	; (800c334 <socket+0x218>)
 800c224:	8011      	strh	r1, [r2, #0]
 800c226:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800c228:	4b42      	ldr	r3, [pc, #264]	; (800c334 <socket+0x218>)
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800c230:	4293      	cmp	r3, r2
 800c232:	d103      	bne.n	800c23c <socket+0x120>
 800c234:	4b3f      	ldr	r3, [pc, #252]	; (800c334 <socket+0x218>)
 800c236:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c23a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3301      	adds	r3, #1
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c248:	461a      	mov	r2, r3
 800c24a:	88bb      	ldrh	r3, [r7, #4]
 800c24c:	0a1b      	lsrs	r3, r3, #8
 800c24e:	b29b      	uxth	r3, r3
 800c250:	b2db      	uxtb	r3, r3
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f001 f833 	bl	800d2c0 <WIZCHIP_WRITE>
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	3301      	adds	r3, #1
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c266:	461a      	mov	r2, r3
 800c268:	88bb      	ldrh	r3, [r7, #4]
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	4619      	mov	r1, r3
 800c26e:	4610      	mov	r0, r2
 800c270:	f001 f826 	bl	800d2c0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	3301      	adds	r3, #1
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c280:	2101      	movs	r1, #1
 800c282:	4618      	mov	r0, r3
 800c284:	f001 f81c 	bl	800d2c0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800c288:	bf00      	nop
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	3301      	adds	r3, #1
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c296:	4618      	mov	r0, r3
 800c298:	f000 ffc6 	bl	800d228 <WIZCHIP_READ>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1f3      	bne.n	800c28a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	b21b      	sxth	r3, r3
 800c2ac:	43db      	mvns	r3, r3
 800c2ae:	b21a      	sxth	r2, r3
 800c2b0:	4b21      	ldr	r3, [pc, #132]	; (800c338 <socket+0x21c>)
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b21b      	sxth	r3, r3
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	b21b      	sxth	r3, r3
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	4b1e      	ldr	r3, [pc, #120]	; (800c338 <socket+0x21c>)
 800c2be:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	f003 0201 	and.w	r2, r3, #1
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2cc:	b21a      	sxth	r2, r3
 800c2ce:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <socket+0x21c>)
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b21b      	sxth	r3, r3
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	b21b      	sxth	r3, r3
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	4b17      	ldr	r3, [pc, #92]	; (800c338 <socket+0x21c>)
 800c2dc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e6:	b21b      	sxth	r3, r3
 800c2e8:	43db      	mvns	r3, r3
 800c2ea:	b21a      	sxth	r2, r3
 800c2ec:	4b13      	ldr	r3, [pc, #76]	; (800c33c <socket+0x220>)
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	b21b      	sxth	r3, r3
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	b21b      	sxth	r3, r3
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	4b10      	ldr	r3, [pc, #64]	; (800c33c <socket+0x220>)
 800c2fa:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	4a10      	ldr	r2, [pc, #64]	; (800c340 <socket+0x224>)
 800c300:	2100      	movs	r1, #0
 800c302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800c306:	79fb      	ldrb	r3, [r7, #7]
 800c308:	4a0e      	ldr	r2, [pc, #56]	; (800c344 <socket+0x228>)
 800c30a:	2100      	movs	r1, #0
 800c30c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800c30e:	bf00      	nop
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	3301      	adds	r3, #1
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 ff83 	bl	800d228 <WIZCHIP_READ>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0f3      	beq.n	800c310 <socket+0x1f4>
   return (int8_t)sn;
 800c328:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	bd90      	pop	{r4, r7, pc}
 800c334:	200000a2 	.word	0x200000a2
 800c338:	20000514 	.word	0x20000514
 800c33c:	20000516 	.word	0x20000516
 800c340:	20000518 	.word	0x20000518
 800c344:	20000528 	.word	0x20000528

0800c348 <close>:

int8_t close(uint8_t sn)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b08      	cmp	r3, #8
 800c356:	d902      	bls.n	800c35e <close+0x16>
 800c358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c35c:	e055      	b.n	800c40a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	3301      	adds	r3, #1
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c36a:	2110      	movs	r1, #16
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 ffa7 	bl	800d2c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800c372:	bf00      	nop
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	3301      	adds	r3, #1
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c380:	4618      	mov	r0, r3
 800c382:	f000 ff51 	bl	800d228 <WIZCHIP_READ>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f3      	bne.n	800c374 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	3301      	adds	r3, #1
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c398:	211f      	movs	r1, #31
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 ff90 	bl	800d2c0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a8:	b21b      	sxth	r3, r3
 800c3aa:	43db      	mvns	r3, r3
 800c3ac:	b21a      	sxth	r2, r3
 800c3ae:	4b19      	ldr	r3, [pc, #100]	; (800c414 <close+0xcc>)
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	b21b      	sxth	r3, r3
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	4b16      	ldr	r3, [pc, #88]	; (800c414 <close+0xcc>)
 800c3bc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c6:	b21b      	sxth	r3, r3
 800c3c8:	43db      	mvns	r3, r3
 800c3ca:	b21a      	sxth	r2, r3
 800c3cc:	4b12      	ldr	r3, [pc, #72]	; (800c418 <close+0xd0>)
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b21b      	sxth	r3, r3
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	b21b      	sxth	r3, r3
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <close+0xd0>)
 800c3da:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <close+0xd4>)
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	4a0d      	ldr	r2, [pc, #52]	; (800c420 <close+0xd8>)
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800c3ee:	bf00      	nop
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 ff13 	bl	800d228 <WIZCHIP_READ>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1f3      	bne.n	800c3f0 <close+0xa8>
	return SOCK_OK;
 800c408:	2301      	movs	r3, #1
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000514 	.word	0x20000514
 800c418:	20000516 	.word	0x20000516
 800c41c:	20000518 	.word	0x20000518
 800c420:	20000528 	.word	0x20000528

0800c424 <listen>:

int8_t listen(uint8_t sn)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	2b08      	cmp	r3, #8
 800c432:	d902      	bls.n	800c43a <listen+0x16>
 800c434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c438:	e049      	b.n	800c4ce <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	3301      	adds	r3, #1
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fef0 	bl	800d228 <WIZCHIP_READ>
 800c448:	4603      	mov	r3, r0
 800c44a:	f003 030f 	and.w	r3, r3, #15
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d002      	beq.n	800c458 <listen+0x34>
 800c452:	f06f 0304 	mvn.w	r3, #4
 800c456:	e03a      	b.n	800c4ce <listen+0xaa>
	CHECK_SOCKINIT();
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	3301      	adds	r3, #1
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fedf 	bl	800d228 <WIZCHIP_READ>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b13      	cmp	r3, #19
 800c46e:	d002      	beq.n	800c476 <listen+0x52>
 800c470:	f06f 0302 	mvn.w	r3, #2
 800c474:	e02b      	b.n	800c4ce <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	3301      	adds	r3, #1
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c482:	2102      	movs	r1, #2
 800c484:	4618      	mov	r0, r3
 800c486:	f000 ff1b 	bl	800d2c0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800c48a:	bf00      	nop
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	3301      	adds	r3, #1
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fec5 	bl	800d228 <WIZCHIP_READ>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f3      	bne.n	800c48c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800c4a4:	e006      	b.n	800c4b4 <listen+0x90>
   {
         close(sn);
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff ff4d 	bl	800c348 <close>
         return SOCKERR_SOCKCLOSED;
 800c4ae:	f06f 0303 	mvn.w	r3, #3
 800c4b2:	e00c      	b.n	800c4ce <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800c4b4:	79fb      	ldrb	r3, [r7, #7]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 feb1 	bl	800d228 <WIZCHIP_READ>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b14      	cmp	r3, #20
 800c4ca:	d1ec      	bne.n	800c4a6 <listen+0x82>
   }
   return SOCK_OK;
 800c4cc:	2301      	movs	r3, #1
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d902      	bls.n	800c4ee <disconnect+0x16>
 800c4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ec:	e062      	b.n	800c5b4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fe96 	bl	800d228 <WIZCHIP_READ>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	f003 030f 	and.w	r3, r3, #15
 800c502:	2b01      	cmp	r3, #1
 800c504:	d002      	beq.n	800c50c <disconnect+0x34>
 800c506:	f06f 0304 	mvn.w	r3, #4
 800c50a:	e053      	b.n	800c5b4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	3301      	adds	r3, #1
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c518:	2108      	movs	r1, #8
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fed0 	bl	800d2c0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800c520:	bf00      	nop
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	3301      	adds	r3, #1
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fe7a 	bl	800d228 <WIZCHIP_READ>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1f3      	bne.n	800c522 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	2201      	movs	r2, #1
 800c53e:	fa02 f303 	lsl.w	r3, r2, r3
 800c542:	b21b      	sxth	r3, r3
 800c544:	43db      	mvns	r3, r3
 800c546:	b21a      	sxth	r2, r3
 800c548:	4b1c      	ldr	r3, [pc, #112]	; (800c5bc <disconnect+0xe4>)
 800c54a:	881b      	ldrh	r3, [r3, #0]
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	4013      	ands	r3, r2
 800c550:	b21b      	sxth	r3, r3
 800c552:	b29a      	uxth	r2, r3
 800c554:	4b19      	ldr	r3, [pc, #100]	; (800c5bc <disconnect+0xe4>)
 800c556:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800c558:	4b19      	ldr	r3, [pc, #100]	; (800c5c0 <disconnect+0xe8>)
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	461a      	mov	r2, r3
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	fa42 f303 	asr.w	r3, r2, r3
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d016      	beq.n	800c59a <disconnect+0xc2>
 800c56c:	2300      	movs	r3, #0
 800c56e:	e021      	b.n	800c5b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800c570:	79fb      	ldrb	r3, [r7, #7]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	3301      	adds	r3, #1
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 fe53 	bl	800d228 <WIZCHIP_READ>
 800c582:	4603      	mov	r3, r0
 800c584:	f003 0308 	and.w	r3, r3, #8
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d006      	beq.n	800c59a <disconnect+0xc2>
	   {
	      close(sn);
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff feda 	bl	800c348 <close>
	      return SOCKERR_TIMEOUT;
 800c594:	f06f 030c 	mvn.w	r3, #12
 800c598:	e00c      	b.n	800c5b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800c59a:	79fb      	ldrb	r3, [r7, #7]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	3301      	adds	r3, #1
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 fe3e 	bl	800d228 <WIZCHIP_READ>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1de      	bne.n	800c570 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800c5b2:	2301      	movs	r3, #1
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20000516 	.word	0x20000516
 800c5c0:	20000514 	.word	0x20000514

0800c5c4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	2b08      	cmp	r3, #8
 800c5e0:	d902      	bls.n	800c5e8 <send+0x24>
 800c5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5e6:	e0de      	b.n	800c7a6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fe19 	bl	800d228 <WIZCHIP_READ>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f003 030f 	and.w	r3, r3, #15
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d002      	beq.n	800c606 <send+0x42>
 800c600:	f06f 0304 	mvn.w	r3, #4
 800c604:	e0cf      	b.n	800c7a6 <send+0x1e2>
   CHECK_SOCKDATA();
 800c606:	88bb      	ldrh	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <send+0x4e>
 800c60c:	f06f 030d 	mvn.w	r3, #13
 800c610:	e0c9      	b.n	800c7a6 <send+0x1e2>
   tmp = getSn_SR(sn);
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	3301      	adds	r3, #1
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 fe02 	bl	800d228 <WIZCHIP_READ>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800c628:	7bfb      	ldrb	r3, [r7, #15]
 800c62a:	2b17      	cmp	r3, #23
 800c62c:	d005      	beq.n	800c63a <send+0x76>
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b1c      	cmp	r3, #28
 800c632:	d002      	beq.n	800c63a <send+0x76>
 800c634:	f06f 0306 	mvn.w	r3, #6
 800c638:	e0b5      	b.n	800c7a6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800c63a:	4b5d      	ldr	r3, [pc, #372]	; (800c7b0 <send+0x1ec>)
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	fa42 f303 	asr.w	r3, r2, r3
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d039      	beq.n	800c6c2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	3301      	adds	r3, #1
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fde4 	bl	800d228 <WIZCHIP_READ>
 800c660:	4603      	mov	r3, r0
 800c662:	f003 031f 	and.w	r3, r3, #31
 800c666:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	f003 0310 	and.w	r3, r3, #16
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d019      	beq.n	800c6a6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	3301      	adds	r3, #1
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c67e:	2110      	movs	r1, #16
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fe1d 	bl	800d2c0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800c686:	79fb      	ldrb	r3, [r7, #7]
 800c688:	2201      	movs	r2, #1
 800c68a:	fa02 f303 	lsl.w	r3, r2, r3
 800c68e:	b21b      	sxth	r3, r3
 800c690:	43db      	mvns	r3, r3
 800c692:	b21a      	sxth	r2, r3
 800c694:	4b46      	ldr	r3, [pc, #280]	; (800c7b0 <send+0x1ec>)
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	b21b      	sxth	r3, r3
 800c69a:	4013      	ands	r3, r2
 800c69c:	b21b      	sxth	r3, r3
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	4b43      	ldr	r3, [pc, #268]	; (800c7b0 <send+0x1ec>)
 800c6a2:	801a      	strh	r2, [r3, #0]
 800c6a4:	e00d      	b.n	800c6c2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	f003 0308 	and.w	r3, r3, #8
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d006      	beq.n	800c6be <send+0xfa>
      {
         close(sn);
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fe48 	bl	800c348 <close>
         return SOCKERR_TIMEOUT;
 800c6b8:	f06f 030c 	mvn.w	r3, #12
 800c6bc:	e073      	b.n	800c7a6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e071      	b.n	800c7a6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fdaa 	bl	800d228 <WIZCHIP_READ>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	029b      	lsls	r3, r3, #10
 800c6da:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800c6dc:	88ba      	ldrh	r2, [r7, #4]
 800c6de:	89bb      	ldrh	r3, [r7, #12]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d901      	bls.n	800c6e8 <send+0x124>
 800c6e4:	89bb      	ldrh	r3, [r7, #12]
 800c6e6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fef6 	bl	800d4dc <getSn_TX_FSR>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	00db      	lsls	r3, r3, #3
 800c6fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c700:	4618      	mov	r0, r3
 800c702:	f000 fd91 	bl	800d228 <WIZCHIP_READ>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	2b17      	cmp	r3, #23
 800c70e:	d009      	beq.n	800c724 <send+0x160>
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	2b1c      	cmp	r3, #28
 800c714:	d006      	beq.n	800c724 <send+0x160>
      {
         close(sn);
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fe15 	bl	800c348 <close>
         return SOCKERR_SOCKSTATUS;
 800c71e:	f06f 0306 	mvn.w	r3, #6
 800c722:	e040      	b.n	800c7a6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800c724:	4b23      	ldr	r3, [pc, #140]	; (800c7b4 <send+0x1f0>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	fa42 f303 	asr.w	r3, r2, r3
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <send+0x180>
 800c738:	88ba      	ldrh	r2, [r7, #4]
 800c73a:	89bb      	ldrh	r3, [r7, #12]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d901      	bls.n	800c744 <send+0x180>
 800c740:	2300      	movs	r3, #0
 800c742:	e030      	b.n	800c7a6 <send+0x1e2>
      if(len <= freesize) break;
 800c744:	88ba      	ldrh	r2, [r7, #4]
 800c746:	89bb      	ldrh	r3, [r7, #12]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d900      	bls.n	800c74e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800c74c:	e7cc      	b.n	800c6e8 <send+0x124>
      if(len <= freesize) break;
 800c74e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800c750:	88ba      	ldrh	r2, [r7, #4]
 800c752:	79fb      	ldrb	r3, [r7, #7]
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 ff56 	bl	800d608 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	3301      	adds	r3, #1
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c768:	2120      	movs	r1, #32
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fda8 	bl	800d2c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800c770:	bf00      	nop
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	3301      	adds	r3, #1
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 fd52 	bl	800d228 <WIZCHIP_READ>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1f3      	bne.n	800c772 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	2201      	movs	r2, #1
 800c78e:	fa02 f303 	lsl.w	r3, r2, r3
 800c792:	b21a      	sxth	r2, r3
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <send+0x1ec>)
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b21b      	sxth	r3, r3
 800c79a:	4313      	orrs	r3, r2
 800c79c:	b21b      	sxth	r3, r3
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	4b03      	ldr	r3, [pc, #12]	; (800c7b0 <send+0x1ec>)
 800c7a2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800c7a4:	88bb      	ldrh	r3, [r7, #4]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000516 	.word	0x20000516
 800c7b4:	20000514 	.word	0x20000514

0800c7b8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800c7b8:	b590      	push	{r4, r7, lr}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	6039      	str	r1, [r7, #0]
 800c7c2:	71fb      	strb	r3, [r7, #7]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800c7d0:	79fb      	ldrb	r3, [r7, #7]
 800c7d2:	2b08      	cmp	r3, #8
 800c7d4:	d902      	bls.n	800c7dc <recv+0x24>
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7da:	e09c      	b.n	800c916 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fd1f 	bl	800d228 <WIZCHIP_READ>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f003 030f 	and.w	r3, r3, #15
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d002      	beq.n	800c7fa <recv+0x42>
 800c7f4:	f06f 0304 	mvn.w	r3, #4
 800c7f8:	e08d      	b.n	800c916 <recv+0x15e>
   CHECK_SOCKDATA();
 800c7fa:	88bb      	ldrh	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <recv+0x4e>
 800c800:	f06f 030d 	mvn.w	r3, #13
 800c804:	e087      	b.n	800c916 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	3301      	adds	r3, #1
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fd08 	bl	800d228 <WIZCHIP_READ>
 800c818:	4603      	mov	r3, r0
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	029b      	lsls	r3, r3, #10
 800c81e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800c820:	89ba      	ldrh	r2, [r7, #12]
 800c822:	88bb      	ldrh	r3, [r7, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d201      	bcs.n	800c82c <recv+0x74>
 800c828:	89bb      	ldrh	r3, [r7, #12]
 800c82a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fe9f 	bl	800d572 <getSn_RX_RSR>
 800c834:	4603      	mov	r3, r0
 800c836:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	3301      	adds	r3, #1
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fcef 	bl	800d228 <WIZCHIP_READ>
 800c84a:	4603      	mov	r3, r0
 800c84c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
 800c850:	2b17      	cmp	r3, #23
 800c852:	d026      	beq.n	800c8a2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	2b1c      	cmp	r3, #28
 800c858:	d11c      	bne.n	800c894 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800c85a:	89bb      	ldrh	r3, [r7, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d133      	bne.n	800c8c8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fe3a 	bl	800d4dc <getSn_TX_FSR>
 800c868:	4603      	mov	r3, r0
 800c86a:	461c      	mov	r4, r3
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	3301      	adds	r3, #1
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fcd5 	bl	800d228 <WIZCHIP_READ>
 800c87e:	4603      	mov	r3, r0
 800c880:	029b      	lsls	r3, r3, #10
 800c882:	429c      	cmp	r4, r3
 800c884:	d10d      	bne.n	800c8a2 <recv+0xea>
               {
                  close(sn);
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff fd5d 	bl	800c348 <close>
                  return SOCKERR_SOCKSTATUS;
 800c88e:	f06f 0306 	mvn.w	r3, #6
 800c892:	e040      	b.n	800c916 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	4618      	mov	r0, r3
 800c898:	f7ff fd56 	bl	800c348 <close>
               return SOCKERR_SOCKSTATUS;
 800c89c:	f06f 0306 	mvn.w	r3, #6
 800c8a0:	e039      	b.n	800c916 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800c8a2:	4b1f      	ldr	r3, [pc, #124]	; (800c920 <recv+0x168>)
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	fa42 f303 	asr.w	r3, r2, r3
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d004      	beq.n	800c8c0 <recv+0x108>
 800c8b6:	89bb      	ldrh	r3, [r7, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <recv+0x108>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e02a      	b.n	800c916 <recv+0x15e>
         if(recvsize != 0) break;
 800c8c0:	89bb      	ldrh	r3, [r7, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d102      	bne.n	800c8cc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800c8c6:	e7b1      	b.n	800c82c <recv+0x74>
               if(recvsize != 0) break;
 800c8c8:	bf00      	nop
 800c8ca:	e000      	b.n	800c8ce <recv+0x116>
         if(recvsize != 0) break;
 800c8cc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800c8ce:	89ba      	ldrh	r2, [r7, #12]
 800c8d0:	88bb      	ldrh	r3, [r7, #4]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d201      	bcs.n	800c8da <recv+0x122>
 800c8d6:	89bb      	ldrh	r3, [r7, #12]
 800c8d8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800c8da:	88ba      	ldrh	r2, [r7, #4]
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f000 feed 	bl	800d6c0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c8f2:	2140      	movs	r1, #64	; 0x40
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 fce3 	bl	800d2c0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800c8fa:	bf00      	nop
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	3301      	adds	r3, #1
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fc8d 	bl	800d228 <WIZCHIP_READ>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1f3      	bne.n	800c8fc <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800c914:	88bb      	ldrh	r3, [r7, #4]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd90      	pop	{r4, r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000514 	.word	0x20000514

0800c924 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60b9      	str	r1, [r7, #8]
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	4603      	mov	r3, r0
 800c930:	73fb      	strb	r3, [r7, #15]
 800c932:	4613      	mov	r3, r2
 800c934:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	2b08      	cmp	r3, #8
 800c942:	d902      	bls.n	800c94a <sendto+0x26>
 800c944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c948:	e11b      	b.n	800cb82 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	3301      	adds	r3, #1
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	4618      	mov	r0, r3
 800c954:	f000 fc68 	bl	800d228 <WIZCHIP_READ>
 800c958:	4603      	mov	r3, r0
 800c95a:	f003 030f 	and.w	r3, r3, #15
 800c95e:	3b02      	subs	r3, #2
 800c960:	2b02      	cmp	r3, #2
 800c962:	d902      	bls.n	800c96a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800c964:	f06f 0304 	mvn.w	r3, #4
 800c968:	e10b      	b.n	800cb82 <sendto+0x25e>
         break;
 800c96a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800c96c:	89bb      	ldrh	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <sendto+0x54>
 800c972:	f06f 030d 	mvn.w	r3, #13
 800c976:	e104      	b.n	800cb82 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	021b      	lsls	r3, r3, #8
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	3201      	adds	r2, #1
 800c986:	7812      	ldrb	r2, [r2, #0]
 800c988:	4413      	add	r3, r2
 800c98a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	021b      	lsls	r3, r3, #8
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	3202      	adds	r2, #2
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	4413      	add	r3, r2
 800c998:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	3203      	adds	r2, #3
 800c9a2:	7812      	ldrb	r2, [r2, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10e      	bne.n	800c9cc <sendto+0xa8>
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 fc36 	bl	800d228 <WIZCHIP_READ>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f003 0304 	and.w	r3, r3, #4
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d002      	beq.n	800c9cc <sendto+0xa8>
 800c9c6:	f06f 030b 	mvn.w	r3, #11
 800c9ca:	e0da      	b.n	800cb82 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800c9cc:	8c3b      	ldrh	r3, [r7, #32]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10e      	bne.n	800c9f0 <sendto+0xcc>
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 fc24 	bl	800d228 <WIZCHIP_READ>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d002      	beq.n	800c9f0 <sendto+0xcc>
 800c9ea:	f06f 030a 	mvn.w	r3, #10
 800c9ee:	e0c8      	b.n	800cb82 <sendto+0x25e>
   tmp = getSn_SR(sn);
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	00db      	lsls	r3, r3, #3
 800c9f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 fc13 	bl	800d228 <WIZCHIP_READ>
 800ca02:	4603      	mov	r3, r0
 800ca04:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	2b42      	cmp	r3, #66	; 0x42
 800ca0a:	d008      	beq.n	800ca1e <sendto+0xfa>
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	2b22      	cmp	r3, #34	; 0x22
 800ca10:	d005      	beq.n	800ca1e <sendto+0xfa>
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	2b32      	cmp	r3, #50	; 0x32
 800ca16:	d002      	beq.n	800ca1e <sendto+0xfa>
 800ca18:	f06f 0306 	mvn.w	r3, #6
 800ca1c:	e0b1      	b.n	800cb82 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	3301      	adds	r3, #1
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800ca2a:	2204      	movs	r2, #4
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fcf4 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	3301      	adds	r3, #1
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca40:	461a      	mov	r2, r3
 800ca42:	8c3b      	ldrh	r3, [r7, #32]
 800ca44:	0a1b      	lsrs	r3, r3, #8
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f000 fc37 	bl	800d2c0 <WIZCHIP_WRITE>
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	3301      	adds	r3, #1
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800ca5e:	461a      	mov	r2, r3
 800ca60:	8c3b      	ldrh	r3, [r7, #32]
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f000 fc2a 	bl	800d2c0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	3301      	adds	r3, #1
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fbd5 	bl	800d228 <WIZCHIP_READ>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	029b      	lsls	r3, r3, #10
 800ca84:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800ca86:	89ba      	ldrh	r2, [r7, #12]
 800ca88:	8abb      	ldrh	r3, [r7, #20]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d901      	bls.n	800ca92 <sendto+0x16e>
 800ca8e:	8abb      	ldrh	r3, [r7, #20]
 800ca90:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fd21 	bl	800d4dc <getSn_TX_FSR>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	3301      	adds	r3, #1
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 fbbc 	bl	800d228 <WIZCHIP_READ>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d102      	bne.n	800cabc <sendto+0x198>
 800cab6:	f06f 0303 	mvn.w	r3, #3
 800caba:	e062      	b.n	800cb82 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800cabc:	4b33      	ldr	r3, [pc, #204]	; (800cb8c <sendto+0x268>)
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	461a      	mov	r2, r3
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	fa42 f303 	asr.w	r3, r2, r3
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <sendto+0x1b8>
 800cad0:	89ba      	ldrh	r2, [r7, #12]
 800cad2:	8abb      	ldrh	r3, [r7, #20]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d901      	bls.n	800cadc <sendto+0x1b8>
 800cad8:	2300      	movs	r3, #0
 800cada:	e052      	b.n	800cb82 <sendto+0x25e>
      if(len <= freesize) break;
 800cadc:	89ba      	ldrh	r2, [r7, #12]
 800cade:	8abb      	ldrh	r3, [r7, #20]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d900      	bls.n	800cae6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800cae4:	e7d5      	b.n	800ca92 <sendto+0x16e>
      if(len <= freesize) break;
 800cae6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800cae8:	89ba      	ldrh	r2, [r7, #12]
 800caea:	7bfb      	ldrb	r3, [r7, #15]
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fd8a 	bl	800d608 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	3301      	adds	r3, #1
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cb00:	2120      	movs	r1, #32
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 fbdc 	bl	800d2c0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800cb08:	bf00      	nop
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	3301      	adds	r3, #1
 800cb10:	00db      	lsls	r3, r3, #3
 800cb12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fb86 	bl	800d228 <WIZCHIP_READ>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1f3      	bne.n	800cb0a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	3301      	adds	r3, #1
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 fb7a 	bl	800d228 <WIZCHIP_READ>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f003 031f 	and.w	r3, r3, #31
 800cb3a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	f003 0310 	and.w	r3, r3, #16
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00c      	beq.n	800cb60 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cb52:	2110      	movs	r1, #16
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 fbb3 	bl	800d2c0 <WIZCHIP_WRITE>
         break;
 800cb5a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800cb5c:	89bb      	ldrh	r3, [r7, #12]
 800cb5e:	e010      	b.n	800cb82 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	f003 0308 	and.w	r3, r3, #8
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0db      	beq.n	800cb22 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	3301      	adds	r3, #1
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cb76:	2108      	movs	r1, #8
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 fba1 	bl	800d2c0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800cb7e:	f06f 030c 	mvn.w	r3, #12
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000514 	.word	0x20000514

0800cb90 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607b      	str	r3, [r7, #4]
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	2b08      	cmp	r3, #8
 800cbaa:	d902      	bls.n	800cbb2 <recvfrom+0x22>
 800cbac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb0:	e1d4      	b.n	800cf5c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 fb34 	bl	800d228 <WIZCHIP_READ>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	777b      	strb	r3, [r7, #29]
 800cbc4:	7f7b      	ldrb	r3, [r7, #29]
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	3b02      	subs	r3, #2
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d902      	bls.n	800cbd6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800cbd0:	f06f 0304 	mvn.w	r3, #4
 800cbd4:	e1c2      	b.n	800cf5c <recvfrom+0x3cc>
         break;
 800cbd6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800cbd8:	89bb      	ldrh	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d102      	bne.n	800cbe4 <recvfrom+0x54>
 800cbde:	f06f 030d 	mvn.w	r3, #13
 800cbe2:	e1bb      	b.n	800cf5c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	4a88      	ldr	r2, [pc, #544]	; (800ce08 <recvfrom+0x278>)
 800cbe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d128      	bne.n	800cc42 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fcbd 	bl	800d572 <getSn_RX_RSR>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	3301      	adds	r3, #1
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fb0d 	bl	800d228 <WIZCHIP_READ>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <recvfrom+0x8a>
 800cc14:	f06f 0303 	mvn.w	r3, #3
 800cc18:	e1a0      	b.n	800cf5c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800cc1a:	4b7c      	ldr	r3, [pc, #496]	; (800ce0c <recvfrom+0x27c>)
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	fa42 f303 	asr.w	r3, r2, r3
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d004      	beq.n	800cc38 <recvfrom+0xa8>
 800cc2e:	8bfb      	ldrh	r3, [r7, #30]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <recvfrom+0xa8>
 800cc34:	2300      	movs	r3, #0
 800cc36:	e191      	b.n	800cf5c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800cc38:	8bfb      	ldrh	r3, [r7, #30]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d100      	bne.n	800cc40 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800cc3e:	e7d7      	b.n	800cbf0 <recvfrom+0x60>
         if(pack_len != 0) break;
 800cc40:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800cc42:	7f7b      	ldrb	r3, [r7, #29]
 800cc44:	f003 0307 	and.w	r3, r3, #7
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d079      	beq.n	800cd40 <recvfrom+0x1b0>
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	f300 8142 	bgt.w	800ced6 <recvfrom+0x346>
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d003      	beq.n	800cc5e <recvfrom+0xce>
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	f000 80dc 	beq.w	800ce14 <recvfrom+0x284>
 800cc5c:	e13b      	b.n	800ced6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	4a69      	ldr	r2, [pc, #420]	; (800ce08 <recvfrom+0x278>)
 800cc62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d152      	bne.n	800cd10 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800cc6a:	f107 0114 	add.w	r1, r7, #20
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	2208      	movs	r2, #8
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 fd24 	bl	800d6c0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc84:	2140      	movs	r1, #64	; 0x40
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fb1a 	bl	800d2c0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800cc8c:	bf00      	nop
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	3301      	adds	r3, #1
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 fac4 	bl	800d228 <WIZCHIP_READ>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1f3      	bne.n	800cc8e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800cca6:	7d3a      	ldrb	r2, [r7, #20]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	7d7a      	ldrb	r2, [r7, #21]
 800ccb2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	7dba      	ldrb	r2, [r7, #22]
 800ccba:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	7dfa      	ldrb	r2, [r7, #23]
 800ccc2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800ccc4:	7e3b      	ldrb	r3, [r7, #24]
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	021b      	lsls	r3, r3, #8
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	7e7b      	ldrb	r3, [r7, #25]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	4413      	add	r3, r2
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800cce0:	7eba      	ldrb	r2, [r7, #26]
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
 800cce4:	b291      	uxth	r1, r2
 800cce6:	4a48      	ldr	r2, [pc, #288]	; (800ce08 <recvfrom+0x278>)
 800cce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	4a46      	ldr	r2, [pc, #280]	; (800ce08 <recvfrom+0x278>)
 800ccf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf4:	021b      	lsls	r3, r3, #8
 800ccf6:	b299      	uxth	r1, r3
 800ccf8:	7efb      	ldrb	r3, [r7, #27]
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	440a      	add	r2, r1
 800cd00:	b291      	uxth	r1, r2
 800cd02:	4a41      	ldr	r2, [pc, #260]	; (800ce08 <recvfrom+0x278>)
 800cd04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4a41      	ldr	r2, [pc, #260]	; (800ce10 <recvfrom+0x280>)
 800cd0c:	2180      	movs	r1, #128	; 0x80
 800cd0e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
 800cd12:	4a3d      	ldr	r2, [pc, #244]	; (800ce08 <recvfrom+0x278>)
 800cd14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd18:	89ba      	ldrh	r2, [r7, #12]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d202      	bcs.n	800cd24 <recvfrom+0x194>
 800cd1e:	89bb      	ldrh	r3, [r7, #12]
 800cd20:	83fb      	strh	r3, [r7, #30]
 800cd22:	e004      	b.n	800cd2e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	4a38      	ldr	r2, [pc, #224]	; (800ce08 <recvfrom+0x278>)
 800cd28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd2c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800cd2e:	8bfb      	ldrh	r3, [r7, #30]
 800cd30:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800cd32:	8bfa      	ldrh	r2, [r7, #30]
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fcc1 	bl	800d6c0 <wiz_recv_data>
			break;
 800cd3e:	e0d6      	b.n	800ceee <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	4a31      	ldr	r2, [pc, #196]	; (800ce08 <recvfrom+0x278>)
 800cd44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d146      	bne.n	800cdda <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800cd4c:	f107 0114 	add.w	r1, r7, #20
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	2202      	movs	r2, #2
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fcb3 	bl	800d6c0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	3301      	adds	r3, #1
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd66:	2140      	movs	r1, #64	; 0x40
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 faa9 	bl	800d2c0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800cd6e:	bf00      	nop
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	3301      	adds	r3, #1
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 fa53 	bl	800d228 <WIZCHIP_READ>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1f3      	bne.n	800cd70 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800cd88:	7d3a      	ldrb	r2, [r7, #20]
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	b291      	uxth	r1, r2
 800cd8e:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <recvfrom+0x278>)
 800cd90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	4a1c      	ldr	r2, [pc, #112]	; (800ce08 <recvfrom+0x278>)
 800cd98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd9c:	021b      	lsls	r3, r3, #8
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	7d7b      	ldrb	r3, [r7, #21]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	4413      	add	r3, r2
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	3a02      	subs	r2, #2
 800cdac:	b291      	uxth	r1, r2
 800cdae:	4a16      	ldr	r2, [pc, #88]	; (800ce08 <recvfrom+0x278>)
 800cdb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <recvfrom+0x278>)
 800cdb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdbc:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d906      	bls.n	800cdd2 <recvfrom+0x242>
   			{
   			   close(sn);
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff fabe 	bl	800c348 <close>
   			   return SOCKFATAL_PACKLEN;
 800cdcc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800cdd0:	e0c4      	b.n	800cf5c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
 800cdd4:	4a0e      	ldr	r2, [pc, #56]	; (800ce10 <recvfrom+0x280>)
 800cdd6:	2180      	movs	r1, #128	; 0x80
 800cdd8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	4a0a      	ldr	r2, [pc, #40]	; (800ce08 <recvfrom+0x278>)
 800cdde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cde2:	89ba      	ldrh	r2, [r7, #12]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d202      	bcs.n	800cdee <recvfrom+0x25e>
 800cde8:	89bb      	ldrh	r3, [r7, #12]
 800cdea:	83fb      	strh	r3, [r7, #30]
 800cdec:	e004      	b.n	800cdf8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	4a05      	ldr	r2, [pc, #20]	; (800ce08 <recvfrom+0x278>)
 800cdf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdf6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800cdf8:	8bfa      	ldrh	r2, [r7, #30]
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fc5e 	bl	800d6c0 <wiz_recv_data>
		   break;
 800ce04:	e073      	b.n	800ceee <recvfrom+0x35e>
 800ce06:	bf00      	nop
 800ce08:	20000518 	.word	0x20000518
 800ce0c:	20000514 	.word	0x20000514
 800ce10:	20000528 	.word	0x20000528
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	4a53      	ldr	r2, [pc, #332]	; (800cf64 <recvfrom+0x3d4>)
 800ce18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d144      	bne.n	800ceaa <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800ce20:	f107 0114 	add.w	r1, r7, #20
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
 800ce26:	2206      	movs	r2, #6
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fc49 	bl	800d6c0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	3301      	adds	r3, #1
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ce3a:	2140      	movs	r1, #64	; 0x40
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fa3f 	bl	800d2c0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800ce42:	bf00      	nop
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	3301      	adds	r3, #1
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f9e9 	bl	800d228 <WIZCHIP_READ>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1f3      	bne.n	800ce44 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800ce5c:	7d3a      	ldrb	r2, [r7, #20]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3301      	adds	r3, #1
 800ce66:	7d7a      	ldrb	r2, [r7, #21]
 800ce68:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	7dba      	ldrb	r2, [r7, #22]
 800ce70:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3303      	adds	r3, #3
 800ce76:	7dfa      	ldrb	r2, [r7, #23]
 800ce78:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800ce7a:	7e3a      	ldrb	r2, [r7, #24]
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	b291      	uxth	r1, r2
 800ce80:	4a38      	ldr	r2, [pc, #224]	; (800cf64 <recvfrom+0x3d4>)
 800ce82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	4a36      	ldr	r2, [pc, #216]	; (800cf64 <recvfrom+0x3d4>)
 800ce8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce8e:	021b      	lsls	r3, r3, #8
 800ce90:	b299      	uxth	r1, r3
 800ce92:	7e7b      	ldrb	r3, [r7, #25]
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	440a      	add	r2, r1
 800ce9a:	b291      	uxth	r1, r2
 800ce9c:	4a31      	ldr	r2, [pc, #196]	; (800cf64 <recvfrom+0x3d4>)
 800ce9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800cea2:	7bfb      	ldrb	r3, [r7, #15]
 800cea4:	4a30      	ldr	r2, [pc, #192]	; (800cf68 <recvfrom+0x3d8>)
 800cea6:	2180      	movs	r1, #128	; 0x80
 800cea8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	4a2d      	ldr	r2, [pc, #180]	; (800cf64 <recvfrom+0x3d4>)
 800ceae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceb2:	89ba      	ldrh	r2, [r7, #12]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d202      	bcs.n	800cebe <recvfrom+0x32e>
 800ceb8:	89bb      	ldrh	r3, [r7, #12]
 800ceba:	83fb      	strh	r3, [r7, #30]
 800cebc:	e004      	b.n	800cec8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	4a28      	ldr	r2, [pc, #160]	; (800cf64 <recvfrom+0x3d4>)
 800cec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cec6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800cec8:	8bfa      	ldrh	r2, [r7, #30]
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fbf6 	bl	800d6c0 <wiz_recv_data>
			break;
 800ced4:	e00b      	b.n	800ceee <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800ced6:	8bfa      	ldrh	r2, [r7, #30]
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	4611      	mov	r1, r2
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fc4b 	bl	800d778 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	491f      	ldr	r1, [pc, #124]	; (800cf64 <recvfrom+0x3d4>)
 800cee6:	8bfa      	ldrh	r2, [r7, #30]
 800cee8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800ceec:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	3301      	adds	r3, #1
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cefa:	2140      	movs	r1, #64	; 0x40
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 f9df 	bl	800d2c0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800cf02:	bf00      	nop
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	3301      	adds	r3, #1
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 f989 	bl	800d228 <WIZCHIP_READ>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1f3      	bne.n	800cf04 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	4a11      	ldr	r2, [pc, #68]	; (800cf64 <recvfrom+0x3d4>)
 800cf20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	8bfa      	ldrh	r2, [r7, #30]
 800cf28:	1a8a      	subs	r2, r1, r2
 800cf2a:	b291      	uxth	r1, r2
 800cf2c:	4a0d      	ldr	r2, [pc, #52]	; (800cf64 <recvfrom+0x3d4>)
 800cf2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	4a0b      	ldr	r2, [pc, #44]	; (800cf64 <recvfrom+0x3d4>)
 800cf36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d009      	beq.n	800cf52 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	4a09      	ldr	r2, [pc, #36]	; (800cf68 <recvfrom+0x3d8>)
 800cf42:	5cd2      	ldrb	r2, [r2, r3]
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	f042 0201 	orr.w	r2, r2, #1
 800cf4a:	b2d1      	uxtb	r1, r2
 800cf4c:	4a06      	ldr	r2, [pc, #24]	; (800cf68 <recvfrom+0x3d8>)
 800cf4e:	54d1      	strb	r1, [r2, r3]
 800cf50:	e003      	b.n	800cf5a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
 800cf54:	4a04      	ldr	r2, [pc, #16]	; (800cf68 <recvfrom+0x3d8>)
 800cf56:	2100      	movs	r1, #0
 800cf58:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800cf5a:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3720      	adds	r7, #32
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	20000518 	.word	0x20000518
 800cf68:	20000528 	.word	0x20000528

0800cf6c <telnetConfigServer_InterruptCallback>:
uint8_t lastSocketProcess;
uint8_t socket_is_active;
// Реакция на прерывание по ноге


int32_t telnetConfigServer_InterruptCallback() {
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
//	 loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
 if (socket_is_active){
 800cf72:	4b75      	ldr	r3, [pc, #468]	; (800d148 <telnetConfigServer_InterruptCallback+0x1dc>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 80d8 	beq.w	800d12c <telnetConfigServer_InterruptCallback+0x1c0>
	   int32_t ret;
	   uint16_t size = 0, sentsize=0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	80fb      	strh	r3, [r7, #6]
 800cf80:	2300      	movs	r3, #0
 800cf82:	80bb      	strh	r3, [r7, #4]
	   lastSocketStatus = getSn_SR(TELNET_SOCKET);
 800cf84:	f44f 705a 	mov.w	r0, #872	; 0x368
 800cf88:	f000 f94e 	bl	800d228 <WIZCHIP_READ>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4b6e      	ldr	r3, [pc, #440]	; (800d14c <telnetConfigServer_InterruptCallback+0x1e0>)
 800cf92:	701a      	strb	r2, [r3, #0]
	   switch(lastSocketStatus)
 800cf94:	4b6d      	ldr	r3, [pc, #436]	; (800d14c <telnetConfigServer_InterruptCallback+0x1e0>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b1c      	cmp	r3, #28
 800cf9a:	f200 80c9 	bhi.w	800d130 <telnetConfigServer_InterruptCallback+0x1c4>
 800cf9e:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <telnetConfigServer_InterruptCallback+0x38>)
 800cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa4:	0800d10b 	.word	0x0800d10b
 800cfa8:	0800d131 	.word	0x0800d131
 800cfac:	0800d131 	.word	0x0800d131
 800cfb0:	0800d131 	.word	0x0800d131
 800cfb4:	0800d131 	.word	0x0800d131
 800cfb8:	0800d131 	.word	0x0800d131
 800cfbc:	0800d131 	.word	0x0800d131
 800cfc0:	0800d131 	.word	0x0800d131
 800cfc4:	0800d131 	.word	0x0800d131
 800cfc8:	0800d131 	.word	0x0800d131
 800cfcc:	0800d131 	.word	0x0800d131
 800cfd0:	0800d131 	.word	0x0800d131
 800cfd4:	0800d131 	.word	0x0800d131
 800cfd8:	0800d131 	.word	0x0800d131
 800cfdc:	0800d131 	.word	0x0800d131
 800cfe0:	0800d131 	.word	0x0800d131
 800cfe4:	0800d131 	.word	0x0800d131
 800cfe8:	0800d131 	.word	0x0800d131
 800cfec:	0800d131 	.word	0x0800d131
 800cff0:	0800d0f1 	.word	0x0800d0f1
 800cff4:	0800d131 	.word	0x0800d131
 800cff8:	0800d131 	.word	0x0800d131
 800cffc:	0800d131 	.word	0x0800d131
 800d000:	0800d019 	.word	0x0800d019
 800d004:	0800d131 	.word	0x0800d131
 800d008:	0800d131 	.word	0x0800d131
 800d00c:	0800d131 	.word	0x0800d131
 800d010:	0800d131 	.word	0x0800d131
 800d014:	0800d0d7 	.word	0x0800d0d7
	   {
	      case SOCK_ESTABLISHED:
	         if(getSn_IR(TELNET_SOCKET) & Sn_IR_CON)
 800d018:	f44f 701a 	mov.w	r0, #616	; 0x268
 800d01c:	f000 f904 	bl	800d228 <WIZCHIP_READ>
 800d020:	4603      	mov	r3, r0
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d007      	beq.n	800d03a <telnetConfigServer_InterruptCallback+0xce>
	         {lastSocketProcess = SOCKET_RECEIVE;
 800d02a:	4b49      	ldr	r3, [pc, #292]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d02c:	2202      	movs	r2, #2
 800d02e:	701a      	strb	r2, [r3, #0]

     			setSn_IR(TELNET_SOCKET,Sn_IR_CON);
 800d030:	2101      	movs	r1, #1
 800d032:	f44f 701a 	mov.w	r0, #616	; 0x268
 800d036:	f000 f943 	bl	800d2c0 <WIZCHIP_WRITE>
	         }
			 if((size = getSn_RX_RSR(TELNET_SOCKET)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800d03a:	2003      	movs	r0, #3
 800d03c:	f000 fa99 	bl	800d572 <getSn_RX_RSR>
 800d040:	4603      	mov	r3, r0
 800d042:	80fb      	strh	r3, [r7, #6]
 800d044:	88fb      	ldrh	r3, [r7, #6]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d041      	beq.n	800d0ce <telnetConfigServer_InterruptCallback+0x162>
	         {
				if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800d04a:	88fb      	ldrh	r3, [r7, #6]
 800d04c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d050:	d902      	bls.n	800d058 <telnetConfigServer_InterruptCallback+0xec>
 800d052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d056:	80fb      	strh	r3, [r7, #6]
				ret = recv(TELNET_SOCKET, tcp_buffer, size);
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	461a      	mov	r2, r3
 800d05c:	493d      	ldr	r1, [pc, #244]	; (800d154 <telnetConfigServer_InterruptCallback+0x1e8>)
 800d05e:	2003      	movs	r0, #3
 800d060:	f7ff fbaa 	bl	800c7b8 <recv>
 800d064:	6038      	str	r0, [r7, #0]
				lastSocketProcess = SOCKET_PROCESSING;
 800d066:	4b3a      	ldr	r3, [pc, #232]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d068:	2203      	movs	r2, #3
 800d06a:	701a      	strb	r2, [r3, #0]
				ret = parseCommand(tcp_buffer,ret, tcp_buffer);
 800d06c:	4a39      	ldr	r2, [pc, #228]	; (800d154 <telnetConfigServer_InterruptCallback+0x1e8>)
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	4838      	ldr	r0, [pc, #224]	; (800d154 <telnetConfigServer_InterruptCallback+0x1e8>)
 800d072:	f7fe faff 	bl	800b674 <parseCommand>
 800d076:	6038      	str	r0, [r7, #0]
				if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	dc01      	bgt.n	800d082 <telnetConfigServer_InterruptCallback+0x116>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	e05e      	b.n	800d140 <telnetConfigServer_InterruptCallback+0x1d4>
				size = (uint16_t) ret;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	80fb      	strh	r3, [r7, #6]
				sentsize = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	80bb      	strh	r3, [r7, #4]


				lastSocketProcess = SOCKET_TRANSMIT;
 800d08a:	4b31      	ldr	r3, [pc, #196]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d08c:	2204      	movs	r2, #4
 800d08e:	701a      	strb	r2, [r3, #0]
				while(size != sentsize)
 800d090:	e018      	b.n	800d0c4 <telnetConfigServer_InterruptCallback+0x158>
				{
					ret = send(TELNET_SOCKET, tcp_buffer+sentsize, size-sentsize);
 800d092:	88bb      	ldrh	r3, [r7, #4]
 800d094:	4a2f      	ldr	r2, [pc, #188]	; (800d154 <telnetConfigServer_InterruptCallback+0x1e8>)
 800d096:	1899      	adds	r1, r3, r2
 800d098:	88fa      	ldrh	r2, [r7, #6]
 800d09a:	88bb      	ldrh	r3, [r7, #4]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	2003      	movs	r0, #3
 800d0a4:	f7ff fa8e 	bl	800c5c4 <send>
 800d0a8:	6038      	str	r0, [r7, #0]
					if(ret < 0)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	da04      	bge.n	800d0ba <telnetConfigServer_InterruptCallback+0x14e>
					{
						close(TELNET_SOCKET);
 800d0b0:	2003      	movs	r0, #3
 800d0b2:	f7ff f949 	bl	800c348 <close>
						return ret;
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	e042      	b.n	800d140 <telnetConfigServer_InterruptCallback+0x1d4>
					}
					sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	88bb      	ldrh	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	80bb      	strh	r3, [r7, #4]
				while(size != sentsize)
 800d0c4:	88fa      	ldrh	r2, [r7, #6]
 800d0c6:	88bb      	ldrh	r3, [r7, #4]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d1e2      	bne.n	800d092 <telnetConfigServer_InterruptCallback+0x126>
				}
	         } else {
	        	 lastSocketProcess = SOCKET_IDLE;
	         }
	         break;
 800d0cc:	e037      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	        	 lastSocketProcess = SOCKET_IDLE;
 800d0ce:	4b20      	ldr	r3, [pc, #128]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	701a      	strb	r2, [r3, #0]
	         break;
 800d0d4:	e033      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	      case SOCK_CLOSE_WAIT :
	    	   lastSocketProcess = SOCKET_ERROR;
 800d0d6:	4b1e      	ldr	r3, [pc, #120]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
	    	  if((ret = disconnect(TELNET_SOCKET)) != SOCK_OK) return ret;
 800d0dc:	2003      	movs	r0, #3
 800d0de:	f7ff f9fb 	bl	800c4d8 <disconnect>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	603b      	str	r3, [r7, #0]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d023      	beq.n	800d134 <telnetConfigServer_InterruptCallback+0x1c8>
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	e027      	b.n	800d140 <telnetConfigServer_InterruptCallback+0x1d4>
	         break;
	      case SOCK_INIT :
	    	   lastSocketProcess = SOCKET_ERROR;
 800d0f0:	4b17      	ldr	r3, [pc, #92]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	701a      	strb	r2, [r3, #0]

	         if( (ret = listen(TELNET_SOCKET)) != SOCK_OK) return ret;
 800d0f6:	2003      	movs	r0, #3
 800d0f8:	f7ff f994 	bl	800c424 <listen>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	603b      	str	r3, [r7, #0]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d018      	beq.n	800d138 <telnetConfigServer_InterruptCallback+0x1cc>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	e01a      	b.n	800d140 <telnetConfigServer_InterruptCallback+0x1d4>
	         break;
	      case SOCK_CLOSED:
	    	   lastSocketProcess = SOCKET_ERROR;
 800d10a:	4b11      	ldr	r3, [pc, #68]	; (800d150 <telnetConfigServer_InterruptCallback+0x1e4>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
	         if((ret = socket(TELNET_SOCKET, Sn_MR_TCP, config_port, SF_TCP_NODELAY)) != TELNET_SOCKET) return ret;
 800d110:	4b11      	ldr	r3, [pc, #68]	; (800d158 <telnetConfigServer_InterruptCallback+0x1ec>)
 800d112:	881a      	ldrh	r2, [r3, #0]
 800d114:	2320      	movs	r3, #32
 800d116:	2101      	movs	r1, #1
 800d118:	2003      	movs	r0, #3
 800d11a:	f7fe ffff 	bl	800c11c <socket>
 800d11e:	4603      	mov	r3, r0
 800d120:	603b      	str	r3, [r7, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b03      	cmp	r3, #3
 800d126:	d009      	beq.n	800d13c <telnetConfigServer_InterruptCallback+0x1d0>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	e009      	b.n	800d140 <telnetConfigServer_InterruptCallback+0x1d4>
	         break;
	      default:
	         break;
	   }
 }
 800d12c:	bf00      	nop
 800d12e:	e006      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	         break;
 800d130:	bf00      	nop
 800d132:	e004      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	         break;
 800d134:	bf00      	nop
 800d136:	e002      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	         break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <telnetConfigServer_InterruptCallback+0x1d2>
	         break;
 800d13c:	bf00      	nop
	   return 1;
 800d13e:	2301      	movs	r3, #1
};
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	200013eb 	.word	0x200013eb
 800d14c:	200013ea 	.word	0x200013ea
 800d150:	200013e9 	.word	0x200013e9
 800d154:	20000ae0 	.word	0x20000ae0
 800d158:	200000a4 	.word	0x200000a4

0800d15c <telnetConfigServer_Init>:

void telnetConfigServer_Init(uint16_t port) {
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	4603      	mov	r3, r0
 800d164:	80fb      	strh	r3, [r7, #6]
config_port = port;
 800d166:	4a0b      	ldr	r2, [pc, #44]	; (800d194 <telnetConfigServer_Init+0x38>)
 800d168:	88fb      	ldrh	r3, [r7, #6]
 800d16a:	8013      	strh	r3, [r2, #0]
lastSocketStatus = SOCK_INIT;
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <telnetConfigServer_Init+0x3c>)
 800d16e:	2213      	movs	r2, #19
 800d170:	701a      	strb	r2, [r3, #0]
lastSocketProcess = SOCKET_ERROR;						close(TELNET_SOCKET);
 800d172:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <telnetConfigServer_Init+0x40>)
 800d174:	2200      	movs	r2, #0
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	2003      	movs	r0, #3
 800d17a:	f7ff f8e5 	bl	800c348 <close>

socket(TELNET_SOCKET, Sn_MR_TCP, config_port, SF_TCP_NODELAY);
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <telnetConfigServer_Init+0x38>)
 800d180:	881a      	ldrh	r2, [r3, #0]
 800d182:	2320      	movs	r3, #32
 800d184:	2101      	movs	r1, #1
 800d186:	2003      	movs	r0, #3
 800d188:	f7fe ffc8 	bl	800c11c <socket>
};
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	200000a4 	.word	0x200000a4
 800d198:	200013ea 	.word	0x200013ea
 800d19c:	200013e9 	.word	0x200013e9

0800d1a0 <telnetConfigServer_getPort>:
uint16_t telnetConfigServer_getPort(){
 800d1a0:	b480      	push	{r7}
 800d1a2:	af00      	add	r7, sp, #0
	return config_port;
 800d1a4:	4b02      	ldr	r3, [pc, #8]	; (800d1b0 <telnetConfigServer_getPort+0x10>)
 800d1a6:	881b      	ldrh	r3, [r3, #0]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bc80      	pop	{r7}
 800d1ae:	4770      	bx	lr
 800d1b0:	200000a4 	.word	0x200000a4

0800d1b4 <telnetConfigServer_SocketStatus>:
void telnetConfigServer_registerParameters(/*ParameterList *params*/){

}

int32_t telnetConfigServer_SocketStatus() {
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0
	return lastSocketStatus;
 800d1b8:	4b02      	ldr	r3, [pc, #8]	; (800d1c4 <telnetConfigServer_SocketStatus+0x10>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bc80      	pop	{r7}
 800d1c2:	4770      	bx	lr
 800d1c4:	200013ea 	.word	0x200013ea

0800d1c8 <telnetConfigServer_SocketProcess>:
uint8_t telnetConfigServer_SocketProcess() {
 800d1c8:	b480      	push	{r7}
 800d1ca:	af00      	add	r7, sp, #0
	return lastSocketProcess;
 800d1cc:	4b02      	ldr	r3, [pc, #8]	; (800d1d8 <telnetConfigServer_SocketProcess+0x10>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bc80      	pop	{r7}
 800d1d6:	4770      	bx	lr
 800d1d8:	200013e9 	.word	0x200013e9

0800d1dc <telnetConfigServer_SocketOpen>:
void telnetConfigServer_SocketOpen() {
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
	socket_is_active = 1;
 800d1e0:	4b03      	ldr	r3, [pc, #12]	; (800d1f0 <telnetConfigServer_SocketOpen+0x14>)
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	701a      	strb	r2, [r3, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bc80      	pop	{r7}
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	200013eb 	.word	0x200013eb

0800d1f4 <telnetConfigServer_SocketClose>:

void telnetConfigServer_SocketClose() {
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
	lastSocketStatus = SOCK_CLOSED;
 800d1f8:	4b08      	ldr	r3, [pc, #32]	; (800d21c <telnetConfigServer_SocketClose+0x28>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	701a      	strb	r2, [r3, #0]
	lastSocketProcess = SOCKET_ERROR;
 800d1fe:	4b08      	ldr	r3, [pc, #32]	; (800d220 <telnetConfigServer_SocketClose+0x2c>)
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
	close(TELNET_SOCKET);
 800d204:	2003      	movs	r0, #3
 800d206:	f7ff f89f 	bl	800c348 <close>

	disconnect(TELNET_SOCKET);
 800d20a:	2003      	movs	r0, #3
 800d20c:	f7ff f964 	bl	800c4d8 <disconnect>
	socket_is_active = 0;
 800d210:	4b04      	ldr	r3, [pc, #16]	; (800d224 <telnetConfigServer_SocketClose+0x30>)
 800d212:	2200      	movs	r2, #0
 800d214:	701a      	strb	r2, [r3, #0]
}
 800d216:	bf00      	nop
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	200013ea 	.word	0x200013ea
 800d220:	200013e9 	.word	0x200013e9
 800d224:	200013eb 	.word	0x200013eb

0800d228 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800d230:	4b22      	ldr	r3, [pc, #136]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d236:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800d23c:	4b1f      	ldr	r3, [pc, #124]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d003      	beq.n	800d24c <WIZCHIP_READ+0x24>
 800d244:	4b1d      	ldr	r3, [pc, #116]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d114      	bne.n	800d276 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800d24c:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d24e:	6a1b      	ldr	r3, [r3, #32]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	0c12      	lsrs	r2, r2, #16
 800d254:	b2d2      	uxtb	r2, r2
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800d25a:	4b18      	ldr	r3, [pc, #96]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	0a12      	lsrs	r2, r2, #8
 800d262:	b2d2      	uxtb	r2, r2
 800d264:	4610      	mov	r0, r2
 800d266:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800d268:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d26a:	6a1b      	ldr	r3, [r3, #32]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	b2d2      	uxtb	r2, r2
 800d270:	4610      	mov	r0, r2
 800d272:	4798      	blx	r3
 800d274:	e011      	b.n	800d29a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	0c1b      	lsrs	r3, r3, #16
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	0a1b      	lsrs	r3, r3, #8
 800d282:	b2db      	uxtb	r3, r3
 800d284:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800d28c:	4b0b      	ldr	r3, [pc, #44]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	f107 020c 	add.w	r2, r7, #12
 800d294:	2103      	movs	r1, #3
 800d296:	4610      	mov	r0, r2
 800d298:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800d29a:	4b08      	ldr	r3, [pc, #32]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	4798      	blx	r3
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d2aa:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <WIZCHIP_READ+0x94>)
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	4798      	blx	r3
   return ret;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	200000a8 	.word	0x200000a8

0800d2c0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800d2cc:	4b22      	ldr	r3, [pc, #136]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d2d2:	4b21      	ldr	r3, [pc, #132]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d2d4:	695b      	ldr	r3, [r3, #20]
 800d2d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f043 0304 	orr.w	r3, r3, #4
 800d2de:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800d2e0:	4b1d      	ldr	r3, [pc, #116]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d119      	bne.n	800d31c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800d2e8:	4b1b      	ldr	r3, [pc, #108]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d2ea:	6a1b      	ldr	r3, [r3, #32]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	0c12      	lsrs	r2, r2, #16
 800d2f0:	b2d2      	uxtb	r2, r2
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	0a12      	lsrs	r2, r2, #8
 800d2fe:	b2d2      	uxtb	r2, r2
 800d300:	4610      	mov	r0, r2
 800d302:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800d304:	4b14      	ldr	r3, [pc, #80]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d306:	6a1b      	ldr	r3, [r3, #32]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	4610      	mov	r0, r2
 800d30e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800d310:	4b11      	ldr	r3, [pc, #68]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d312:	6a1b      	ldr	r3, [r3, #32]
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	4610      	mov	r0, r2
 800d318:	4798      	blx	r3
 800d31a:	e013      	b.n	800d344 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	0c1b      	lsrs	r3, r3, #16
 800d320:	b2db      	uxtb	r3, r3
 800d322:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800d332:	78fb      	ldrb	r3, [r7, #3]
 800d334:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d33a:	f107 020c 	add.w	r2, r7, #12
 800d33e:	2104      	movs	r1, #4
 800d340:	4610      	mov	r0, r2
 800d342:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d34a:	4b03      	ldr	r3, [pc, #12]	; (800d358 <WIZCHIP_WRITE+0x98>)
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	4798      	blx	r3
}
 800d350:	bf00      	nop
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	200000a8 	.word	0x200000a8

0800d35c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b087      	sub	sp, #28
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	4613      	mov	r3, r2
 800d368:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800d36a:	4b2b      	ldr	r3, [pc, #172]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d370:	4b29      	ldr	r3, [pc, #164]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800d376:	4b28      	ldr	r3, [pc, #160]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <WIZCHIP_READ_BUF+0x2a>
 800d37e:	4b26      	ldr	r3, [pc, #152]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d382:	2b00      	cmp	r3, #0
 800d384:	d126      	bne.n	800d3d4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800d386:	4b24      	ldr	r3, [pc, #144]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	0c12      	lsrs	r2, r2, #16
 800d38e:	b2d2      	uxtb	r2, r2
 800d390:	4610      	mov	r0, r2
 800d392:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800d394:	4b20      	ldr	r3, [pc, #128]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d396:	6a1b      	ldr	r3, [r3, #32]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	0a12      	lsrs	r2, r2, #8
 800d39c:	b2d2      	uxtb	r2, r2
 800d39e:	4610      	mov	r0, r2
 800d3a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800d3a2:	4b1d      	ldr	r3, [pc, #116]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	b2d2      	uxtb	r2, r2
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	82fb      	strh	r3, [r7, #22]
 800d3b2:	e00a      	b.n	800d3ca <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800d3b4:	4b18      	ldr	r3, [pc, #96]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	8afa      	ldrh	r2, [r7, #22]
 800d3ba:	68b9      	ldr	r1, [r7, #8]
 800d3bc:	188c      	adds	r4, r1, r2
 800d3be:	4798      	blx	r3
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800d3c4:	8afb      	ldrh	r3, [r7, #22]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	82fb      	strh	r3, [r7, #22]
 800d3ca:	8afa      	ldrh	r2, [r7, #22]
 800d3cc:	88fb      	ldrh	r3, [r7, #6]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d3f0      	bcc.n	800d3b4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800d3d2:	e017      	b.n	800d404 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	0c1b      	lsrs	r3, r3, #16
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	0a1b      	lsrs	r3, r3, #8
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800d3ea:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ee:	f107 0210 	add.w	r2, r7, #16
 800d3f2:	2103      	movs	r1, #3
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800d3f8:	4b07      	ldr	r3, [pc, #28]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	88fa      	ldrh	r2, [r7, #6]
 800d3fe:	4611      	mov	r1, r2
 800d400:	68b8      	ldr	r0, [r7, #8]
 800d402:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d40a:	4b03      	ldr	r3, [pc, #12]	; (800d418 <WIZCHIP_READ_BUF+0xbc>)
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	4798      	blx	r3
}
 800d410:	bf00      	nop
 800d412:	371c      	adds	r7, #28
 800d414:	46bd      	mov	sp, r7
 800d416:	bd90      	pop	{r4, r7, pc}
 800d418:	200000a8 	.word	0x200000a8

0800d41c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	4613      	mov	r3, r2
 800d428:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800d42a:	4b2b      	ldr	r3, [pc, #172]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	4798      	blx	r3
   WIZCHIP.CS._select();
 800d430:	4b29      	ldr	r3, [pc, #164]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f043 0304 	orr.w	r3, r3, #4
 800d43c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800d43e:	4b26      	ldr	r3, [pc, #152]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d442:	2b00      	cmp	r3, #0
 800d444:	d126      	bne.n	800d494 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800d446:	4b24      	ldr	r3, [pc, #144]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	0c12      	lsrs	r2, r2, #16
 800d44e:	b2d2      	uxtb	r2, r2
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800d454:	4b20      	ldr	r3, [pc, #128]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d456:	6a1b      	ldr	r3, [r3, #32]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	0a12      	lsrs	r2, r2, #8
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	4610      	mov	r0, r2
 800d460:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800d462:	4b1d      	ldr	r3, [pc, #116]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	b2d2      	uxtb	r2, r2
 800d46a:	4610      	mov	r0, r2
 800d46c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800d46e:	2300      	movs	r3, #0
 800d470:	82fb      	strh	r3, [r7, #22]
 800d472:	e00a      	b.n	800d48a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800d474:	4b18      	ldr	r3, [pc, #96]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d476:	6a1b      	ldr	r3, [r3, #32]
 800d478:	8afa      	ldrh	r2, [r7, #22]
 800d47a:	68b9      	ldr	r1, [r7, #8]
 800d47c:	440a      	add	r2, r1
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	4610      	mov	r0, r2
 800d482:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800d484:	8afb      	ldrh	r3, [r7, #22]
 800d486:	3301      	adds	r3, #1
 800d488:	82fb      	strh	r3, [r7, #22]
 800d48a:	8afa      	ldrh	r2, [r7, #22]
 800d48c:	88fb      	ldrh	r3, [r7, #6]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d3f0      	bcc.n	800d474 <WIZCHIP_WRITE_BUF+0x58>
 800d492:	e017      	b.n	800d4c4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	0c1b      	lsrs	r3, r3, #16
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	0a1b      	lsrs	r3, r3, #8
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800d4aa:	4b0b      	ldr	r3, [pc, #44]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ae:	f107 0210 	add.w	r2, r7, #16
 800d4b2:	2103      	movs	r1, #3
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800d4b8:	4b07      	ldr	r3, [pc, #28]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4bc:	88fa      	ldrh	r2, [r7, #6]
 800d4be:	4611      	mov	r1, r2
 800d4c0:	68b8      	ldr	r0, [r7, #8]
 800d4c2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800d4c4:	4b04      	ldr	r3, [pc, #16]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800d4ca:	4b03      	ldr	r3, [pc, #12]	; (800d4d8 <WIZCHIP_WRITE_BUF+0xbc>)
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	4798      	blx	r3
}
 800d4d0:	bf00      	nop
 800d4d2:	3718      	adds	r7, #24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	200000a8 	.word	0x200000a8

0800d4dc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800d4dc:	b590      	push	{r4, r7, lr}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	81fb      	strh	r3, [r7, #14]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800d4ee:	79fb      	ldrb	r3, [r7, #7]
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff fe94 	bl	800d228 <WIZCHIP_READ>
 800d500:	4603      	mov	r3, r0
 800d502:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800d504:	89bb      	ldrh	r3, [r7, #12]
 800d506:	021b      	lsls	r3, r3, #8
 800d508:	b29c      	uxth	r4, r3
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	3301      	adds	r3, #1
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fe86 	bl	800d228 <WIZCHIP_READ>
 800d51c:	4603      	mov	r3, r0
 800d51e:	b29b      	uxth	r3, r3
 800d520:	4423      	add	r3, r4
 800d522:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800d524:	89bb      	ldrh	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d01a      	beq.n	800d560 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	3301      	adds	r3, #1
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fe76 	bl	800d228 <WIZCHIP_READ>
 800d53c:	4603      	mov	r3, r0
 800d53e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800d540:	89fb      	ldrh	r3, [r7, #14]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	b29c      	uxth	r4, r3
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	3301      	adds	r3, #1
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fe68 	bl	800d228 <WIZCHIP_READ>
 800d558:	4603      	mov	r3, r0
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4423      	add	r3, r4
 800d55e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800d560:	89fa      	ldrh	r2, [r7, #14]
 800d562:	89bb      	ldrh	r3, [r7, #12]
 800d564:	429a      	cmp	r2, r3
 800d566:	d1c2      	bne.n	800d4ee <getSn_TX_FSR+0x12>
   return val;
 800d568:	89fb      	ldrh	r3, [r7, #14]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd90      	pop	{r4, r7, pc}

0800d572 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800d572:	b590      	push	{r4, r7, lr}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	4603      	mov	r3, r0
 800d57a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	81fb      	strh	r3, [r7, #14]
 800d580:	2300      	movs	r3, #0
 800d582:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	3301      	adds	r3, #1
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fe49 	bl	800d228 <WIZCHIP_READ>
 800d596:	4603      	mov	r3, r0
 800d598:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800d59a:	89bb      	ldrh	r3, [r7, #12]
 800d59c:	021b      	lsls	r3, r3, #8
 800d59e:	b29c      	uxth	r4, r3
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	00db      	lsls	r3, r3, #3
 800d5a8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff fe3b 	bl	800d228 <WIZCHIP_READ>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	4423      	add	r3, r4
 800d5b8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800d5ba:	89bb      	ldrh	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d01a      	beq.n	800d5f6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff fe2b 	bl	800d228 <WIZCHIP_READ>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800d5d6:	89fb      	ldrh	r3, [r7, #14]
 800d5d8:	021b      	lsls	r3, r3, #8
 800d5da:	b29c      	uxth	r4, r3
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff fe1d 	bl	800d228 <WIZCHIP_READ>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4423      	add	r3, r4
 800d5f4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800d5f6:	89fa      	ldrh	r2, [r7, #14]
 800d5f8:	89bb      	ldrh	r3, [r7, #12]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d1c2      	bne.n	800d584 <getSn_RX_RSR+0x12>
   return val;
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	bd90      	pop	{r4, r7, pc}

0800d608 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800d608:	b590      	push	{r4, r7, lr}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	71fb      	strb	r3, [r7, #7]
 800d614:	4613      	mov	r3, r2
 800d616:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800d620:	88bb      	ldrh	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d048      	beq.n	800d6b8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	3301      	adds	r3, #1
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fdf8 	bl	800d228 <WIZCHIP_READ>
 800d638:	4603      	mov	r3, r0
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	021b      	lsls	r3, r3, #8
 800d63e:	b29c      	uxth	r4, r3
 800d640:	79fb      	ldrb	r3, [r7, #7]
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	3301      	adds	r3, #1
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff fdeb 	bl	800d228 <WIZCHIP_READ>
 800d652:	4603      	mov	r3, r0
 800d654:	b29b      	uxth	r3, r3
 800d656:	4423      	add	r3, r4
 800d658:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800d65a:	89fb      	ldrh	r3, [r7, #14]
 800d65c:	021b      	lsls	r3, r3, #8
 800d65e:	79fa      	ldrb	r2, [r7, #7]
 800d660:	0092      	lsls	r2, r2, #2
 800d662:	3202      	adds	r2, #2
 800d664:	00d2      	lsls	r2, r2, #3
 800d666:	4413      	add	r3, r2
 800d668:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800d66a:	88bb      	ldrh	r3, [r7, #4]
 800d66c:	461a      	mov	r2, r3
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	68b8      	ldr	r0, [r7, #8]
 800d672:	f7ff fed3 	bl	800d41c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800d676:	89fa      	ldrh	r2, [r7, #14]
 800d678:	88bb      	ldrh	r3, [r7, #4]
 800d67a:	4413      	add	r3, r2
 800d67c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	3301      	adds	r3, #1
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800d68a:	461a      	mov	r2, r3
 800d68c:	89fb      	ldrh	r3, [r7, #14]
 800d68e:	0a1b      	lsrs	r3, r3, #8
 800d690:	b29b      	uxth	r3, r3
 800d692:	b2db      	uxtb	r3, r3
 800d694:	4619      	mov	r1, r3
 800d696:	4610      	mov	r0, r2
 800d698:	f7ff fe12 	bl	800d2c0 <WIZCHIP_WRITE>
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	89fb      	ldrh	r3, [r7, #14]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	f7ff fe05 	bl	800d2c0 <WIZCHIP_WRITE>
 800d6b6:	e000      	b.n	800d6ba <wiz_send_data+0xb2>
   if(len == 0)  return;
 800d6b8:	bf00      	nop
}
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd90      	pop	{r4, r7, pc}

0800d6c0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800d6c0:	b590      	push	{r4, r7, lr}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	6039      	str	r1, [r7, #0]
 800d6ca:	71fb      	strb	r3, [r7, #7]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800d6d8:	88bb      	ldrh	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d048      	beq.n	800d770 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	00db      	lsls	r3, r3, #3
 800d6e6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff fd9c 	bl	800d228 <WIZCHIP_READ>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	b29c      	uxth	r4, r3
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff fd8f 	bl	800d228 <WIZCHIP_READ>
 800d70a:	4603      	mov	r3, r0
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	4423      	add	r3, r4
 800d710:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800d712:	89fb      	ldrh	r3, [r7, #14]
 800d714:	021b      	lsls	r3, r3, #8
 800d716:	79fa      	ldrb	r2, [r7, #7]
 800d718:	0092      	lsls	r2, r2, #2
 800d71a:	3203      	adds	r2, #3
 800d71c:	00d2      	lsls	r2, r2, #3
 800d71e:	4413      	add	r3, r2
 800d720:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800d722:	88bb      	ldrh	r3, [r7, #4]
 800d724:	461a      	mov	r2, r3
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	68b8      	ldr	r0, [r7, #8]
 800d72a:	f7ff fe17 	bl	800d35c <WIZCHIP_READ_BUF>
   ptr += len;
 800d72e:	89fa      	ldrh	r2, [r7, #14]
 800d730:	88bb      	ldrh	r3, [r7, #4]
 800d732:	4413      	add	r3, r2
 800d734:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	3301      	adds	r3, #1
 800d73c:	00db      	lsls	r3, r3, #3
 800d73e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800d742:	461a      	mov	r2, r3
 800d744:	89fb      	ldrh	r3, [r7, #14]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7ff fdb6 	bl	800d2c0 <WIZCHIP_WRITE>
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	3301      	adds	r3, #1
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800d760:	461a      	mov	r2, r3
 800d762:	89fb      	ldrh	r3, [r7, #14]
 800d764:	b2db      	uxtb	r3, r3
 800d766:	4619      	mov	r1, r3
 800d768:	4610      	mov	r0, r2
 800d76a:	f7ff fda9 	bl	800d2c0 <WIZCHIP_WRITE>
 800d76e:	e000      	b.n	800d772 <wiz_recv_data+0xb2>
   if(len == 0) return;
 800d770:	bf00      	nop
}
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	bd90      	pop	{r4, r7, pc}

0800d778 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	460a      	mov	r2, r1
 800d782:	71fb      	strb	r3, [r7, #7]
 800d784:	4613      	mov	r3, r2
 800d786:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	3301      	adds	r3, #1
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fd45 	bl	800d228 <WIZCHIP_READ>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	021b      	lsls	r3, r3, #8
 800d7a4:	b29c      	uxth	r4, r3
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff fd38 	bl	800d228 <WIZCHIP_READ>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	4423      	add	r3, r4
 800d7be:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800d7c0:	89fa      	ldrh	r2, [r7, #14]
 800d7c2:	88bb      	ldrh	r3, [r7, #4]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800d7c8:	79fb      	ldrb	r3, [r7, #7]
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	89fb      	ldrh	r3, [r7, #14]
 800d7d8:	0a1b      	lsrs	r3, r3, #8
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	4619      	mov	r1, r3
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	f7ff fd6d 	bl	800d2c0 <WIZCHIP_WRITE>
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	89fb      	ldrh	r3, [r7, #14]
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7ff fd60 	bl	800d2c0 <WIZCHIP_WRITE>
}
 800d800:	bf00      	nop
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	bd90      	pop	{r4, r7, pc}

0800d808 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	bf00      	nop
 800d80e:	46bd      	mov	sp, r7
 800d810:	bc80      	pop	{r7}
 800d812:	4770      	bx	lr

0800d814 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
 800d818:	bf00      	nop
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bc80      	pop	{r7}
 800d81e:	4770      	bx	lr

0800d820 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
 800d824:	bf00      	nop
 800d826:	46bd      	mov	sp, r7
 800d828:	bc80      	pop	{r7}
 800d82a:	4770      	bx	lr

0800d82c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800d82c:	b480      	push	{r7}
 800d82e:	af00      	add	r7, sp, #0
 800d830:	bf00      	nop
 800d832:	46bd      	mov	sp, r7
 800d834:	bc80      	pop	{r7}
 800d836:	4770      	bx	lr

0800d838 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	4618      	mov	r0, r3
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bc80      	pop	{r7}
 800d84e:	4770      	bx	lr

0800d850 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	78fa      	ldrb	r2, [r7, #3]
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	bf00      	nop
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	bc80      	pop	{r7}
 800d86a:	4770      	bx	lr

0800d86c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800d86c:	b480      	push	{r7}
 800d86e:	af00      	add	r7, sp, #0
 800d870:	2300      	movs	r3, #0
 800d872:	4618      	mov	r0, r3
 800d874:	46bd      	mov	sp, r7
 800d876:	bc80      	pop	{r7}
 800d878:	4770      	bx	lr

0800d87a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800d87a:	b480      	push	{r7}
 800d87c:	b083      	sub	sp, #12
 800d87e:	af00      	add	r7, sp, #0
 800d880:	4603      	mov	r3, r0
 800d882:	71fb      	strb	r3, [r7, #7]
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	bc80      	pop	{r7}
 800d88c:	4770      	bx	lr

0800d88e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	460b      	mov	r3, r1
 800d898:	807b      	strh	r3, [r7, #2]
 800d89a:	bf00      	nop
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bc80      	pop	{r7}
 800d8a2:	4770      	bx	lr

0800d8a4 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	807b      	strh	r3, [r7, #2]
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bc80      	pop	{r7}
 800d8b8:	4770      	bx	lr
	...

0800d8bc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <reg_wizchip_cs_cbfunc+0x16>
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800d8d2:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <reg_wizchip_cs_cbfunc+0x3c>)
 800d8d4:	4a09      	ldr	r2, [pc, #36]	; (800d8fc <reg_wizchip_cs_cbfunc+0x40>)
 800d8d6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800d8d8:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <reg_wizchip_cs_cbfunc+0x3c>)
 800d8da:	4a09      	ldr	r2, [pc, #36]	; (800d900 <reg_wizchip_cs_cbfunc+0x44>)
 800d8dc:	619a      	str	r2, [r3, #24]
 800d8de:	e006      	b.n	800d8ee <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800d8e0:	4a05      	ldr	r2, [pc, #20]	; (800d8f8 <reg_wizchip_cs_cbfunc+0x3c>)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800d8e6:	4a04      	ldr	r2, [pc, #16]	; (800d8f8 <reg_wizchip_cs_cbfunc+0x3c>)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	6193      	str	r3, [r2, #24]
   }
}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	370c      	adds	r7, #12
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bc80      	pop	{r7}
 800d8f6:	4770      	bx	lr
 800d8f8:	200000a8 	.word	0x200000a8
 800d8fc:	0800d821 	.word	0x0800d821
 800d900:	0800d82d 	.word	0x0800d82d

0800d904 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800d90e:	bf00      	nop
 800d910:	4b0f      	ldr	r3, [pc, #60]	; (800d950 <reg_wizchip_spi_cbfunc+0x4c>)
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d0f9      	beq.n	800d910 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <reg_wizchip_spi_cbfunc+0x24>
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800d928:	4b09      	ldr	r3, [pc, #36]	; (800d950 <reg_wizchip_spi_cbfunc+0x4c>)
 800d92a:	4a0a      	ldr	r2, [pc, #40]	; (800d954 <reg_wizchip_spi_cbfunc+0x50>)
 800d92c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800d92e:	4b08      	ldr	r3, [pc, #32]	; (800d950 <reg_wizchip_spi_cbfunc+0x4c>)
 800d930:	4a09      	ldr	r2, [pc, #36]	; (800d958 <reg_wizchip_spi_cbfunc+0x54>)
 800d932:	621a      	str	r2, [r3, #32]
 800d934:	e006      	b.n	800d944 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800d936:	4a06      	ldr	r2, [pc, #24]	; (800d950 <reg_wizchip_spi_cbfunc+0x4c>)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800d93c:	4a04      	ldr	r2, [pc, #16]	; (800d950 <reg_wizchip_spi_cbfunc+0x4c>)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	6213      	str	r3, [r2, #32]
   }
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	bc80      	pop	{r7}
 800d94c:	4770      	bx	lr
 800d94e:	bf00      	nop
 800d950:	200000a8 	.word	0x200000a8
 800d954:	0800d86d 	.word	0x0800d86d
 800d958:	0800d87b 	.word	0x0800d87b

0800d95c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800d966:	bf00      	nop
 800d968:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d970:	2b00      	cmp	r3, #0
 800d972:	d0f9      	beq.n	800d968 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d002      	beq.n	800d980 <reg_wizchip_spiburst_cbfunc+0x24>
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800d980:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800d982:	4a0a      	ldr	r2, [pc, #40]	; (800d9ac <reg_wizchip_spiburst_cbfunc+0x50>)
 800d984:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800d988:	4a09      	ldr	r2, [pc, #36]	; (800d9b0 <reg_wizchip_spiburst_cbfunc+0x54>)
 800d98a:	629a      	str	r2, [r3, #40]	; 0x28
 800d98c:	e006      	b.n	800d99c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800d98e:	4a06      	ldr	r2, [pc, #24]	; (800d9a8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800d994:	4a04      	ldr	r2, [pc, #16]	; (800d9a8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bc80      	pop	{r7}
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	200000a8 	.word	0x200000a8
 800d9ac:	0800d88f 	.word	0x0800d88f
 800d9b0:	0800d8a5 	.word	0x0800d8a5

0800d9b4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800d9ba:	1d3b      	adds	r3, r7, #4
 800d9bc:	2206      	movs	r2, #6
 800d9be:	4619      	mov	r1, r3
 800d9c0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800d9c4:	f7ff fcca 	bl	800d35c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800d9c8:	f107 0314 	add.w	r3, r7, #20
 800d9cc:	2204      	movs	r2, #4
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d9d4:	f7ff fcc2 	bl	800d35c <WIZCHIP_READ_BUF>
 800d9d8:	f107 0310 	add.w	r3, r7, #16
 800d9dc:	2204      	movs	r2, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800d9e4:	f7ff fcba 	bl	800d35c <WIZCHIP_READ_BUF>
 800d9e8:	f107 030c 	add.w	r3, r7, #12
 800d9ec:	2204      	movs	r2, #4
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800d9f4:	f7ff fcb2 	bl	800d35c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800d9f8:	2180      	movs	r1, #128	; 0x80
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f7ff fc60 	bl	800d2c0 <WIZCHIP_WRITE>
   getMR(); // for delay
 800da00:	2000      	movs	r0, #0
 800da02:	f7ff fc11 	bl	800d228 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800da06:	1d3b      	adds	r3, r7, #4
 800da08:	2206      	movs	r2, #6
 800da0a:	4619      	mov	r1, r3
 800da0c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800da10:	f7ff fd04 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800da14:	f107 0314 	add.w	r3, r7, #20
 800da18:	2204      	movs	r2, #4
 800da1a:	4619      	mov	r1, r3
 800da1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800da20:	f7ff fcfc 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800da24:	f107 0310 	add.w	r3, r7, #16
 800da28:	2204      	movs	r2, #4
 800da2a:	4619      	mov	r1, r3
 800da2c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800da30:	f7ff fcf4 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800da34:	f107 030c 	add.w	r3, r7, #12
 800da38:	2204      	movs	r2, #4
 800da3a:	4619      	mov	r1, r3
 800da3c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800da40:	f7ff fcec 	bl	800d41c <WIZCHIP_WRITE_BUF>
}
 800da44:	bf00      	nop
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800da5a:	f7ff ffab 	bl	800d9b4 <wizchip_sw_reset>
   if(txsize)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d03b      	beq.n	800dadc <wizchip_init+0x90>
   {
      tmp = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800da68:	2300      	movs	r3, #0
 800da6a:	73fb      	strb	r3, [r7, #15]
 800da6c:	e015      	b.n	800da9a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800da6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	4413      	add	r3, r2
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	4413      	add	r3, r2
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800da80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da84:	2b10      	cmp	r3, #16
 800da86:	dd02      	ble.n	800da8e <wizchip_init+0x42>
 800da88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da8c:	e066      	b.n	800db5c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800da8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	3301      	adds	r3, #1
 800da96:	b2db      	uxtb	r3, r3
 800da98:	73fb      	strb	r3, [r7, #15]
 800da9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da9e:	2b07      	cmp	r3, #7
 800daa0:	dde5      	ble.n	800da6e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]
 800daa6:	e015      	b.n	800dad4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800daa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	3301      	adds	r3, #1
 800dab0:	00db      	lsls	r3, r3, #3
 800dab2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800dab6:	4618      	mov	r0, r3
 800dab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	4413      	add	r3, r2
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	4619      	mov	r1, r3
 800dac4:	f7ff fbfc 	bl	800d2c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800dac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	3301      	adds	r3, #1
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	73fb      	strb	r3, [r7, #15]
 800dad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad8:	2b07      	cmp	r3, #7
 800dada:	dde5      	ble.n	800daa8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d03b      	beq.n	800db5a <wizchip_init+0x10e>
   {
      tmp = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
 800daea:	e015      	b.n	800db18 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800daec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf0:	683a      	ldr	r2, [r7, #0]
 800daf2:	4413      	add	r3, r2
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	4413      	add	r3, r2
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800dafe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db02:	2b10      	cmp	r3, #16
 800db04:	dd02      	ble.n	800db0c <wizchip_init+0xc0>
 800db06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db0a:	e027      	b.n	800db5c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800db0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	3301      	adds	r3, #1
 800db14:	b2db      	uxtb	r3, r3
 800db16:	73fb      	strb	r3, [r7, #15]
 800db18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	dde5      	ble.n	800daec <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
 800db24:	e015      	b.n	800db52 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800db26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	3301      	adds	r3, #1
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800db34:	4618      	mov	r0, r3
 800db36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	4413      	add	r3, r2
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	f7ff fbbd 	bl	800d2c0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	3301      	adds	r3, #1
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	73fb      	strb	r3, [r7, #15]
 800db52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db56:	2b07      	cmp	r3, #7
 800db58:	dde5      	ble.n	800db26 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <wizphy_getphylink>:
  ret = (ret << 8) + imr;
  return (intr_kind)ret;
}

int8_t wizphy_getphylink(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800db6a:	2300      	movs	r3, #0
 800db6c:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800db6e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800db72:	f7ff fb59 	bl	800d228 <WIZCHIP_READ>
 800db76:	4603      	mov	r3, r0
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800db80:	2301      	movs	r3, #1
 800db82:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800db84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <wizphy_getphystat>:
         break;
   }
}

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 800db98:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800db9c:	f7ff fb44 	bl	800d228 <WIZCHIP_READ>
 800dba0:	4603      	mov	r3, r0
 800dba2:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	109b      	asrs	r3, r3, #2
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
 800dbb6:	105b      	asrs	r3, r3, #1
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	709a      	strb	r2, [r3, #2]
}
 800dbc4:	bf00      	nop
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2206      	movs	r2, #6
 800dbd8:	4619      	mov	r1, r3
 800dbda:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800dbde:	f7ff fc1d 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	330e      	adds	r3, #14
 800dbe6:	2204      	movs	r2, #4
 800dbe8:	4619      	mov	r1, r3
 800dbea:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dbee:	f7ff fc15 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	330a      	adds	r3, #10
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800dbfe:	f7ff fc0d 	bl	800d41c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3306      	adds	r3, #6
 800dc06:	2204      	movs	r2, #4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800dc0e:	f7ff fc05 	bl	800d41c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7c9a      	ldrb	r2, [r3, #18]
 800dc16:	4b0b      	ldr	r3, [pc, #44]	; (800dc44 <wizchip_setnetinfo+0x78>)
 800dc18:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	7cda      	ldrb	r2, [r3, #19]
 800dc1e:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <wizchip_setnetinfo+0x78>)
 800dc20:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7d1a      	ldrb	r2, [r3, #20]
 800dc26:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <wizchip_setnetinfo+0x78>)
 800dc28:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	7d5a      	ldrb	r2, [r3, #21]
 800dc2e:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <wizchip_setnetinfo+0x78>)
 800dc30:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	7d9a      	ldrb	r2, [r3, #22]
 800dc36:	4b04      	ldr	r3, [pc, #16]	; (800dc48 <wizchip_setnetinfo+0x7c>)
 800dc38:	701a      	strb	r2, [r3, #0]
}
 800dc3a:	bf00      	nop
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20000530 	.word	0x20000530
 800dc48:	20000534 	.word	0x20000534

0800dc4c <atof>:
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	f001 bde1 	b.w	800f814 <strtod>

0800dc52 <atoff>:
 800dc52:	2100      	movs	r1, #0
 800dc54:	f001 bdea 	b.w	800f82c <strtof>

0800dc58 <atoi>:
 800dc58:	220a      	movs	r2, #10
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	f001 bec0 	b.w	800f9e0 <strtol>

0800dc60 <atol>:
 800dc60:	220a      	movs	r2, #10
 800dc62:	2100      	movs	r1, #0
 800dc64:	f001 bebc 	b.w	800f9e0 <strtol>

0800dc68 <__errno>:
 800dc68:	4b01      	ldr	r3, [pc, #4]	; (800dc70 <__errno+0x8>)
 800dc6a:	6818      	ldr	r0, [r3, #0]
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	200000d4 	.word	0x200000d4

0800dc74 <__libc_init_array>:
 800dc74:	b570      	push	{r4, r5, r6, lr}
 800dc76:	2600      	movs	r6, #0
 800dc78:	4d0c      	ldr	r5, [pc, #48]	; (800dcac <__libc_init_array+0x38>)
 800dc7a:	4c0d      	ldr	r4, [pc, #52]	; (800dcb0 <__libc_init_array+0x3c>)
 800dc7c:	1b64      	subs	r4, r4, r5
 800dc7e:	10a4      	asrs	r4, r4, #2
 800dc80:	42a6      	cmp	r6, r4
 800dc82:	d109      	bne.n	800dc98 <__libc_init_array+0x24>
 800dc84:	f004 fca6 	bl	80125d4 <_init>
 800dc88:	2600      	movs	r6, #0
 800dc8a:	4d0a      	ldr	r5, [pc, #40]	; (800dcb4 <__libc_init_array+0x40>)
 800dc8c:	4c0a      	ldr	r4, [pc, #40]	; (800dcb8 <__libc_init_array+0x44>)
 800dc8e:	1b64      	subs	r4, r4, r5
 800dc90:	10a4      	asrs	r4, r4, #2
 800dc92:	42a6      	cmp	r6, r4
 800dc94:	d105      	bne.n	800dca2 <__libc_init_array+0x2e>
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc9c:	4798      	blx	r3
 800dc9e:	3601      	adds	r6, #1
 800dca0:	e7ee      	b.n	800dc80 <__libc_init_array+0xc>
 800dca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca6:	4798      	blx	r3
 800dca8:	3601      	adds	r6, #1
 800dcaa:	e7f2      	b.n	800dc92 <__libc_init_array+0x1e>
 800dcac:	08013e18 	.word	0x08013e18
 800dcb0:	08013e18 	.word	0x08013e18
 800dcb4:	08013e18 	.word	0x08013e18
 800dcb8:	08013e1c 	.word	0x08013e1c

0800dcbc <malloc>:
 800dcbc:	4b02      	ldr	r3, [pc, #8]	; (800dcc8 <malloc+0xc>)
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	6818      	ldr	r0, [r3, #0]
 800dcc2:	f000 b865 	b.w	800dd90 <_malloc_r>
 800dcc6:	bf00      	nop
 800dcc8:	200000d4 	.word	0x200000d4

0800dccc <memcpy>:
 800dccc:	440a      	add	r2, r1
 800dcce:	4291      	cmp	r1, r2
 800dcd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dcd4:	d100      	bne.n	800dcd8 <memcpy+0xc>
 800dcd6:	4770      	bx	lr
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcde:	4291      	cmp	r1, r2
 800dce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dce4:	d1f9      	bne.n	800dcda <memcpy+0xe>
 800dce6:	bd10      	pop	{r4, pc}

0800dce8 <memset>:
 800dce8:	4603      	mov	r3, r0
 800dcea:	4402      	add	r2, r0
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d100      	bne.n	800dcf2 <memset+0xa>
 800dcf0:	4770      	bx	lr
 800dcf2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcf6:	e7f9      	b.n	800dcec <memset+0x4>

0800dcf8 <_free_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d043      	beq.n	800dd88 <_free_r+0x90>
 800dd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd04:	1f0c      	subs	r4, r1, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfb8      	it	lt
 800dd0a:	18e4      	addlt	r4, r4, r3
 800dd0c:	f003 fb8a 	bl	8011424 <__malloc_lock>
 800dd10:	4a1e      	ldr	r2, [pc, #120]	; (800dd8c <_free_r+0x94>)
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	4610      	mov	r0, r2
 800dd16:	b933      	cbnz	r3, 800dd26 <_free_r+0x2e>
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	6014      	str	r4, [r2, #0]
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd22:	f003 bb85 	b.w	8011430 <__malloc_unlock>
 800dd26:	42a3      	cmp	r3, r4
 800dd28:	d90a      	bls.n	800dd40 <_free_r+0x48>
 800dd2a:	6821      	ldr	r1, [r4, #0]
 800dd2c:	1862      	adds	r2, r4, r1
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	bf01      	itttt	eq
 800dd32:	681a      	ldreq	r2, [r3, #0]
 800dd34:	685b      	ldreq	r3, [r3, #4]
 800dd36:	1852      	addeq	r2, r2, r1
 800dd38:	6022      	streq	r2, [r4, #0]
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	6004      	str	r4, [r0, #0]
 800dd3e:	e7ed      	b.n	800dd1c <_free_r+0x24>
 800dd40:	461a      	mov	r2, r3
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	b10b      	cbz	r3, 800dd4a <_free_r+0x52>
 800dd46:	42a3      	cmp	r3, r4
 800dd48:	d9fa      	bls.n	800dd40 <_free_r+0x48>
 800dd4a:	6811      	ldr	r1, [r2, #0]
 800dd4c:	1850      	adds	r0, r2, r1
 800dd4e:	42a0      	cmp	r0, r4
 800dd50:	d10b      	bne.n	800dd6a <_free_r+0x72>
 800dd52:	6820      	ldr	r0, [r4, #0]
 800dd54:	4401      	add	r1, r0
 800dd56:	1850      	adds	r0, r2, r1
 800dd58:	4283      	cmp	r3, r0
 800dd5a:	6011      	str	r1, [r2, #0]
 800dd5c:	d1de      	bne.n	800dd1c <_free_r+0x24>
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	4401      	add	r1, r0
 800dd64:	6011      	str	r1, [r2, #0]
 800dd66:	6053      	str	r3, [r2, #4]
 800dd68:	e7d8      	b.n	800dd1c <_free_r+0x24>
 800dd6a:	d902      	bls.n	800dd72 <_free_r+0x7a>
 800dd6c:	230c      	movs	r3, #12
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	e7d4      	b.n	800dd1c <_free_r+0x24>
 800dd72:	6820      	ldr	r0, [r4, #0]
 800dd74:	1821      	adds	r1, r4, r0
 800dd76:	428b      	cmp	r3, r1
 800dd78:	bf01      	itttt	eq
 800dd7a:	6819      	ldreq	r1, [r3, #0]
 800dd7c:	685b      	ldreq	r3, [r3, #4]
 800dd7e:	1809      	addeq	r1, r1, r0
 800dd80:	6021      	streq	r1, [r4, #0]
 800dd82:	6063      	str	r3, [r4, #4]
 800dd84:	6054      	str	r4, [r2, #4]
 800dd86:	e7c9      	b.n	800dd1c <_free_r+0x24>
 800dd88:	bd38      	pop	{r3, r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20000538 	.word	0x20000538

0800dd90 <_malloc_r>:
 800dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd92:	1ccd      	adds	r5, r1, #3
 800dd94:	f025 0503 	bic.w	r5, r5, #3
 800dd98:	3508      	adds	r5, #8
 800dd9a:	2d0c      	cmp	r5, #12
 800dd9c:	bf38      	it	cc
 800dd9e:	250c      	movcc	r5, #12
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	4606      	mov	r6, r0
 800dda4:	db01      	blt.n	800ddaa <_malloc_r+0x1a>
 800dda6:	42a9      	cmp	r1, r5
 800dda8:	d903      	bls.n	800ddb2 <_malloc_r+0x22>
 800ddaa:	230c      	movs	r3, #12
 800ddac:	6033      	str	r3, [r6, #0]
 800ddae:	2000      	movs	r0, #0
 800ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddb2:	f003 fb37 	bl	8011424 <__malloc_lock>
 800ddb6:	4921      	ldr	r1, [pc, #132]	; (800de3c <_malloc_r+0xac>)
 800ddb8:	680a      	ldr	r2, [r1, #0]
 800ddba:	4614      	mov	r4, r2
 800ddbc:	b99c      	cbnz	r4, 800dde6 <_malloc_r+0x56>
 800ddbe:	4f20      	ldr	r7, [pc, #128]	; (800de40 <_malloc_r+0xb0>)
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	b923      	cbnz	r3, 800ddce <_malloc_r+0x3e>
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f000 feae 	bl	800eb28 <_sbrk_r>
 800ddcc:	6038      	str	r0, [r7, #0]
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f000 fea9 	bl	800eb28 <_sbrk_r>
 800ddd6:	1c43      	adds	r3, r0, #1
 800ddd8:	d123      	bne.n	800de22 <_malloc_r+0x92>
 800ddda:	230c      	movs	r3, #12
 800dddc:	4630      	mov	r0, r6
 800ddde:	6033      	str	r3, [r6, #0]
 800dde0:	f003 fb26 	bl	8011430 <__malloc_unlock>
 800dde4:	e7e3      	b.n	800ddae <_malloc_r+0x1e>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	1b5b      	subs	r3, r3, r5
 800ddea:	d417      	bmi.n	800de1c <_malloc_r+0x8c>
 800ddec:	2b0b      	cmp	r3, #11
 800ddee:	d903      	bls.n	800ddf8 <_malloc_r+0x68>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	441c      	add	r4, r3
 800ddf4:	6025      	str	r5, [r4, #0]
 800ddf6:	e004      	b.n	800de02 <_malloc_r+0x72>
 800ddf8:	6863      	ldr	r3, [r4, #4]
 800ddfa:	42a2      	cmp	r2, r4
 800ddfc:	bf0c      	ite	eq
 800ddfe:	600b      	streq	r3, [r1, #0]
 800de00:	6053      	strne	r3, [r2, #4]
 800de02:	4630      	mov	r0, r6
 800de04:	f003 fb14 	bl	8011430 <__malloc_unlock>
 800de08:	f104 000b 	add.w	r0, r4, #11
 800de0c:	1d23      	adds	r3, r4, #4
 800de0e:	f020 0007 	bic.w	r0, r0, #7
 800de12:	1ac2      	subs	r2, r0, r3
 800de14:	d0cc      	beq.n	800ddb0 <_malloc_r+0x20>
 800de16:	1a1b      	subs	r3, r3, r0
 800de18:	50a3      	str	r3, [r4, r2]
 800de1a:	e7c9      	b.n	800ddb0 <_malloc_r+0x20>
 800de1c:	4622      	mov	r2, r4
 800de1e:	6864      	ldr	r4, [r4, #4]
 800de20:	e7cc      	b.n	800ddbc <_malloc_r+0x2c>
 800de22:	1cc4      	adds	r4, r0, #3
 800de24:	f024 0403 	bic.w	r4, r4, #3
 800de28:	42a0      	cmp	r0, r4
 800de2a:	d0e3      	beq.n	800ddf4 <_malloc_r+0x64>
 800de2c:	1a21      	subs	r1, r4, r0
 800de2e:	4630      	mov	r0, r6
 800de30:	f000 fe7a 	bl	800eb28 <_sbrk_r>
 800de34:	3001      	adds	r0, #1
 800de36:	d1dd      	bne.n	800ddf4 <_malloc_r+0x64>
 800de38:	e7cf      	b.n	800ddda <_malloc_r+0x4a>
 800de3a:	bf00      	nop
 800de3c:	20000538 	.word	0x20000538
 800de40:	2000053c 	.word	0x2000053c

0800de44 <__cvt>:
 800de44:	2b00      	cmp	r3, #0
 800de46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de4a:	461f      	mov	r7, r3
 800de4c:	bfbb      	ittet	lt
 800de4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800de52:	461f      	movlt	r7, r3
 800de54:	2300      	movge	r3, #0
 800de56:	232d      	movlt	r3, #45	; 0x2d
 800de58:	b088      	sub	sp, #32
 800de5a:	4614      	mov	r4, r2
 800de5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800de60:	7013      	strb	r3, [r2, #0]
 800de62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800de68:	f023 0820 	bic.w	r8, r3, #32
 800de6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de70:	d005      	beq.n	800de7e <__cvt+0x3a>
 800de72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de76:	d100      	bne.n	800de7a <__cvt+0x36>
 800de78:	3501      	adds	r5, #1
 800de7a:	2302      	movs	r3, #2
 800de7c:	e000      	b.n	800de80 <__cvt+0x3c>
 800de7e:	2303      	movs	r3, #3
 800de80:	aa07      	add	r2, sp, #28
 800de82:	9204      	str	r2, [sp, #16]
 800de84:	aa06      	add	r2, sp, #24
 800de86:	e9cd a202 	strd	sl, r2, [sp, #8]
 800de8a:	e9cd 3500 	strd	r3, r5, [sp]
 800de8e:	4622      	mov	r2, r4
 800de90:	463b      	mov	r3, r7
 800de92:	f001 ff1d 	bl	800fcd0 <_dtoa_r>
 800de96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de9a:	4606      	mov	r6, r0
 800de9c:	d102      	bne.n	800dea4 <__cvt+0x60>
 800de9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dea0:	07db      	lsls	r3, r3, #31
 800dea2:	d522      	bpl.n	800deea <__cvt+0xa6>
 800dea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dea8:	eb06 0905 	add.w	r9, r6, r5
 800deac:	d110      	bne.n	800ded0 <__cvt+0x8c>
 800deae:	7833      	ldrb	r3, [r6, #0]
 800deb0:	2b30      	cmp	r3, #48	; 0x30
 800deb2:	d10a      	bne.n	800deca <__cvt+0x86>
 800deb4:	2200      	movs	r2, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4620      	mov	r0, r4
 800deba:	4639      	mov	r1, r7
 800debc:	f7f2 fde0 	bl	8000a80 <__aeabi_dcmpeq>
 800dec0:	b918      	cbnz	r0, 800deca <__cvt+0x86>
 800dec2:	f1c5 0501 	rsb	r5, r5, #1
 800dec6:	f8ca 5000 	str.w	r5, [sl]
 800deca:	f8da 3000 	ldr.w	r3, [sl]
 800dece:	4499      	add	r9, r3
 800ded0:	2200      	movs	r2, #0
 800ded2:	2300      	movs	r3, #0
 800ded4:	4620      	mov	r0, r4
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 fdd2 	bl	8000a80 <__aeabi_dcmpeq>
 800dedc:	b108      	cbz	r0, 800dee2 <__cvt+0x9e>
 800dede:	f8cd 901c 	str.w	r9, [sp, #28]
 800dee2:	2230      	movs	r2, #48	; 0x30
 800dee4:	9b07      	ldr	r3, [sp, #28]
 800dee6:	454b      	cmp	r3, r9
 800dee8:	d307      	bcc.n	800defa <__cvt+0xb6>
 800deea:	4630      	mov	r0, r6
 800deec:	9b07      	ldr	r3, [sp, #28]
 800deee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800def0:	1b9b      	subs	r3, r3, r6
 800def2:	6013      	str	r3, [r2, #0]
 800def4:	b008      	add	sp, #32
 800def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800defa:	1c59      	adds	r1, r3, #1
 800defc:	9107      	str	r1, [sp, #28]
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e7f0      	b.n	800dee4 <__cvt+0xa0>

0800df02 <__exponent>:
 800df02:	4603      	mov	r3, r0
 800df04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df06:	2900      	cmp	r1, #0
 800df08:	f803 2b02 	strb.w	r2, [r3], #2
 800df0c:	bfb6      	itet	lt
 800df0e:	222d      	movlt	r2, #45	; 0x2d
 800df10:	222b      	movge	r2, #43	; 0x2b
 800df12:	4249      	neglt	r1, r1
 800df14:	2909      	cmp	r1, #9
 800df16:	7042      	strb	r2, [r0, #1]
 800df18:	dd2b      	ble.n	800df72 <__exponent+0x70>
 800df1a:	f10d 0407 	add.w	r4, sp, #7
 800df1e:	46a4      	mov	ip, r4
 800df20:	270a      	movs	r7, #10
 800df22:	fb91 f6f7 	sdiv	r6, r1, r7
 800df26:	460a      	mov	r2, r1
 800df28:	46a6      	mov	lr, r4
 800df2a:	fb07 1516 	mls	r5, r7, r6, r1
 800df2e:	2a63      	cmp	r2, #99	; 0x63
 800df30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800df34:	4631      	mov	r1, r6
 800df36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800df3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df3e:	dcf0      	bgt.n	800df22 <__exponent+0x20>
 800df40:	3130      	adds	r1, #48	; 0x30
 800df42:	f1ae 0502 	sub.w	r5, lr, #2
 800df46:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df4a:	4629      	mov	r1, r5
 800df4c:	1c44      	adds	r4, r0, #1
 800df4e:	4561      	cmp	r1, ip
 800df50:	d30a      	bcc.n	800df68 <__exponent+0x66>
 800df52:	f10d 0209 	add.w	r2, sp, #9
 800df56:	eba2 020e 	sub.w	r2, r2, lr
 800df5a:	4565      	cmp	r5, ip
 800df5c:	bf88      	it	hi
 800df5e:	2200      	movhi	r2, #0
 800df60:	4413      	add	r3, r2
 800df62:	1a18      	subs	r0, r3, r0
 800df64:	b003      	add	sp, #12
 800df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df70:	e7ed      	b.n	800df4e <__exponent+0x4c>
 800df72:	2330      	movs	r3, #48	; 0x30
 800df74:	3130      	adds	r1, #48	; 0x30
 800df76:	7083      	strb	r3, [r0, #2]
 800df78:	70c1      	strb	r1, [r0, #3]
 800df7a:	1d03      	adds	r3, r0, #4
 800df7c:	e7f1      	b.n	800df62 <__exponent+0x60>
	...

0800df80 <_printf_float>:
 800df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df84:	b091      	sub	sp, #68	; 0x44
 800df86:	460c      	mov	r4, r1
 800df88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800df8c:	4616      	mov	r6, r2
 800df8e:	461f      	mov	r7, r3
 800df90:	4605      	mov	r5, r0
 800df92:	f003 f9bb 	bl	801130c <_localeconv_r>
 800df96:	6803      	ldr	r3, [r0, #0]
 800df98:	4618      	mov	r0, r3
 800df9a:	9309      	str	r3, [sp, #36]	; 0x24
 800df9c:	f7f2 f944 	bl	8000228 <strlen>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	930e      	str	r3, [sp, #56]	; 0x38
 800dfa4:	f8d8 3000 	ldr.w	r3, [r8]
 800dfa8:	900a      	str	r0, [sp, #40]	; 0x28
 800dfaa:	3307      	adds	r3, #7
 800dfac:	f023 0307 	bic.w	r3, r3, #7
 800dfb0:	f103 0208 	add.w	r2, r3, #8
 800dfb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dfb8:	f8d4 b000 	ldr.w	fp, [r4]
 800dfbc:	f8c8 2000 	str.w	r2, [r8]
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dfc8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dfcc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dfd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd6:	4640      	mov	r0, r8
 800dfd8:	4b9c      	ldr	r3, [pc, #624]	; (800e24c <_printf_float+0x2cc>)
 800dfda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfdc:	f7f2 fd82 	bl	8000ae4 <__aeabi_dcmpun>
 800dfe0:	bb70      	cbnz	r0, 800e040 <_printf_float+0xc0>
 800dfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfe6:	4640      	mov	r0, r8
 800dfe8:	4b98      	ldr	r3, [pc, #608]	; (800e24c <_printf_float+0x2cc>)
 800dfea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfec:	f7f2 fd5c 	bl	8000aa8 <__aeabi_dcmple>
 800dff0:	bb30      	cbnz	r0, 800e040 <_printf_float+0xc0>
 800dff2:	2200      	movs	r2, #0
 800dff4:	2300      	movs	r3, #0
 800dff6:	4640      	mov	r0, r8
 800dff8:	4651      	mov	r1, sl
 800dffa:	f7f2 fd4b 	bl	8000a94 <__aeabi_dcmplt>
 800dffe:	b110      	cbz	r0, 800e006 <_printf_float+0x86>
 800e000:	232d      	movs	r3, #45	; 0x2d
 800e002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e006:	4b92      	ldr	r3, [pc, #584]	; (800e250 <_printf_float+0x2d0>)
 800e008:	4892      	ldr	r0, [pc, #584]	; (800e254 <_printf_float+0x2d4>)
 800e00a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e00e:	bf94      	ite	ls
 800e010:	4698      	movls	r8, r3
 800e012:	4680      	movhi	r8, r0
 800e014:	2303      	movs	r3, #3
 800e016:	f04f 0a00 	mov.w	sl, #0
 800e01a:	6123      	str	r3, [r4, #16]
 800e01c:	f02b 0304 	bic.w	r3, fp, #4
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	4633      	mov	r3, r6
 800e024:	4621      	mov	r1, r4
 800e026:	4628      	mov	r0, r5
 800e028:	9700      	str	r7, [sp, #0]
 800e02a:	aa0f      	add	r2, sp, #60	; 0x3c
 800e02c:	f000 f9d4 	bl	800e3d8 <_printf_common>
 800e030:	3001      	adds	r0, #1
 800e032:	f040 8090 	bne.w	800e156 <_printf_float+0x1d6>
 800e036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e03a:	b011      	add	sp, #68	; 0x44
 800e03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e040:	4642      	mov	r2, r8
 800e042:	4653      	mov	r3, sl
 800e044:	4640      	mov	r0, r8
 800e046:	4651      	mov	r1, sl
 800e048:	f7f2 fd4c 	bl	8000ae4 <__aeabi_dcmpun>
 800e04c:	b148      	cbz	r0, 800e062 <_printf_float+0xe2>
 800e04e:	f1ba 0f00 	cmp.w	sl, #0
 800e052:	bfb8      	it	lt
 800e054:	232d      	movlt	r3, #45	; 0x2d
 800e056:	4880      	ldr	r0, [pc, #512]	; (800e258 <_printf_float+0x2d8>)
 800e058:	bfb8      	it	lt
 800e05a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e05e:	4b7f      	ldr	r3, [pc, #508]	; (800e25c <_printf_float+0x2dc>)
 800e060:	e7d3      	b.n	800e00a <_printf_float+0x8a>
 800e062:	6863      	ldr	r3, [r4, #4]
 800e064:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	d142      	bne.n	800e0f2 <_printf_float+0x172>
 800e06c:	2306      	movs	r3, #6
 800e06e:	6063      	str	r3, [r4, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	9206      	str	r2, [sp, #24]
 800e074:	aa0e      	add	r2, sp, #56	; 0x38
 800e076:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e07a:	aa0d      	add	r2, sp, #52	; 0x34
 800e07c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e080:	9203      	str	r2, [sp, #12]
 800e082:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e086:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	6863      	ldr	r3, [r4, #4]
 800e08e:	4642      	mov	r2, r8
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	4628      	mov	r0, r5
 800e094:	4653      	mov	r3, sl
 800e096:	910b      	str	r1, [sp, #44]	; 0x2c
 800e098:	f7ff fed4 	bl	800de44 <__cvt>
 800e09c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e09e:	4680      	mov	r8, r0
 800e0a0:	2947      	cmp	r1, #71	; 0x47
 800e0a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e0a4:	d108      	bne.n	800e0b8 <_printf_float+0x138>
 800e0a6:	1cc8      	adds	r0, r1, #3
 800e0a8:	db02      	blt.n	800e0b0 <_printf_float+0x130>
 800e0aa:	6863      	ldr	r3, [r4, #4]
 800e0ac:	4299      	cmp	r1, r3
 800e0ae:	dd40      	ble.n	800e132 <_printf_float+0x1b2>
 800e0b0:	f1a9 0902 	sub.w	r9, r9, #2
 800e0b4:	fa5f f989 	uxtb.w	r9, r9
 800e0b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e0bc:	d81f      	bhi.n	800e0fe <_printf_float+0x17e>
 800e0be:	464a      	mov	r2, r9
 800e0c0:	3901      	subs	r1, #1
 800e0c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0c6:	910d      	str	r1, [sp, #52]	; 0x34
 800e0c8:	f7ff ff1b 	bl	800df02 <__exponent>
 800e0cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0ce:	4682      	mov	sl, r0
 800e0d0:	1813      	adds	r3, r2, r0
 800e0d2:	2a01      	cmp	r2, #1
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	dc02      	bgt.n	800e0de <_printf_float+0x15e>
 800e0d8:	6822      	ldr	r2, [r4, #0]
 800e0da:	07d2      	lsls	r2, r2, #31
 800e0dc:	d501      	bpl.n	800e0e2 <_printf_float+0x162>
 800e0de:	3301      	adds	r3, #1
 800e0e0:	6123      	str	r3, [r4, #16]
 800e0e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d09b      	beq.n	800e022 <_printf_float+0xa2>
 800e0ea:	232d      	movs	r3, #45	; 0x2d
 800e0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0f0:	e797      	b.n	800e022 <_printf_float+0xa2>
 800e0f2:	2947      	cmp	r1, #71	; 0x47
 800e0f4:	d1bc      	bne.n	800e070 <_printf_float+0xf0>
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1ba      	bne.n	800e070 <_printf_float+0xf0>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e7b7      	b.n	800e06e <_printf_float+0xee>
 800e0fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e102:	d118      	bne.n	800e136 <_printf_float+0x1b6>
 800e104:	2900      	cmp	r1, #0
 800e106:	6863      	ldr	r3, [r4, #4]
 800e108:	dd0b      	ble.n	800e122 <_printf_float+0x1a2>
 800e10a:	6121      	str	r1, [r4, #16]
 800e10c:	b913      	cbnz	r3, 800e114 <_printf_float+0x194>
 800e10e:	6822      	ldr	r2, [r4, #0]
 800e110:	07d0      	lsls	r0, r2, #31
 800e112:	d502      	bpl.n	800e11a <_printf_float+0x19a>
 800e114:	3301      	adds	r3, #1
 800e116:	440b      	add	r3, r1
 800e118:	6123      	str	r3, [r4, #16]
 800e11a:	f04f 0a00 	mov.w	sl, #0
 800e11e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e120:	e7df      	b.n	800e0e2 <_printf_float+0x162>
 800e122:	b913      	cbnz	r3, 800e12a <_printf_float+0x1aa>
 800e124:	6822      	ldr	r2, [r4, #0]
 800e126:	07d2      	lsls	r2, r2, #31
 800e128:	d501      	bpl.n	800e12e <_printf_float+0x1ae>
 800e12a:	3302      	adds	r3, #2
 800e12c:	e7f4      	b.n	800e118 <_printf_float+0x198>
 800e12e:	2301      	movs	r3, #1
 800e130:	e7f2      	b.n	800e118 <_printf_float+0x198>
 800e132:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e138:	4299      	cmp	r1, r3
 800e13a:	db05      	blt.n	800e148 <_printf_float+0x1c8>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	6121      	str	r1, [r4, #16]
 800e140:	07d8      	lsls	r0, r3, #31
 800e142:	d5ea      	bpl.n	800e11a <_printf_float+0x19a>
 800e144:	1c4b      	adds	r3, r1, #1
 800e146:	e7e7      	b.n	800e118 <_printf_float+0x198>
 800e148:	2900      	cmp	r1, #0
 800e14a:	bfcc      	ite	gt
 800e14c:	2201      	movgt	r2, #1
 800e14e:	f1c1 0202 	rsble	r2, r1, #2
 800e152:	4413      	add	r3, r2
 800e154:	e7e0      	b.n	800e118 <_printf_float+0x198>
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	055a      	lsls	r2, r3, #21
 800e15a:	d407      	bmi.n	800e16c <_printf_float+0x1ec>
 800e15c:	6923      	ldr	r3, [r4, #16]
 800e15e:	4642      	mov	r2, r8
 800e160:	4631      	mov	r1, r6
 800e162:	4628      	mov	r0, r5
 800e164:	47b8      	blx	r7
 800e166:	3001      	adds	r0, #1
 800e168:	d12b      	bne.n	800e1c2 <_printf_float+0x242>
 800e16a:	e764      	b.n	800e036 <_printf_float+0xb6>
 800e16c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e170:	f240 80dd 	bls.w	800e32e <_printf_float+0x3ae>
 800e174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e178:	2200      	movs	r2, #0
 800e17a:	2300      	movs	r3, #0
 800e17c:	f7f2 fc80 	bl	8000a80 <__aeabi_dcmpeq>
 800e180:	2800      	cmp	r0, #0
 800e182:	d033      	beq.n	800e1ec <_printf_float+0x26c>
 800e184:	2301      	movs	r3, #1
 800e186:	4631      	mov	r1, r6
 800e188:	4628      	mov	r0, r5
 800e18a:	4a35      	ldr	r2, [pc, #212]	; (800e260 <_printf_float+0x2e0>)
 800e18c:	47b8      	blx	r7
 800e18e:	3001      	adds	r0, #1
 800e190:	f43f af51 	beq.w	800e036 <_printf_float+0xb6>
 800e194:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e198:	429a      	cmp	r2, r3
 800e19a:	db02      	blt.n	800e1a2 <_printf_float+0x222>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	07d8      	lsls	r0, r3, #31
 800e1a0:	d50f      	bpl.n	800e1c2 <_printf_float+0x242>
 800e1a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1a6:	4631      	mov	r1, r6
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	47b8      	blx	r7
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	f43f af42 	beq.w	800e036 <_printf_float+0xb6>
 800e1b2:	f04f 0800 	mov.w	r8, #0
 800e1b6:	f104 091a 	add.w	r9, r4, #26
 800e1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	4543      	cmp	r3, r8
 800e1c0:	dc09      	bgt.n	800e1d6 <_printf_float+0x256>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	079b      	lsls	r3, r3, #30
 800e1c6:	f100 8102 	bmi.w	800e3ce <_printf_float+0x44e>
 800e1ca:	68e0      	ldr	r0, [r4, #12]
 800e1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1ce:	4298      	cmp	r0, r3
 800e1d0:	bfb8      	it	lt
 800e1d2:	4618      	movlt	r0, r3
 800e1d4:	e731      	b.n	800e03a <_printf_float+0xba>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	464a      	mov	r2, r9
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b8      	blx	r7
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	f43f af28 	beq.w	800e036 <_printf_float+0xb6>
 800e1e6:	f108 0801 	add.w	r8, r8, #1
 800e1ea:	e7e6      	b.n	800e1ba <_printf_float+0x23a>
 800e1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dc38      	bgt.n	800e264 <_printf_float+0x2e4>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4a19      	ldr	r2, [pc, #100]	; (800e260 <_printf_float+0x2e0>)
 800e1fa:	47b8      	blx	r7
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	f43f af1a 	beq.w	800e036 <_printf_float+0xb6>
 800e202:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e206:	4313      	orrs	r3, r2
 800e208:	d102      	bne.n	800e210 <_printf_float+0x290>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	07d9      	lsls	r1, r3, #31
 800e20e:	d5d8      	bpl.n	800e1c2 <_printf_float+0x242>
 800e210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af0b 	beq.w	800e036 <_printf_float+0xb6>
 800e220:	f04f 0900 	mov.w	r9, #0
 800e224:	f104 0a1a 	add.w	sl, r4, #26
 800e228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e22a:	425b      	negs	r3, r3
 800e22c:	454b      	cmp	r3, r9
 800e22e:	dc01      	bgt.n	800e234 <_printf_float+0x2b4>
 800e230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e232:	e794      	b.n	800e15e <_printf_float+0x1de>
 800e234:	2301      	movs	r3, #1
 800e236:	4652      	mov	r2, sl
 800e238:	4631      	mov	r1, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	47b8      	blx	r7
 800e23e:	3001      	adds	r0, #1
 800e240:	f43f aef9 	beq.w	800e036 <_printf_float+0xb6>
 800e244:	f109 0901 	add.w	r9, r9, #1
 800e248:	e7ee      	b.n	800e228 <_printf_float+0x2a8>
 800e24a:	bf00      	nop
 800e24c:	7fefffff 	.word	0x7fefffff
 800e250:	08013960 	.word	0x08013960
 800e254:	08013964 	.word	0x08013964
 800e258:	0801396c 	.word	0x0801396c
 800e25c:	08013968 	.word	0x08013968
 800e260:	08013970 	.word	0x08013970
 800e264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e268:	429a      	cmp	r2, r3
 800e26a:	bfa8      	it	ge
 800e26c:	461a      	movge	r2, r3
 800e26e:	2a00      	cmp	r2, #0
 800e270:	4691      	mov	r9, r2
 800e272:	dc37      	bgt.n	800e2e4 <_printf_float+0x364>
 800e274:	f04f 0b00 	mov.w	fp, #0
 800e278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e27c:	f104 021a 	add.w	r2, r4, #26
 800e280:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e284:	ebaa 0309 	sub.w	r3, sl, r9
 800e288:	455b      	cmp	r3, fp
 800e28a:	dc33      	bgt.n	800e2f4 <_printf_float+0x374>
 800e28c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e290:	429a      	cmp	r2, r3
 800e292:	db3b      	blt.n	800e30c <_printf_float+0x38c>
 800e294:	6823      	ldr	r3, [r4, #0]
 800e296:	07da      	lsls	r2, r3, #31
 800e298:	d438      	bmi.n	800e30c <_printf_float+0x38c>
 800e29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e29c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e29e:	eba2 030a 	sub.w	r3, r2, sl
 800e2a2:	eba2 0901 	sub.w	r9, r2, r1
 800e2a6:	4599      	cmp	r9, r3
 800e2a8:	bfa8      	it	ge
 800e2aa:	4699      	movge	r9, r3
 800e2ac:	f1b9 0f00 	cmp.w	r9, #0
 800e2b0:	dc34      	bgt.n	800e31c <_printf_float+0x39c>
 800e2b2:	f04f 0800 	mov.w	r8, #0
 800e2b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ba:	f104 0a1a 	add.w	sl, r4, #26
 800e2be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e2c2:	1a9b      	subs	r3, r3, r2
 800e2c4:	eba3 0309 	sub.w	r3, r3, r9
 800e2c8:	4543      	cmp	r3, r8
 800e2ca:	f77f af7a 	ble.w	800e1c2 <_printf_float+0x242>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	4652      	mov	r2, sl
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	47b8      	blx	r7
 800e2d8:	3001      	adds	r0, #1
 800e2da:	f43f aeac 	beq.w	800e036 <_printf_float+0xb6>
 800e2de:	f108 0801 	add.w	r8, r8, #1
 800e2e2:	e7ec      	b.n	800e2be <_printf_float+0x33e>
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	4631      	mov	r1, r6
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	47b8      	blx	r7
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	d1c0      	bne.n	800e274 <_printf_float+0x2f4>
 800e2f2:	e6a0      	b.n	800e036 <_printf_float+0xb6>
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2fc:	47b8      	blx	r7
 800e2fe:	3001      	adds	r0, #1
 800e300:	f43f ae99 	beq.w	800e036 <_printf_float+0xb6>
 800e304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e306:	f10b 0b01 	add.w	fp, fp, #1
 800e30a:	e7b9      	b.n	800e280 <_printf_float+0x300>
 800e30c:	4631      	mov	r1, r6
 800e30e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e312:	4628      	mov	r0, r5
 800e314:	47b8      	blx	r7
 800e316:	3001      	adds	r0, #1
 800e318:	d1bf      	bne.n	800e29a <_printf_float+0x31a>
 800e31a:	e68c      	b.n	800e036 <_printf_float+0xb6>
 800e31c:	464b      	mov	r3, r9
 800e31e:	4631      	mov	r1, r6
 800e320:	4628      	mov	r0, r5
 800e322:	eb08 020a 	add.w	r2, r8, sl
 800e326:	47b8      	blx	r7
 800e328:	3001      	adds	r0, #1
 800e32a:	d1c2      	bne.n	800e2b2 <_printf_float+0x332>
 800e32c:	e683      	b.n	800e036 <_printf_float+0xb6>
 800e32e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e330:	2a01      	cmp	r2, #1
 800e332:	dc01      	bgt.n	800e338 <_printf_float+0x3b8>
 800e334:	07db      	lsls	r3, r3, #31
 800e336:	d537      	bpl.n	800e3a8 <_printf_float+0x428>
 800e338:	2301      	movs	r3, #1
 800e33a:	4642      	mov	r2, r8
 800e33c:	4631      	mov	r1, r6
 800e33e:	4628      	mov	r0, r5
 800e340:	47b8      	blx	r7
 800e342:	3001      	adds	r0, #1
 800e344:	f43f ae77 	beq.w	800e036 <_printf_float+0xb6>
 800e348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e34c:	4631      	mov	r1, r6
 800e34e:	4628      	mov	r0, r5
 800e350:	47b8      	blx	r7
 800e352:	3001      	adds	r0, #1
 800e354:	f43f ae6f 	beq.w	800e036 <_printf_float+0xb6>
 800e358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e35c:	2200      	movs	r2, #0
 800e35e:	2300      	movs	r3, #0
 800e360:	f7f2 fb8e 	bl	8000a80 <__aeabi_dcmpeq>
 800e364:	b9d8      	cbnz	r0, 800e39e <_printf_float+0x41e>
 800e366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e368:	f108 0201 	add.w	r2, r8, #1
 800e36c:	3b01      	subs	r3, #1
 800e36e:	4631      	mov	r1, r6
 800e370:	4628      	mov	r0, r5
 800e372:	47b8      	blx	r7
 800e374:	3001      	adds	r0, #1
 800e376:	d10e      	bne.n	800e396 <_printf_float+0x416>
 800e378:	e65d      	b.n	800e036 <_printf_float+0xb6>
 800e37a:	2301      	movs	r3, #1
 800e37c:	464a      	mov	r2, r9
 800e37e:	4631      	mov	r1, r6
 800e380:	4628      	mov	r0, r5
 800e382:	47b8      	blx	r7
 800e384:	3001      	adds	r0, #1
 800e386:	f43f ae56 	beq.w	800e036 <_printf_float+0xb6>
 800e38a:	f108 0801 	add.w	r8, r8, #1
 800e38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e390:	3b01      	subs	r3, #1
 800e392:	4543      	cmp	r3, r8
 800e394:	dcf1      	bgt.n	800e37a <_printf_float+0x3fa>
 800e396:	4653      	mov	r3, sl
 800e398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e39c:	e6e0      	b.n	800e160 <_printf_float+0x1e0>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	f104 091a 	add.w	r9, r4, #26
 800e3a6:	e7f2      	b.n	800e38e <_printf_float+0x40e>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	4642      	mov	r2, r8
 800e3ac:	e7df      	b.n	800e36e <_printf_float+0x3ee>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	464a      	mov	r2, r9
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	47b8      	blx	r7
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	f43f ae3c 	beq.w	800e036 <_printf_float+0xb6>
 800e3be:	f108 0801 	add.w	r8, r8, #1
 800e3c2:	68e3      	ldr	r3, [r4, #12]
 800e3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e3c6:	1a5b      	subs	r3, r3, r1
 800e3c8:	4543      	cmp	r3, r8
 800e3ca:	dcf0      	bgt.n	800e3ae <_printf_float+0x42e>
 800e3cc:	e6fd      	b.n	800e1ca <_printf_float+0x24a>
 800e3ce:	f04f 0800 	mov.w	r8, #0
 800e3d2:	f104 0919 	add.w	r9, r4, #25
 800e3d6:	e7f4      	b.n	800e3c2 <_printf_float+0x442>

0800e3d8 <_printf_common>:
 800e3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3dc:	4616      	mov	r6, r2
 800e3de:	4699      	mov	r9, r3
 800e3e0:	688a      	ldr	r2, [r1, #8]
 800e3e2:	690b      	ldr	r3, [r1, #16]
 800e3e4:	4607      	mov	r7, r0
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	bfb8      	it	lt
 800e3ea:	4613      	movlt	r3, r2
 800e3ec:	6033      	str	r3, [r6, #0]
 800e3ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3f8:	b10a      	cbz	r2, 800e3fe <_printf_common+0x26>
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	6033      	str	r3, [r6, #0]
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	0699      	lsls	r1, r3, #26
 800e402:	bf42      	ittt	mi
 800e404:	6833      	ldrmi	r3, [r6, #0]
 800e406:	3302      	addmi	r3, #2
 800e408:	6033      	strmi	r3, [r6, #0]
 800e40a:	6825      	ldr	r5, [r4, #0]
 800e40c:	f015 0506 	ands.w	r5, r5, #6
 800e410:	d106      	bne.n	800e420 <_printf_common+0x48>
 800e412:	f104 0a19 	add.w	sl, r4, #25
 800e416:	68e3      	ldr	r3, [r4, #12]
 800e418:	6832      	ldr	r2, [r6, #0]
 800e41a:	1a9b      	subs	r3, r3, r2
 800e41c:	42ab      	cmp	r3, r5
 800e41e:	dc28      	bgt.n	800e472 <_printf_common+0x9a>
 800e420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e424:	1e13      	subs	r3, r2, #0
 800e426:	6822      	ldr	r2, [r4, #0]
 800e428:	bf18      	it	ne
 800e42a:	2301      	movne	r3, #1
 800e42c:	0692      	lsls	r2, r2, #26
 800e42e:	d42d      	bmi.n	800e48c <_printf_common+0xb4>
 800e430:	4649      	mov	r1, r9
 800e432:	4638      	mov	r0, r7
 800e434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e438:	47c0      	blx	r8
 800e43a:	3001      	adds	r0, #1
 800e43c:	d020      	beq.n	800e480 <_printf_common+0xa8>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	68e5      	ldr	r5, [r4, #12]
 800e442:	f003 0306 	and.w	r3, r3, #6
 800e446:	2b04      	cmp	r3, #4
 800e448:	bf18      	it	ne
 800e44a:	2500      	movne	r5, #0
 800e44c:	6832      	ldr	r2, [r6, #0]
 800e44e:	f04f 0600 	mov.w	r6, #0
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	bf08      	it	eq
 800e456:	1aad      	subeq	r5, r5, r2
 800e458:	6922      	ldr	r2, [r4, #16]
 800e45a:	bf08      	it	eq
 800e45c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e460:	4293      	cmp	r3, r2
 800e462:	bfc4      	itt	gt
 800e464:	1a9b      	subgt	r3, r3, r2
 800e466:	18ed      	addgt	r5, r5, r3
 800e468:	341a      	adds	r4, #26
 800e46a:	42b5      	cmp	r5, r6
 800e46c:	d11a      	bne.n	800e4a4 <_printf_common+0xcc>
 800e46e:	2000      	movs	r0, #0
 800e470:	e008      	b.n	800e484 <_printf_common+0xac>
 800e472:	2301      	movs	r3, #1
 800e474:	4652      	mov	r2, sl
 800e476:	4649      	mov	r1, r9
 800e478:	4638      	mov	r0, r7
 800e47a:	47c0      	blx	r8
 800e47c:	3001      	adds	r0, #1
 800e47e:	d103      	bne.n	800e488 <_printf_common+0xb0>
 800e480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e488:	3501      	adds	r5, #1
 800e48a:	e7c4      	b.n	800e416 <_printf_common+0x3e>
 800e48c:	2030      	movs	r0, #48	; 0x30
 800e48e:	18e1      	adds	r1, r4, r3
 800e490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e49a:	4422      	add	r2, r4
 800e49c:	3302      	adds	r3, #2
 800e49e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4a2:	e7c5      	b.n	800e430 <_printf_common+0x58>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	47c0      	blx	r8
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d0e6      	beq.n	800e480 <_printf_common+0xa8>
 800e4b2:	3601      	adds	r6, #1
 800e4b4:	e7d9      	b.n	800e46a <_printf_common+0x92>
	...

0800e4b8 <_printf_i>:
 800e4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	460c      	mov	r4, r1
 800e4be:	7e27      	ldrb	r7, [r4, #24]
 800e4c0:	4691      	mov	r9, r2
 800e4c2:	2f78      	cmp	r7, #120	; 0x78
 800e4c4:	4680      	mov	r8, r0
 800e4c6:	469a      	mov	sl, r3
 800e4c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e4ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4ce:	d807      	bhi.n	800e4e0 <_printf_i+0x28>
 800e4d0:	2f62      	cmp	r7, #98	; 0x62
 800e4d2:	d80a      	bhi.n	800e4ea <_printf_i+0x32>
 800e4d4:	2f00      	cmp	r7, #0
 800e4d6:	f000 80d9 	beq.w	800e68c <_printf_i+0x1d4>
 800e4da:	2f58      	cmp	r7, #88	; 0x58
 800e4dc:	f000 80a4 	beq.w	800e628 <_printf_i+0x170>
 800e4e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e4e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4e8:	e03a      	b.n	800e560 <_printf_i+0xa8>
 800e4ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4ee:	2b15      	cmp	r3, #21
 800e4f0:	d8f6      	bhi.n	800e4e0 <_printf_i+0x28>
 800e4f2:	a001      	add	r0, pc, #4	; (adr r0, 800e4f8 <_printf_i+0x40>)
 800e4f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e4f8:	0800e551 	.word	0x0800e551
 800e4fc:	0800e565 	.word	0x0800e565
 800e500:	0800e4e1 	.word	0x0800e4e1
 800e504:	0800e4e1 	.word	0x0800e4e1
 800e508:	0800e4e1 	.word	0x0800e4e1
 800e50c:	0800e4e1 	.word	0x0800e4e1
 800e510:	0800e565 	.word	0x0800e565
 800e514:	0800e4e1 	.word	0x0800e4e1
 800e518:	0800e4e1 	.word	0x0800e4e1
 800e51c:	0800e4e1 	.word	0x0800e4e1
 800e520:	0800e4e1 	.word	0x0800e4e1
 800e524:	0800e673 	.word	0x0800e673
 800e528:	0800e595 	.word	0x0800e595
 800e52c:	0800e655 	.word	0x0800e655
 800e530:	0800e4e1 	.word	0x0800e4e1
 800e534:	0800e4e1 	.word	0x0800e4e1
 800e538:	0800e695 	.word	0x0800e695
 800e53c:	0800e4e1 	.word	0x0800e4e1
 800e540:	0800e595 	.word	0x0800e595
 800e544:	0800e4e1 	.word	0x0800e4e1
 800e548:	0800e4e1 	.word	0x0800e4e1
 800e54c:	0800e65d 	.word	0x0800e65d
 800e550:	680b      	ldr	r3, [r1, #0]
 800e552:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e556:	1d1a      	adds	r2, r3, #4
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	600a      	str	r2, [r1, #0]
 800e55c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e560:	2301      	movs	r3, #1
 800e562:	e0a4      	b.n	800e6ae <_printf_i+0x1f6>
 800e564:	6825      	ldr	r5, [r4, #0]
 800e566:	6808      	ldr	r0, [r1, #0]
 800e568:	062e      	lsls	r6, r5, #24
 800e56a:	f100 0304 	add.w	r3, r0, #4
 800e56e:	d50a      	bpl.n	800e586 <_printf_i+0xce>
 800e570:	6805      	ldr	r5, [r0, #0]
 800e572:	600b      	str	r3, [r1, #0]
 800e574:	2d00      	cmp	r5, #0
 800e576:	da03      	bge.n	800e580 <_printf_i+0xc8>
 800e578:	232d      	movs	r3, #45	; 0x2d
 800e57a:	426d      	negs	r5, r5
 800e57c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e580:	230a      	movs	r3, #10
 800e582:	485e      	ldr	r0, [pc, #376]	; (800e6fc <_printf_i+0x244>)
 800e584:	e019      	b.n	800e5ba <_printf_i+0x102>
 800e586:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e58a:	6805      	ldr	r5, [r0, #0]
 800e58c:	600b      	str	r3, [r1, #0]
 800e58e:	bf18      	it	ne
 800e590:	b22d      	sxthne	r5, r5
 800e592:	e7ef      	b.n	800e574 <_printf_i+0xbc>
 800e594:	680b      	ldr	r3, [r1, #0]
 800e596:	6825      	ldr	r5, [r4, #0]
 800e598:	1d18      	adds	r0, r3, #4
 800e59a:	6008      	str	r0, [r1, #0]
 800e59c:	0628      	lsls	r0, r5, #24
 800e59e:	d501      	bpl.n	800e5a4 <_printf_i+0xec>
 800e5a0:	681d      	ldr	r5, [r3, #0]
 800e5a2:	e002      	b.n	800e5aa <_printf_i+0xf2>
 800e5a4:	0669      	lsls	r1, r5, #25
 800e5a6:	d5fb      	bpl.n	800e5a0 <_printf_i+0xe8>
 800e5a8:	881d      	ldrh	r5, [r3, #0]
 800e5aa:	2f6f      	cmp	r7, #111	; 0x6f
 800e5ac:	bf0c      	ite	eq
 800e5ae:	2308      	moveq	r3, #8
 800e5b0:	230a      	movne	r3, #10
 800e5b2:	4852      	ldr	r0, [pc, #328]	; (800e6fc <_printf_i+0x244>)
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5ba:	6866      	ldr	r6, [r4, #4]
 800e5bc:	2e00      	cmp	r6, #0
 800e5be:	bfa8      	it	ge
 800e5c0:	6821      	ldrge	r1, [r4, #0]
 800e5c2:	60a6      	str	r6, [r4, #8]
 800e5c4:	bfa4      	itt	ge
 800e5c6:	f021 0104 	bicge.w	r1, r1, #4
 800e5ca:	6021      	strge	r1, [r4, #0]
 800e5cc:	b90d      	cbnz	r5, 800e5d2 <_printf_i+0x11a>
 800e5ce:	2e00      	cmp	r6, #0
 800e5d0:	d04d      	beq.n	800e66e <_printf_i+0x1b6>
 800e5d2:	4616      	mov	r6, r2
 800e5d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5d8:	fb03 5711 	mls	r7, r3, r1, r5
 800e5dc:	5dc7      	ldrb	r7, [r0, r7]
 800e5de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5e2:	462f      	mov	r7, r5
 800e5e4:	42bb      	cmp	r3, r7
 800e5e6:	460d      	mov	r5, r1
 800e5e8:	d9f4      	bls.n	800e5d4 <_printf_i+0x11c>
 800e5ea:	2b08      	cmp	r3, #8
 800e5ec:	d10b      	bne.n	800e606 <_printf_i+0x14e>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	07df      	lsls	r7, r3, #31
 800e5f2:	d508      	bpl.n	800e606 <_printf_i+0x14e>
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	6861      	ldr	r1, [r4, #4]
 800e5f8:	4299      	cmp	r1, r3
 800e5fa:	bfde      	ittt	le
 800e5fc:	2330      	movle	r3, #48	; 0x30
 800e5fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e602:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e606:	1b92      	subs	r2, r2, r6
 800e608:	6122      	str	r2, [r4, #16]
 800e60a:	464b      	mov	r3, r9
 800e60c:	4621      	mov	r1, r4
 800e60e:	4640      	mov	r0, r8
 800e610:	f8cd a000 	str.w	sl, [sp]
 800e614:	aa03      	add	r2, sp, #12
 800e616:	f7ff fedf 	bl	800e3d8 <_printf_common>
 800e61a:	3001      	adds	r0, #1
 800e61c:	d14c      	bne.n	800e6b8 <_printf_i+0x200>
 800e61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e622:	b004      	add	sp, #16
 800e624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e628:	4834      	ldr	r0, [pc, #208]	; (800e6fc <_printf_i+0x244>)
 800e62a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e62e:	680e      	ldr	r6, [r1, #0]
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	f856 5b04 	ldr.w	r5, [r6], #4
 800e636:	061f      	lsls	r7, r3, #24
 800e638:	600e      	str	r6, [r1, #0]
 800e63a:	d514      	bpl.n	800e666 <_printf_i+0x1ae>
 800e63c:	07d9      	lsls	r1, r3, #31
 800e63e:	bf44      	itt	mi
 800e640:	f043 0320 	orrmi.w	r3, r3, #32
 800e644:	6023      	strmi	r3, [r4, #0]
 800e646:	b91d      	cbnz	r5, 800e650 <_printf_i+0x198>
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	f023 0320 	bic.w	r3, r3, #32
 800e64e:	6023      	str	r3, [r4, #0]
 800e650:	2310      	movs	r3, #16
 800e652:	e7af      	b.n	800e5b4 <_printf_i+0xfc>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	f043 0320 	orr.w	r3, r3, #32
 800e65a:	6023      	str	r3, [r4, #0]
 800e65c:	2378      	movs	r3, #120	; 0x78
 800e65e:	4828      	ldr	r0, [pc, #160]	; (800e700 <_printf_i+0x248>)
 800e660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e664:	e7e3      	b.n	800e62e <_printf_i+0x176>
 800e666:	065e      	lsls	r6, r3, #25
 800e668:	bf48      	it	mi
 800e66a:	b2ad      	uxthmi	r5, r5
 800e66c:	e7e6      	b.n	800e63c <_printf_i+0x184>
 800e66e:	4616      	mov	r6, r2
 800e670:	e7bb      	b.n	800e5ea <_printf_i+0x132>
 800e672:	680b      	ldr	r3, [r1, #0]
 800e674:	6826      	ldr	r6, [r4, #0]
 800e676:	1d1d      	adds	r5, r3, #4
 800e678:	6960      	ldr	r0, [r4, #20]
 800e67a:	600d      	str	r5, [r1, #0]
 800e67c:	0635      	lsls	r5, r6, #24
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	d501      	bpl.n	800e686 <_printf_i+0x1ce>
 800e682:	6018      	str	r0, [r3, #0]
 800e684:	e002      	b.n	800e68c <_printf_i+0x1d4>
 800e686:	0671      	lsls	r1, r6, #25
 800e688:	d5fb      	bpl.n	800e682 <_printf_i+0x1ca>
 800e68a:	8018      	strh	r0, [r3, #0]
 800e68c:	2300      	movs	r3, #0
 800e68e:	4616      	mov	r6, r2
 800e690:	6123      	str	r3, [r4, #16]
 800e692:	e7ba      	b.n	800e60a <_printf_i+0x152>
 800e694:	680b      	ldr	r3, [r1, #0]
 800e696:	1d1a      	adds	r2, r3, #4
 800e698:	600a      	str	r2, [r1, #0]
 800e69a:	681e      	ldr	r6, [r3, #0]
 800e69c:	2100      	movs	r1, #0
 800e69e:	4630      	mov	r0, r6
 800e6a0:	6862      	ldr	r2, [r4, #4]
 800e6a2:	f002 feb1 	bl	8011408 <memchr>
 800e6a6:	b108      	cbz	r0, 800e6ac <_printf_i+0x1f4>
 800e6a8:	1b80      	subs	r0, r0, r6
 800e6aa:	6060      	str	r0, [r4, #4]
 800e6ac:	6863      	ldr	r3, [r4, #4]
 800e6ae:	6123      	str	r3, [r4, #16]
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6b6:	e7a8      	b.n	800e60a <_printf_i+0x152>
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	4640      	mov	r0, r8
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	47d0      	blx	sl
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d0ab      	beq.n	800e61e <_printf_i+0x166>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	079b      	lsls	r3, r3, #30
 800e6ca:	d413      	bmi.n	800e6f4 <_printf_i+0x23c>
 800e6cc:	68e0      	ldr	r0, [r4, #12]
 800e6ce:	9b03      	ldr	r3, [sp, #12]
 800e6d0:	4298      	cmp	r0, r3
 800e6d2:	bfb8      	it	lt
 800e6d4:	4618      	movlt	r0, r3
 800e6d6:	e7a4      	b.n	800e622 <_printf_i+0x16a>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	4632      	mov	r2, r6
 800e6dc:	4649      	mov	r1, r9
 800e6de:	4640      	mov	r0, r8
 800e6e0:	47d0      	blx	sl
 800e6e2:	3001      	adds	r0, #1
 800e6e4:	d09b      	beq.n	800e61e <_printf_i+0x166>
 800e6e6:	3501      	adds	r5, #1
 800e6e8:	68e3      	ldr	r3, [r4, #12]
 800e6ea:	9903      	ldr	r1, [sp, #12]
 800e6ec:	1a5b      	subs	r3, r3, r1
 800e6ee:	42ab      	cmp	r3, r5
 800e6f0:	dcf2      	bgt.n	800e6d8 <_printf_i+0x220>
 800e6f2:	e7eb      	b.n	800e6cc <_printf_i+0x214>
 800e6f4:	2500      	movs	r5, #0
 800e6f6:	f104 0619 	add.w	r6, r4, #25
 800e6fa:	e7f5      	b.n	800e6e8 <_printf_i+0x230>
 800e6fc:	08013972 	.word	0x08013972
 800e700:	08013983 	.word	0x08013983

0800e704 <_scanf_float>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	b087      	sub	sp, #28
 800e70a:	9303      	str	r3, [sp, #12]
 800e70c:	688b      	ldr	r3, [r1, #8]
 800e70e:	4617      	mov	r7, r2
 800e710:	1e5a      	subs	r2, r3, #1
 800e712:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e716:	bf85      	ittet	hi
 800e718:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e71c:	195b      	addhi	r3, r3, r5
 800e71e:	2300      	movls	r3, #0
 800e720:	9302      	strhi	r3, [sp, #8]
 800e722:	bf88      	it	hi
 800e724:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e728:	468b      	mov	fp, r1
 800e72a:	f04f 0500 	mov.w	r5, #0
 800e72e:	bf8c      	ite	hi
 800e730:	608b      	strhi	r3, [r1, #8]
 800e732:	9302      	strls	r3, [sp, #8]
 800e734:	680b      	ldr	r3, [r1, #0]
 800e736:	4680      	mov	r8, r0
 800e738:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e73c:	f84b 3b1c 	str.w	r3, [fp], #28
 800e740:	460c      	mov	r4, r1
 800e742:	465e      	mov	r6, fp
 800e744:	46aa      	mov	sl, r5
 800e746:	46a9      	mov	r9, r5
 800e748:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e74c:	9501      	str	r5, [sp, #4]
 800e74e:	68a2      	ldr	r2, [r4, #8]
 800e750:	b152      	cbz	r2, 800e768 <_scanf_float+0x64>
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b4e      	cmp	r3, #78	; 0x4e
 800e758:	d864      	bhi.n	800e824 <_scanf_float+0x120>
 800e75a:	2b40      	cmp	r3, #64	; 0x40
 800e75c:	d83c      	bhi.n	800e7d8 <_scanf_float+0xd4>
 800e75e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e762:	b2c8      	uxtb	r0, r1
 800e764:	280e      	cmp	r0, #14
 800e766:	d93a      	bls.n	800e7de <_scanf_float+0xda>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	d003      	beq.n	800e776 <_scanf_float+0x72>
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e77a:	f1ba 0f01 	cmp.w	sl, #1
 800e77e:	f200 8113 	bhi.w	800e9a8 <_scanf_float+0x2a4>
 800e782:	455e      	cmp	r6, fp
 800e784:	f200 8105 	bhi.w	800e992 <_scanf_float+0x28e>
 800e788:	2501      	movs	r5, #1
 800e78a:	4628      	mov	r0, r5
 800e78c:	b007      	add	sp, #28
 800e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e792:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e796:	2a0d      	cmp	r2, #13
 800e798:	d8e6      	bhi.n	800e768 <_scanf_float+0x64>
 800e79a:	a101      	add	r1, pc, #4	; (adr r1, 800e7a0 <_scanf_float+0x9c>)
 800e79c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e7a0:	0800e8df 	.word	0x0800e8df
 800e7a4:	0800e769 	.word	0x0800e769
 800e7a8:	0800e769 	.word	0x0800e769
 800e7ac:	0800e769 	.word	0x0800e769
 800e7b0:	0800e93f 	.word	0x0800e93f
 800e7b4:	0800e917 	.word	0x0800e917
 800e7b8:	0800e769 	.word	0x0800e769
 800e7bc:	0800e769 	.word	0x0800e769
 800e7c0:	0800e8ed 	.word	0x0800e8ed
 800e7c4:	0800e769 	.word	0x0800e769
 800e7c8:	0800e769 	.word	0x0800e769
 800e7cc:	0800e769 	.word	0x0800e769
 800e7d0:	0800e769 	.word	0x0800e769
 800e7d4:	0800e8a5 	.word	0x0800e8a5
 800e7d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e7dc:	e7db      	b.n	800e796 <_scanf_float+0x92>
 800e7de:	290e      	cmp	r1, #14
 800e7e0:	d8c2      	bhi.n	800e768 <_scanf_float+0x64>
 800e7e2:	a001      	add	r0, pc, #4	; (adr r0, 800e7e8 <_scanf_float+0xe4>)
 800e7e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e7e8:	0800e897 	.word	0x0800e897
 800e7ec:	0800e769 	.word	0x0800e769
 800e7f0:	0800e897 	.word	0x0800e897
 800e7f4:	0800e92b 	.word	0x0800e92b
 800e7f8:	0800e769 	.word	0x0800e769
 800e7fc:	0800e845 	.word	0x0800e845
 800e800:	0800e881 	.word	0x0800e881
 800e804:	0800e881 	.word	0x0800e881
 800e808:	0800e881 	.word	0x0800e881
 800e80c:	0800e881 	.word	0x0800e881
 800e810:	0800e881 	.word	0x0800e881
 800e814:	0800e881 	.word	0x0800e881
 800e818:	0800e881 	.word	0x0800e881
 800e81c:	0800e881 	.word	0x0800e881
 800e820:	0800e881 	.word	0x0800e881
 800e824:	2b6e      	cmp	r3, #110	; 0x6e
 800e826:	d809      	bhi.n	800e83c <_scanf_float+0x138>
 800e828:	2b60      	cmp	r3, #96	; 0x60
 800e82a:	d8b2      	bhi.n	800e792 <_scanf_float+0x8e>
 800e82c:	2b54      	cmp	r3, #84	; 0x54
 800e82e:	d077      	beq.n	800e920 <_scanf_float+0x21c>
 800e830:	2b59      	cmp	r3, #89	; 0x59
 800e832:	d199      	bne.n	800e768 <_scanf_float+0x64>
 800e834:	2d07      	cmp	r5, #7
 800e836:	d197      	bne.n	800e768 <_scanf_float+0x64>
 800e838:	2508      	movs	r5, #8
 800e83a:	e029      	b.n	800e890 <_scanf_float+0x18c>
 800e83c:	2b74      	cmp	r3, #116	; 0x74
 800e83e:	d06f      	beq.n	800e920 <_scanf_float+0x21c>
 800e840:	2b79      	cmp	r3, #121	; 0x79
 800e842:	e7f6      	b.n	800e832 <_scanf_float+0x12e>
 800e844:	6821      	ldr	r1, [r4, #0]
 800e846:	05c8      	lsls	r0, r1, #23
 800e848:	d51a      	bpl.n	800e880 <_scanf_float+0x17c>
 800e84a:	9b02      	ldr	r3, [sp, #8]
 800e84c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e850:	6021      	str	r1, [r4, #0]
 800e852:	f109 0901 	add.w	r9, r9, #1
 800e856:	b11b      	cbz	r3, 800e860 <_scanf_float+0x15c>
 800e858:	3b01      	subs	r3, #1
 800e85a:	3201      	adds	r2, #1
 800e85c:	9302      	str	r3, [sp, #8]
 800e85e:	60a2      	str	r2, [r4, #8]
 800e860:	68a3      	ldr	r3, [r4, #8]
 800e862:	3b01      	subs	r3, #1
 800e864:	60a3      	str	r3, [r4, #8]
 800e866:	6923      	ldr	r3, [r4, #16]
 800e868:	3301      	adds	r3, #1
 800e86a:	6123      	str	r3, [r4, #16]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3b01      	subs	r3, #1
 800e870:	2b00      	cmp	r3, #0
 800e872:	607b      	str	r3, [r7, #4]
 800e874:	f340 8084 	ble.w	800e980 <_scanf_float+0x27c>
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	3301      	adds	r3, #1
 800e87c:	603b      	str	r3, [r7, #0]
 800e87e:	e766      	b.n	800e74e <_scanf_float+0x4a>
 800e880:	eb1a 0f05 	cmn.w	sl, r5
 800e884:	f47f af70 	bne.w	800e768 <_scanf_float+0x64>
 800e888:	6822      	ldr	r2, [r4, #0]
 800e88a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e88e:	6022      	str	r2, [r4, #0]
 800e890:	f806 3b01 	strb.w	r3, [r6], #1
 800e894:	e7e4      	b.n	800e860 <_scanf_float+0x15c>
 800e896:	6822      	ldr	r2, [r4, #0]
 800e898:	0610      	lsls	r0, r2, #24
 800e89a:	f57f af65 	bpl.w	800e768 <_scanf_float+0x64>
 800e89e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e8a2:	e7f4      	b.n	800e88e <_scanf_float+0x18a>
 800e8a4:	f1ba 0f00 	cmp.w	sl, #0
 800e8a8:	d10e      	bne.n	800e8c8 <_scanf_float+0x1c4>
 800e8aa:	f1b9 0f00 	cmp.w	r9, #0
 800e8ae:	d10e      	bne.n	800e8ce <_scanf_float+0x1ca>
 800e8b0:	6822      	ldr	r2, [r4, #0]
 800e8b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e8b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e8ba:	d108      	bne.n	800e8ce <_scanf_float+0x1ca>
 800e8bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e8c0:	f04f 0a01 	mov.w	sl, #1
 800e8c4:	6022      	str	r2, [r4, #0]
 800e8c6:	e7e3      	b.n	800e890 <_scanf_float+0x18c>
 800e8c8:	f1ba 0f02 	cmp.w	sl, #2
 800e8cc:	d055      	beq.n	800e97a <_scanf_float+0x276>
 800e8ce:	2d01      	cmp	r5, #1
 800e8d0:	d002      	beq.n	800e8d8 <_scanf_float+0x1d4>
 800e8d2:	2d04      	cmp	r5, #4
 800e8d4:	f47f af48 	bne.w	800e768 <_scanf_float+0x64>
 800e8d8:	3501      	adds	r5, #1
 800e8da:	b2ed      	uxtb	r5, r5
 800e8dc:	e7d8      	b.n	800e890 <_scanf_float+0x18c>
 800e8de:	f1ba 0f01 	cmp.w	sl, #1
 800e8e2:	f47f af41 	bne.w	800e768 <_scanf_float+0x64>
 800e8e6:	f04f 0a02 	mov.w	sl, #2
 800e8ea:	e7d1      	b.n	800e890 <_scanf_float+0x18c>
 800e8ec:	b97d      	cbnz	r5, 800e90e <_scanf_float+0x20a>
 800e8ee:	f1b9 0f00 	cmp.w	r9, #0
 800e8f2:	f47f af3c 	bne.w	800e76e <_scanf_float+0x6a>
 800e8f6:	6822      	ldr	r2, [r4, #0]
 800e8f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e8fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e900:	f47f af39 	bne.w	800e776 <_scanf_float+0x72>
 800e904:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e908:	2501      	movs	r5, #1
 800e90a:	6022      	str	r2, [r4, #0]
 800e90c:	e7c0      	b.n	800e890 <_scanf_float+0x18c>
 800e90e:	2d03      	cmp	r5, #3
 800e910:	d0e2      	beq.n	800e8d8 <_scanf_float+0x1d4>
 800e912:	2d05      	cmp	r5, #5
 800e914:	e7de      	b.n	800e8d4 <_scanf_float+0x1d0>
 800e916:	2d02      	cmp	r5, #2
 800e918:	f47f af26 	bne.w	800e768 <_scanf_float+0x64>
 800e91c:	2503      	movs	r5, #3
 800e91e:	e7b7      	b.n	800e890 <_scanf_float+0x18c>
 800e920:	2d06      	cmp	r5, #6
 800e922:	f47f af21 	bne.w	800e768 <_scanf_float+0x64>
 800e926:	2507      	movs	r5, #7
 800e928:	e7b2      	b.n	800e890 <_scanf_float+0x18c>
 800e92a:	6822      	ldr	r2, [r4, #0]
 800e92c:	0591      	lsls	r1, r2, #22
 800e92e:	f57f af1b 	bpl.w	800e768 <_scanf_float+0x64>
 800e932:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e936:	6022      	str	r2, [r4, #0]
 800e938:	f8cd 9004 	str.w	r9, [sp, #4]
 800e93c:	e7a8      	b.n	800e890 <_scanf_float+0x18c>
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e944:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e948:	d006      	beq.n	800e958 <_scanf_float+0x254>
 800e94a:	0550      	lsls	r0, r2, #21
 800e94c:	f57f af0c 	bpl.w	800e768 <_scanf_float+0x64>
 800e950:	f1b9 0f00 	cmp.w	r9, #0
 800e954:	f43f af0f 	beq.w	800e776 <_scanf_float+0x72>
 800e958:	0591      	lsls	r1, r2, #22
 800e95a:	bf58      	it	pl
 800e95c:	9901      	ldrpl	r1, [sp, #4]
 800e95e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e962:	bf58      	it	pl
 800e964:	eba9 0101 	subpl.w	r1, r9, r1
 800e968:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e96c:	f04f 0900 	mov.w	r9, #0
 800e970:	bf58      	it	pl
 800e972:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e976:	6022      	str	r2, [r4, #0]
 800e978:	e78a      	b.n	800e890 <_scanf_float+0x18c>
 800e97a:	f04f 0a03 	mov.w	sl, #3
 800e97e:	e787      	b.n	800e890 <_scanf_float+0x18c>
 800e980:	4639      	mov	r1, r7
 800e982:	4640      	mov	r0, r8
 800e984:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e988:	4798      	blx	r3
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f43f aedf 	beq.w	800e74e <_scanf_float+0x4a>
 800e990:	e6ea      	b.n	800e768 <_scanf_float+0x64>
 800e992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e996:	463a      	mov	r2, r7
 800e998:	4640      	mov	r0, r8
 800e99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e99e:	4798      	blx	r3
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	6123      	str	r3, [r4, #16]
 800e9a6:	e6ec      	b.n	800e782 <_scanf_float+0x7e>
 800e9a8:	1e6b      	subs	r3, r5, #1
 800e9aa:	2b06      	cmp	r3, #6
 800e9ac:	d825      	bhi.n	800e9fa <_scanf_float+0x2f6>
 800e9ae:	2d02      	cmp	r5, #2
 800e9b0:	d836      	bhi.n	800ea20 <_scanf_float+0x31c>
 800e9b2:	455e      	cmp	r6, fp
 800e9b4:	f67f aee8 	bls.w	800e788 <_scanf_float+0x84>
 800e9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9bc:	463a      	mov	r2, r7
 800e9be:	4640      	mov	r0, r8
 800e9c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9c4:	4798      	blx	r3
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	6123      	str	r3, [r4, #16]
 800e9cc:	e7f1      	b.n	800e9b2 <_scanf_float+0x2ae>
 800e9ce:	9802      	ldr	r0, [sp, #8]
 800e9d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e9d8:	463a      	mov	r2, r7
 800e9da:	9002      	str	r0, [sp, #8]
 800e9dc:	4640      	mov	r0, r8
 800e9de:	4798      	blx	r3
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	3b01      	subs	r3, #1
 800e9e4:	6123      	str	r3, [r4, #16]
 800e9e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e9ea:	fa5f fa8a 	uxtb.w	sl, sl
 800e9ee:	f1ba 0f02 	cmp.w	sl, #2
 800e9f2:	d1ec      	bne.n	800e9ce <_scanf_float+0x2ca>
 800e9f4:	3d03      	subs	r5, #3
 800e9f6:	b2ed      	uxtb	r5, r5
 800e9f8:	1b76      	subs	r6, r6, r5
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	05da      	lsls	r2, r3, #23
 800e9fe:	d52f      	bpl.n	800ea60 <_scanf_float+0x35c>
 800ea00:	055b      	lsls	r3, r3, #21
 800ea02:	d510      	bpl.n	800ea26 <_scanf_float+0x322>
 800ea04:	455e      	cmp	r6, fp
 800ea06:	f67f aebf 	bls.w	800e788 <_scanf_float+0x84>
 800ea0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea0e:	463a      	mov	r2, r7
 800ea10:	4640      	mov	r0, r8
 800ea12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea16:	4798      	blx	r3
 800ea18:	6923      	ldr	r3, [r4, #16]
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	6123      	str	r3, [r4, #16]
 800ea1e:	e7f1      	b.n	800ea04 <_scanf_float+0x300>
 800ea20:	46aa      	mov	sl, r5
 800ea22:	9602      	str	r6, [sp, #8]
 800ea24:	e7df      	b.n	800e9e6 <_scanf_float+0x2e2>
 800ea26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	2965      	cmp	r1, #101	; 0x65
 800ea2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ea32:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ea36:	6123      	str	r3, [r4, #16]
 800ea38:	d00c      	beq.n	800ea54 <_scanf_float+0x350>
 800ea3a:	2945      	cmp	r1, #69	; 0x45
 800ea3c:	d00a      	beq.n	800ea54 <_scanf_float+0x350>
 800ea3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea42:	463a      	mov	r2, r7
 800ea44:	4640      	mov	r0, r8
 800ea46:	4798      	blx	r3
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	1eb5      	subs	r5, r6, #2
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	463a      	mov	r2, r7
 800ea56:	4640      	mov	r0, r8
 800ea58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea5c:	4798      	blx	r3
 800ea5e:	462e      	mov	r6, r5
 800ea60:	6825      	ldr	r5, [r4, #0]
 800ea62:	f015 0510 	ands.w	r5, r5, #16
 800ea66:	d159      	bne.n	800eb1c <_scanf_float+0x418>
 800ea68:	7035      	strb	r5, [r6, #0]
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ea70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea74:	d11c      	bne.n	800eab0 <_scanf_float+0x3ac>
 800ea76:	9b01      	ldr	r3, [sp, #4]
 800ea78:	454b      	cmp	r3, r9
 800ea7a:	eba3 0209 	sub.w	r2, r3, r9
 800ea7e:	d124      	bne.n	800eaca <_scanf_float+0x3c6>
 800ea80:	2200      	movs	r2, #0
 800ea82:	4659      	mov	r1, fp
 800ea84:	4640      	mov	r0, r8
 800ea86:	f000 febf 	bl	800f808 <_strtod_r>
 800ea8a:	f8d4 c000 	ldr.w	ip, [r4]
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	f01c 0f02 	tst.w	ip, #2
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	d021      	beq.n	800eae0 <_scanf_float+0x3dc>
 800ea9c:	9903      	ldr	r1, [sp, #12]
 800ea9e:	1d1a      	adds	r2, r3, #4
 800eaa0:	600a      	str	r2, [r1, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	e9c3 6700 	strd	r6, r7, [r3]
 800eaa8:	68e3      	ldr	r3, [r4, #12]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	60e3      	str	r3, [r4, #12]
 800eaae:	e66c      	b.n	800e78a <_scanf_float+0x86>
 800eab0:	9b04      	ldr	r3, [sp, #16]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0e4      	beq.n	800ea80 <_scanf_float+0x37c>
 800eab6:	9905      	ldr	r1, [sp, #20]
 800eab8:	230a      	movs	r3, #10
 800eaba:	462a      	mov	r2, r5
 800eabc:	4640      	mov	r0, r8
 800eabe:	3101      	adds	r1, #1
 800eac0:	f000 ff8c 	bl	800f9dc <_strtol_r>
 800eac4:	9b04      	ldr	r3, [sp, #16]
 800eac6:	9e05      	ldr	r6, [sp, #20]
 800eac8:	1ac2      	subs	r2, r0, r3
 800eaca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eace:	429e      	cmp	r6, r3
 800ead0:	bf28      	it	cs
 800ead2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ead6:	4630      	mov	r0, r6
 800ead8:	4911      	ldr	r1, [pc, #68]	; (800eb20 <_scanf_float+0x41c>)
 800eada:	f000 f839 	bl	800eb50 <siprintf>
 800eade:	e7cf      	b.n	800ea80 <_scanf_float+0x37c>
 800eae0:	f01c 0f04 	tst.w	ip, #4
 800eae4:	f103 0e04 	add.w	lr, r3, #4
 800eae8:	d003      	beq.n	800eaf2 <_scanf_float+0x3ee>
 800eaea:	9903      	ldr	r1, [sp, #12]
 800eaec:	f8c1 e000 	str.w	lr, [r1]
 800eaf0:	e7d7      	b.n	800eaa2 <_scanf_float+0x39e>
 800eaf2:	9a03      	ldr	r2, [sp, #12]
 800eaf4:	f8c2 e000 	str.w	lr, [r2]
 800eaf8:	f8d3 8000 	ldr.w	r8, [r3]
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	f7f1 fff0 	bl	8000ae4 <__aeabi_dcmpun>
 800eb04:	b128      	cbz	r0, 800eb12 <_scanf_float+0x40e>
 800eb06:	4807      	ldr	r0, [pc, #28]	; (800eb24 <_scanf_float+0x420>)
 800eb08:	f000 f81e 	bl	800eb48 <nanf>
 800eb0c:	f8c8 0000 	str.w	r0, [r8]
 800eb10:	e7ca      	b.n	800eaa8 <_scanf_float+0x3a4>
 800eb12:	4630      	mov	r0, r6
 800eb14:	4639      	mov	r1, r7
 800eb16:	f7f2 f843 	bl	8000ba0 <__aeabi_d2f>
 800eb1a:	e7f7      	b.n	800eb0c <_scanf_float+0x408>
 800eb1c:	2500      	movs	r5, #0
 800eb1e:	e634      	b.n	800e78a <_scanf_float+0x86>
 800eb20:	08013994 	.word	0x08013994
 800eb24:	08013a2b 	.word	0x08013a2b

0800eb28 <_sbrk_r>:
 800eb28:	b538      	push	{r3, r4, r5, lr}
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	4d05      	ldr	r5, [pc, #20]	; (800eb44 <_sbrk_r+0x1c>)
 800eb2e:	4604      	mov	r4, r0
 800eb30:	4608      	mov	r0, r1
 800eb32:	602b      	str	r3, [r5, #0]
 800eb34:	f7f3 fee8 	bl	8002908 <_sbrk>
 800eb38:	1c43      	adds	r3, r0, #1
 800eb3a:	d102      	bne.n	800eb42 <_sbrk_r+0x1a>
 800eb3c:	682b      	ldr	r3, [r5, #0]
 800eb3e:	b103      	cbz	r3, 800eb42 <_sbrk_r+0x1a>
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	bd38      	pop	{r3, r4, r5, pc}
 800eb44:	200013f8 	.word	0x200013f8

0800eb48 <nanf>:
 800eb48:	4800      	ldr	r0, [pc, #0]	; (800eb4c <nanf+0x4>)
 800eb4a:	4770      	bx	lr
 800eb4c:	7fc00000 	.word	0x7fc00000

0800eb50 <siprintf>:
 800eb50:	b40e      	push	{r1, r2, r3}
 800eb52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb56:	b500      	push	{lr}
 800eb58:	b09c      	sub	sp, #112	; 0x70
 800eb5a:	ab1d      	add	r3, sp, #116	; 0x74
 800eb5c:	9002      	str	r0, [sp, #8]
 800eb5e:	9006      	str	r0, [sp, #24]
 800eb60:	9107      	str	r1, [sp, #28]
 800eb62:	9104      	str	r1, [sp, #16]
 800eb64:	4808      	ldr	r0, [pc, #32]	; (800eb88 <siprintf+0x38>)
 800eb66:	4909      	ldr	r1, [pc, #36]	; (800eb8c <siprintf+0x3c>)
 800eb68:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb6c:	9105      	str	r1, [sp, #20]
 800eb6e:	6800      	ldr	r0, [r0, #0]
 800eb70:	a902      	add	r1, sp, #8
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	f003 f984 	bl	8011e80 <_svfiprintf_r>
 800eb78:	2200      	movs	r2, #0
 800eb7a:	9b02      	ldr	r3, [sp, #8]
 800eb7c:	701a      	strb	r2, [r3, #0]
 800eb7e:	b01c      	add	sp, #112	; 0x70
 800eb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb84:	b003      	add	sp, #12
 800eb86:	4770      	bx	lr
 800eb88:	200000d4 	.word	0x200000d4
 800eb8c:	ffff0208 	.word	0xffff0208

0800eb90 <strlwr>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	4c07      	ldr	r4, [pc, #28]	; (800ebb0 <strlwr+0x20>)
 800eb94:	1e42      	subs	r2, r0, #1
 800eb96:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800eb9a:	b903      	cbnz	r3, 800eb9e <strlwr+0xe>
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	5ce1      	ldrb	r1, [r4, r3]
 800eba0:	f001 0103 	and.w	r1, r1, #3
 800eba4:	2901      	cmp	r1, #1
 800eba6:	bf08      	it	eq
 800eba8:	3320      	addeq	r3, #32
 800ebaa:	7013      	strb	r3, [r2, #0]
 800ebac:	e7f3      	b.n	800eb96 <strlwr+0x6>
 800ebae:	bf00      	nop
 800ebb0:	08013a2d 	.word	0x08013a2d

0800ebb4 <strncmp>:
 800ebb4:	b510      	push	{r4, lr}
 800ebb6:	b16a      	cbz	r2, 800ebd4 <strncmp+0x20>
 800ebb8:	3901      	subs	r1, #1
 800ebba:	1884      	adds	r4, r0, r2
 800ebbc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ebc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d103      	bne.n	800ebd0 <strncmp+0x1c>
 800ebc8:	42a0      	cmp	r0, r4
 800ebca:	d001      	beq.n	800ebd0 <strncmp+0x1c>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1f5      	bne.n	800ebbc <strncmp+0x8>
 800ebd0:	1a98      	subs	r0, r3, r2
 800ebd2:	bd10      	pop	{r4, pc}
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	e7fc      	b.n	800ebd2 <strncmp+0x1e>

0800ebd8 <sulp>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	460f      	mov	r7, r1
 800ebde:	4690      	mov	r8, r2
 800ebe0:	f002 ff9c 	bl	8011b1c <__ulp>
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	460d      	mov	r5, r1
 800ebe8:	f1b8 0f00 	cmp.w	r8, #0
 800ebec:	d011      	beq.n	800ec12 <sulp+0x3a>
 800ebee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ebf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	dd0b      	ble.n	800ec12 <sulp+0x3a>
 800ebfa:	2400      	movs	r4, #0
 800ebfc:	051b      	lsls	r3, r3, #20
 800ebfe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec06:	4622      	mov	r2, r4
 800ec08:	462b      	mov	r3, r5
 800ec0a:	f7f1 fcd1 	bl	80005b0 <__aeabi_dmul>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	460d      	mov	r5, r1
 800ec12:	4620      	mov	r0, r4
 800ec14:	4629      	mov	r1, r5
 800ec16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1a:	0000      	movs	r0, r0
 800ec1c:	0000      	movs	r0, r0
	...

0800ec20 <_strtod_l>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	469b      	mov	fp, r3
 800ec26:	2300      	movs	r3, #0
 800ec28:	b0a1      	sub	sp, #132	; 0x84
 800ec2a:	931c      	str	r3, [sp, #112]	; 0x70
 800ec2c:	4ba1      	ldr	r3, [pc, #644]	; (800eeb4 <_strtod_l+0x294>)
 800ec2e:	4682      	mov	sl, r0
 800ec30:	681f      	ldr	r7, [r3, #0]
 800ec32:	460e      	mov	r6, r1
 800ec34:	4638      	mov	r0, r7
 800ec36:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec38:	f7f1 faf6 	bl	8000228 <strlen>
 800ec3c:	f04f 0800 	mov.w	r8, #0
 800ec40:	4604      	mov	r4, r0
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec4a:	781a      	ldrb	r2, [r3, #0]
 800ec4c:	2a2b      	cmp	r2, #43	; 0x2b
 800ec4e:	d04c      	beq.n	800ecea <_strtod_l+0xca>
 800ec50:	d83a      	bhi.n	800ecc8 <_strtod_l+0xa8>
 800ec52:	2a0d      	cmp	r2, #13
 800ec54:	d833      	bhi.n	800ecbe <_strtod_l+0x9e>
 800ec56:	2a08      	cmp	r2, #8
 800ec58:	d833      	bhi.n	800ecc2 <_strtod_l+0xa2>
 800ec5a:	2a00      	cmp	r2, #0
 800ec5c:	d03d      	beq.n	800ecda <_strtod_l+0xba>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	930c      	str	r3, [sp, #48]	; 0x30
 800ec62:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ec64:	782b      	ldrb	r3, [r5, #0]
 800ec66:	2b30      	cmp	r3, #48	; 0x30
 800ec68:	f040 80af 	bne.w	800edca <_strtod_l+0x1aa>
 800ec6c:	786b      	ldrb	r3, [r5, #1]
 800ec6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec72:	2b58      	cmp	r3, #88	; 0x58
 800ec74:	d16c      	bne.n	800ed50 <_strtod_l+0x130>
 800ec76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec78:	4650      	mov	r0, sl
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	ab1c      	add	r3, sp, #112	; 0x70
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	4a8d      	ldr	r2, [pc, #564]	; (800eeb8 <_strtod_l+0x298>)
 800ec82:	f8cd b008 	str.w	fp, [sp, #8]
 800ec86:	ab1d      	add	r3, sp, #116	; 0x74
 800ec88:	a91b      	add	r1, sp, #108	; 0x6c
 800ec8a:	f002 f841 	bl	8010d10 <__gethex>
 800ec8e:	f010 0607 	ands.w	r6, r0, #7
 800ec92:	4604      	mov	r4, r0
 800ec94:	d005      	beq.n	800eca2 <_strtod_l+0x82>
 800ec96:	2e06      	cmp	r6, #6
 800ec98:	d129      	bne.n	800ecee <_strtod_l+0xce>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	3501      	adds	r5, #1
 800ec9e:	951b      	str	r5, [sp, #108]	; 0x6c
 800eca0:	930c      	str	r3, [sp, #48]	; 0x30
 800eca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f040 8596 	bne.w	800f7d6 <_strtod_l+0xbb6>
 800ecaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecac:	b1d3      	cbz	r3, 800ece4 <_strtod_l+0xc4>
 800ecae:	4642      	mov	r2, r8
 800ecb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecb4:	4610      	mov	r0, r2
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	b021      	add	sp, #132	; 0x84
 800ecba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecbe:	2a20      	cmp	r2, #32
 800ecc0:	d1cd      	bne.n	800ec5e <_strtod_l+0x3e>
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecc6:	e7bf      	b.n	800ec48 <_strtod_l+0x28>
 800ecc8:	2a2d      	cmp	r2, #45	; 0x2d
 800ecca:	d1c8      	bne.n	800ec5e <_strtod_l+0x3e>
 800eccc:	2201      	movs	r2, #1
 800ecce:	920c      	str	r2, [sp, #48]	; 0x30
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	921b      	str	r2, [sp, #108]	; 0x6c
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1c3      	bne.n	800ec62 <_strtod_l+0x42>
 800ecda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecdc:	961b      	str	r6, [sp, #108]	; 0x6c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f040 8577 	bne.w	800f7d2 <_strtod_l+0xbb2>
 800ece4:	4642      	mov	r2, r8
 800ece6:	464b      	mov	r3, r9
 800ece8:	e7e4      	b.n	800ecb4 <_strtod_l+0x94>
 800ecea:	2200      	movs	r2, #0
 800ecec:	e7ef      	b.n	800ecce <_strtod_l+0xae>
 800ecee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ecf0:	b13a      	cbz	r2, 800ed02 <_strtod_l+0xe2>
 800ecf2:	2135      	movs	r1, #53	; 0x35
 800ecf4:	a81e      	add	r0, sp, #120	; 0x78
 800ecf6:	f003 f815 	bl	8011d24 <__copybits>
 800ecfa:	4650      	mov	r0, sl
 800ecfc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ecfe:	f002 fbdd 	bl	80114bc <_Bfree>
 800ed02:	3e01      	subs	r6, #1
 800ed04:	2e05      	cmp	r6, #5
 800ed06:	d807      	bhi.n	800ed18 <_strtod_l+0xf8>
 800ed08:	e8df f006 	tbb	[pc, r6]
 800ed0c:	1d180b0e 	.word	0x1d180b0e
 800ed10:	030e      	.short	0x030e
 800ed12:	f04f 0900 	mov.w	r9, #0
 800ed16:	46c8      	mov	r8, r9
 800ed18:	0721      	lsls	r1, r4, #28
 800ed1a:	d5c2      	bpl.n	800eca2 <_strtod_l+0x82>
 800ed1c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ed20:	e7bf      	b.n	800eca2 <_strtod_l+0x82>
 800ed22:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800ed26:	e7f7      	b.n	800ed18 <_strtod_l+0xf8>
 800ed28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ed2a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800ed2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ed3a:	e7ed      	b.n	800ed18 <_strtod_l+0xf8>
 800ed3c:	f04f 0800 	mov.w	r8, #0
 800ed40:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eebc <_strtod_l+0x29c>
 800ed44:	e7e8      	b.n	800ed18 <_strtod_l+0xf8>
 800ed46:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ed4a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ed4e:	e7e3      	b.n	800ed18 <_strtod_l+0xf8>
 800ed50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed56:	785b      	ldrb	r3, [r3, #1]
 800ed58:	2b30      	cmp	r3, #48	; 0x30
 800ed5a:	d0f9      	beq.n	800ed50 <_strtod_l+0x130>
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0a0      	beq.n	800eca2 <_strtod_l+0x82>
 800ed60:	2301      	movs	r3, #1
 800ed62:	9307      	str	r3, [sp, #28]
 800ed64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed66:	220a      	movs	r2, #10
 800ed68:	9308      	str	r3, [sp, #32]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	469b      	mov	fp, r3
 800ed6e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ed72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ed74:	7805      	ldrb	r5, [r0, #0]
 800ed76:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ed7a:	b2d9      	uxtb	r1, r3
 800ed7c:	2909      	cmp	r1, #9
 800ed7e:	d926      	bls.n	800edce <_strtod_l+0x1ae>
 800ed80:	4622      	mov	r2, r4
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7ff ff16 	bl	800ebb4 <strncmp>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d032      	beq.n	800edf2 <_strtod_l+0x1d2>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	462b      	mov	r3, r5
 800ed90:	465c      	mov	r4, fp
 800ed92:	4602      	mov	r2, r0
 800ed94:	9004      	str	r0, [sp, #16]
 800ed96:	2b65      	cmp	r3, #101	; 0x65
 800ed98:	d001      	beq.n	800ed9e <_strtod_l+0x17e>
 800ed9a:	2b45      	cmp	r3, #69	; 0x45
 800ed9c:	d113      	bne.n	800edc6 <_strtod_l+0x1a6>
 800ed9e:	b91c      	cbnz	r4, 800eda8 <_strtod_l+0x188>
 800eda0:	9b07      	ldr	r3, [sp, #28]
 800eda2:	4303      	orrs	r3, r0
 800eda4:	d099      	beq.n	800ecda <_strtod_l+0xba>
 800eda6:	2400      	movs	r4, #0
 800eda8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800edaa:	1c73      	adds	r3, r6, #1
 800edac:	931b      	str	r3, [sp, #108]	; 0x6c
 800edae:	7873      	ldrb	r3, [r6, #1]
 800edb0:	2b2b      	cmp	r3, #43	; 0x2b
 800edb2:	d078      	beq.n	800eea6 <_strtod_l+0x286>
 800edb4:	2b2d      	cmp	r3, #45	; 0x2d
 800edb6:	d07b      	beq.n	800eeb0 <_strtod_l+0x290>
 800edb8:	2700      	movs	r7, #0
 800edba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800edbe:	2909      	cmp	r1, #9
 800edc0:	f240 8082 	bls.w	800eec8 <_strtod_l+0x2a8>
 800edc4:	961b      	str	r6, [sp, #108]	; 0x6c
 800edc6:	2500      	movs	r5, #0
 800edc8:	e09e      	b.n	800ef08 <_strtod_l+0x2e8>
 800edca:	2300      	movs	r3, #0
 800edcc:	e7c9      	b.n	800ed62 <_strtod_l+0x142>
 800edce:	f1bb 0f08 	cmp.w	fp, #8
 800edd2:	bfd5      	itete	le
 800edd4:	9906      	ldrle	r1, [sp, #24]
 800edd6:	9905      	ldrgt	r1, [sp, #20]
 800edd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800eddc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ede0:	f100 0001 	add.w	r0, r0, #1
 800ede4:	bfd4      	ite	le
 800ede6:	9306      	strle	r3, [sp, #24]
 800ede8:	9305      	strgt	r3, [sp, #20]
 800edea:	f10b 0b01 	add.w	fp, fp, #1
 800edee:	901b      	str	r0, [sp, #108]	; 0x6c
 800edf0:	e7bf      	b.n	800ed72 <_strtod_l+0x152>
 800edf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edf4:	191a      	adds	r2, r3, r4
 800edf6:	921b      	str	r2, [sp, #108]	; 0x6c
 800edf8:	5d1b      	ldrb	r3, [r3, r4]
 800edfa:	f1bb 0f00 	cmp.w	fp, #0
 800edfe:	d036      	beq.n	800ee6e <_strtod_l+0x24e>
 800ee00:	465c      	mov	r4, fp
 800ee02:	9004      	str	r0, [sp, #16]
 800ee04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ee08:	2a09      	cmp	r2, #9
 800ee0a:	d912      	bls.n	800ee32 <_strtod_l+0x212>
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	e7c2      	b.n	800ed96 <_strtod_l+0x176>
 800ee10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee12:	3001      	adds	r0, #1
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee18:	785b      	ldrb	r3, [r3, #1]
 800ee1a:	2b30      	cmp	r3, #48	; 0x30
 800ee1c:	d0f8      	beq.n	800ee10 <_strtod_l+0x1f0>
 800ee1e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ee22:	2a08      	cmp	r2, #8
 800ee24:	f200 84dc 	bhi.w	800f7e0 <_strtod_l+0xbc0>
 800ee28:	9004      	str	r0, [sp, #16]
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee30:	9208      	str	r2, [sp, #32]
 800ee32:	3b30      	subs	r3, #48	; 0x30
 800ee34:	f100 0201 	add.w	r2, r0, #1
 800ee38:	d013      	beq.n	800ee62 <_strtod_l+0x242>
 800ee3a:	9904      	ldr	r1, [sp, #16]
 800ee3c:	1905      	adds	r5, r0, r4
 800ee3e:	4411      	add	r1, r2
 800ee40:	9104      	str	r1, [sp, #16]
 800ee42:	4622      	mov	r2, r4
 800ee44:	210a      	movs	r1, #10
 800ee46:	42aa      	cmp	r2, r5
 800ee48:	d113      	bne.n	800ee72 <_strtod_l+0x252>
 800ee4a:	1822      	adds	r2, r4, r0
 800ee4c:	2a08      	cmp	r2, #8
 800ee4e:	f104 0401 	add.w	r4, r4, #1
 800ee52:	4404      	add	r4, r0
 800ee54:	dc1b      	bgt.n	800ee8e <_strtod_l+0x26e>
 800ee56:	220a      	movs	r2, #10
 800ee58:	9906      	ldr	r1, [sp, #24]
 800ee5a:	fb02 3301 	mla	r3, r2, r1, r3
 800ee5e:	9306      	str	r3, [sp, #24]
 800ee60:	2200      	movs	r2, #0
 800ee62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee64:	4610      	mov	r0, r2
 800ee66:	1c59      	adds	r1, r3, #1
 800ee68:	911b      	str	r1, [sp, #108]	; 0x6c
 800ee6a:	785b      	ldrb	r3, [r3, #1]
 800ee6c:	e7ca      	b.n	800ee04 <_strtod_l+0x1e4>
 800ee6e:	4658      	mov	r0, fp
 800ee70:	e7d3      	b.n	800ee1a <_strtod_l+0x1fa>
 800ee72:	2a08      	cmp	r2, #8
 800ee74:	dc04      	bgt.n	800ee80 <_strtod_l+0x260>
 800ee76:	9f06      	ldr	r7, [sp, #24]
 800ee78:	434f      	muls	r7, r1
 800ee7a:	9706      	str	r7, [sp, #24]
 800ee7c:	3201      	adds	r2, #1
 800ee7e:	e7e2      	b.n	800ee46 <_strtod_l+0x226>
 800ee80:	1c57      	adds	r7, r2, #1
 800ee82:	2f10      	cmp	r7, #16
 800ee84:	bfde      	ittt	le
 800ee86:	9f05      	ldrle	r7, [sp, #20]
 800ee88:	434f      	mulle	r7, r1
 800ee8a:	9705      	strle	r7, [sp, #20]
 800ee8c:	e7f6      	b.n	800ee7c <_strtod_l+0x25c>
 800ee8e:	2c10      	cmp	r4, #16
 800ee90:	bfdf      	itttt	le
 800ee92:	220a      	movle	r2, #10
 800ee94:	9905      	ldrle	r1, [sp, #20]
 800ee96:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee9a:	9305      	strle	r3, [sp, #20]
 800ee9c:	e7e0      	b.n	800ee60 <_strtod_l+0x240>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	2201      	movs	r2, #1
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	e77c      	b.n	800eda0 <_strtod_l+0x180>
 800eea6:	2700      	movs	r7, #0
 800eea8:	1cb3      	adds	r3, r6, #2
 800eeaa:	931b      	str	r3, [sp, #108]	; 0x6c
 800eeac:	78b3      	ldrb	r3, [r6, #2]
 800eeae:	e784      	b.n	800edba <_strtod_l+0x19a>
 800eeb0:	2701      	movs	r7, #1
 800eeb2:	e7f9      	b.n	800eea8 <_strtod_l+0x288>
 800eeb4:	08013c90 	.word	0x08013c90
 800eeb8:	0801399c 	.word	0x0801399c
 800eebc:	7ff00000 	.word	0x7ff00000
 800eec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eec2:	1c59      	adds	r1, r3, #1
 800eec4:	911b      	str	r1, [sp, #108]	; 0x6c
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	2b30      	cmp	r3, #48	; 0x30
 800eeca:	d0f9      	beq.n	800eec0 <_strtod_l+0x2a0>
 800eecc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800eed0:	2908      	cmp	r1, #8
 800eed2:	f63f af78 	bhi.w	800edc6 <_strtod_l+0x1a6>
 800eed6:	f04f 0e0a 	mov.w	lr, #10
 800eeda:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800eede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eee0:	9309      	str	r3, [sp, #36]	; 0x24
 800eee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eee4:	1c59      	adds	r1, r3, #1
 800eee6:	911b      	str	r1, [sp, #108]	; 0x6c
 800eee8:	785b      	ldrb	r3, [r3, #1]
 800eeea:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800eeee:	2d09      	cmp	r5, #9
 800eef0:	d935      	bls.n	800ef5e <_strtod_l+0x33e>
 800eef2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800eef4:	1b49      	subs	r1, r1, r5
 800eef6:	2908      	cmp	r1, #8
 800eef8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800eefc:	dc02      	bgt.n	800ef04 <_strtod_l+0x2e4>
 800eefe:	4565      	cmp	r5, ip
 800ef00:	bfa8      	it	ge
 800ef02:	4665      	movge	r5, ip
 800ef04:	b107      	cbz	r7, 800ef08 <_strtod_l+0x2e8>
 800ef06:	426d      	negs	r5, r5
 800ef08:	2c00      	cmp	r4, #0
 800ef0a:	d14c      	bne.n	800efa6 <_strtod_l+0x386>
 800ef0c:	9907      	ldr	r1, [sp, #28]
 800ef0e:	4301      	orrs	r1, r0
 800ef10:	f47f aec7 	bne.w	800eca2 <_strtod_l+0x82>
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	f47f aee0 	bne.w	800ecda <_strtod_l+0xba>
 800ef1a:	2b69      	cmp	r3, #105	; 0x69
 800ef1c:	d026      	beq.n	800ef6c <_strtod_l+0x34c>
 800ef1e:	dc23      	bgt.n	800ef68 <_strtod_l+0x348>
 800ef20:	2b49      	cmp	r3, #73	; 0x49
 800ef22:	d023      	beq.n	800ef6c <_strtod_l+0x34c>
 800ef24:	2b4e      	cmp	r3, #78	; 0x4e
 800ef26:	f47f aed8 	bne.w	800ecda <_strtod_l+0xba>
 800ef2a:	499c      	ldr	r1, [pc, #624]	; (800f19c <_strtod_l+0x57c>)
 800ef2c:	a81b      	add	r0, sp, #108	; 0x6c
 800ef2e:	f002 f93d 	bl	80111ac <__match>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	f43f aed1 	beq.w	800ecda <_strtod_l+0xba>
 800ef38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b28      	cmp	r3, #40	; 0x28
 800ef3e:	d12c      	bne.n	800ef9a <_strtod_l+0x37a>
 800ef40:	4997      	ldr	r1, [pc, #604]	; (800f1a0 <_strtod_l+0x580>)
 800ef42:	aa1e      	add	r2, sp, #120	; 0x78
 800ef44:	a81b      	add	r0, sp, #108	; 0x6c
 800ef46:	f002 f945 	bl	80111d4 <__hexnan>
 800ef4a:	2805      	cmp	r0, #5
 800ef4c:	d125      	bne.n	800ef9a <_strtod_l+0x37a>
 800ef4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef50:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ef54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ef58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ef5c:	e6a1      	b.n	800eca2 <_strtod_l+0x82>
 800ef5e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800ef62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ef66:	e7bc      	b.n	800eee2 <_strtod_l+0x2c2>
 800ef68:	2b6e      	cmp	r3, #110	; 0x6e
 800ef6a:	e7dc      	b.n	800ef26 <_strtod_l+0x306>
 800ef6c:	498d      	ldr	r1, [pc, #564]	; (800f1a4 <_strtod_l+0x584>)
 800ef6e:	a81b      	add	r0, sp, #108	; 0x6c
 800ef70:	f002 f91c 	bl	80111ac <__match>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	f43f aeb0 	beq.w	800ecda <_strtod_l+0xba>
 800ef7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef7c:	498a      	ldr	r1, [pc, #552]	; (800f1a8 <_strtod_l+0x588>)
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	a81b      	add	r0, sp, #108	; 0x6c
 800ef82:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef84:	f002 f912 	bl	80111ac <__match>
 800ef88:	b910      	cbnz	r0, 800ef90 <_strtod_l+0x370>
 800ef8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef90:	f04f 0800 	mov.w	r8, #0
 800ef94:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800f1b8 <_strtod_l+0x598>
 800ef98:	e683      	b.n	800eca2 <_strtod_l+0x82>
 800ef9a:	4884      	ldr	r0, [pc, #528]	; (800f1ac <_strtod_l+0x58c>)
 800ef9c:	f003 f9c8 	bl	8012330 <nan>
 800efa0:	4680      	mov	r8, r0
 800efa2:	4689      	mov	r9, r1
 800efa4:	e67d      	b.n	800eca2 <_strtod_l+0x82>
 800efa6:	9b04      	ldr	r3, [sp, #16]
 800efa8:	f1bb 0f00 	cmp.w	fp, #0
 800efac:	bf08      	it	eq
 800efae:	46a3      	moveq	fp, r4
 800efb0:	1aeb      	subs	r3, r5, r3
 800efb2:	2c10      	cmp	r4, #16
 800efb4:	9806      	ldr	r0, [sp, #24]
 800efb6:	4626      	mov	r6, r4
 800efb8:	9307      	str	r3, [sp, #28]
 800efba:	bfa8      	it	ge
 800efbc:	2610      	movge	r6, #16
 800efbe:	f7f1 fa7d 	bl	80004bc <__aeabi_ui2d>
 800efc2:	2c09      	cmp	r4, #9
 800efc4:	4680      	mov	r8, r0
 800efc6:	4689      	mov	r9, r1
 800efc8:	dd13      	ble.n	800eff2 <_strtod_l+0x3d2>
 800efca:	4b79      	ldr	r3, [pc, #484]	; (800f1b0 <_strtod_l+0x590>)
 800efcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800efd0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efd4:	f7f1 faec 	bl	80005b0 <__aeabi_dmul>
 800efd8:	4680      	mov	r8, r0
 800efda:	9805      	ldr	r0, [sp, #20]
 800efdc:	4689      	mov	r9, r1
 800efde:	f7f1 fa6d 	bl	80004bc <__aeabi_ui2d>
 800efe2:	4602      	mov	r2, r0
 800efe4:	460b      	mov	r3, r1
 800efe6:	4640      	mov	r0, r8
 800efe8:	4649      	mov	r1, r9
 800efea:	f7f1 f92b 	bl	8000244 <__adddf3>
 800efee:	4680      	mov	r8, r0
 800eff0:	4689      	mov	r9, r1
 800eff2:	2c0f      	cmp	r4, #15
 800eff4:	dc36      	bgt.n	800f064 <_strtod_l+0x444>
 800eff6:	9b07      	ldr	r3, [sp, #28]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f43f ae52 	beq.w	800eca2 <_strtod_l+0x82>
 800effe:	dd22      	ble.n	800f046 <_strtod_l+0x426>
 800f000:	2b16      	cmp	r3, #22
 800f002:	dc09      	bgt.n	800f018 <_strtod_l+0x3f8>
 800f004:	4c6a      	ldr	r4, [pc, #424]	; (800f1b0 <_strtod_l+0x590>)
 800f006:	4642      	mov	r2, r8
 800f008:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800f00c:	464b      	mov	r3, r9
 800f00e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f012:	f7f1 facd 	bl	80005b0 <__aeabi_dmul>
 800f016:	e7c3      	b.n	800efa0 <_strtod_l+0x380>
 800f018:	9a07      	ldr	r2, [sp, #28]
 800f01a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f01e:	4293      	cmp	r3, r2
 800f020:	db20      	blt.n	800f064 <_strtod_l+0x444>
 800f022:	4d63      	ldr	r5, [pc, #396]	; (800f1b0 <_strtod_l+0x590>)
 800f024:	f1c4 040f 	rsb	r4, r4, #15
 800f028:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f02c:	4642      	mov	r2, r8
 800f02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f032:	464b      	mov	r3, r9
 800f034:	f7f1 fabc 	bl	80005b0 <__aeabi_dmul>
 800f038:	9b07      	ldr	r3, [sp, #28]
 800f03a:	1b1c      	subs	r4, r3, r4
 800f03c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f040:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f044:	e7e5      	b.n	800f012 <_strtod_l+0x3f2>
 800f046:	9b07      	ldr	r3, [sp, #28]
 800f048:	3316      	adds	r3, #22
 800f04a:	db0b      	blt.n	800f064 <_strtod_l+0x444>
 800f04c:	9b04      	ldr	r3, [sp, #16]
 800f04e:	4a58      	ldr	r2, [pc, #352]	; (800f1b0 <_strtod_l+0x590>)
 800f050:	1b5d      	subs	r5, r3, r5
 800f052:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f056:	4640      	mov	r0, r8
 800f058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f05c:	4649      	mov	r1, r9
 800f05e:	f7f1 fbd1 	bl	8000804 <__aeabi_ddiv>
 800f062:	e79d      	b.n	800efa0 <_strtod_l+0x380>
 800f064:	9b07      	ldr	r3, [sp, #28]
 800f066:	1ba6      	subs	r6, r4, r6
 800f068:	441e      	add	r6, r3
 800f06a:	2e00      	cmp	r6, #0
 800f06c:	dd71      	ble.n	800f152 <_strtod_l+0x532>
 800f06e:	f016 030f 	ands.w	r3, r6, #15
 800f072:	d00a      	beq.n	800f08a <_strtod_l+0x46a>
 800f074:	494e      	ldr	r1, [pc, #312]	; (800f1b0 <_strtod_l+0x590>)
 800f076:	4642      	mov	r2, r8
 800f078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f080:	464b      	mov	r3, r9
 800f082:	f7f1 fa95 	bl	80005b0 <__aeabi_dmul>
 800f086:	4680      	mov	r8, r0
 800f088:	4689      	mov	r9, r1
 800f08a:	f036 060f 	bics.w	r6, r6, #15
 800f08e:	d050      	beq.n	800f132 <_strtod_l+0x512>
 800f090:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f094:	dd27      	ble.n	800f0e6 <_strtod_l+0x4c6>
 800f096:	f04f 0b00 	mov.w	fp, #0
 800f09a:	f8cd b010 	str.w	fp, [sp, #16]
 800f09e:	f8cd b020 	str.w	fp, [sp, #32]
 800f0a2:	f8cd b018 	str.w	fp, [sp, #24]
 800f0a6:	2322      	movs	r3, #34	; 0x22
 800f0a8:	f04f 0800 	mov.w	r8, #0
 800f0ac:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f1b8 <_strtod_l+0x598>
 800f0b0:	f8ca 3000 	str.w	r3, [sl]
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f43f adf3 	beq.w	800eca2 <_strtod_l+0x82>
 800f0bc:	4650      	mov	r0, sl
 800f0be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f0c0:	f002 f9fc 	bl	80114bc <_Bfree>
 800f0c4:	4650      	mov	r0, sl
 800f0c6:	9906      	ldr	r1, [sp, #24]
 800f0c8:	f002 f9f8 	bl	80114bc <_Bfree>
 800f0cc:	4650      	mov	r0, sl
 800f0ce:	9904      	ldr	r1, [sp, #16]
 800f0d0:	f002 f9f4 	bl	80114bc <_Bfree>
 800f0d4:	4650      	mov	r0, sl
 800f0d6:	9908      	ldr	r1, [sp, #32]
 800f0d8:	f002 f9f0 	bl	80114bc <_Bfree>
 800f0dc:	4659      	mov	r1, fp
 800f0de:	4650      	mov	r0, sl
 800f0e0:	f002 f9ec 	bl	80114bc <_Bfree>
 800f0e4:	e5dd      	b.n	800eca2 <_strtod_l+0x82>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	461f      	mov	r7, r3
 800f0ee:	1136      	asrs	r6, r6, #4
 800f0f0:	2e01      	cmp	r6, #1
 800f0f2:	dc21      	bgt.n	800f138 <_strtod_l+0x518>
 800f0f4:	b10b      	cbz	r3, 800f0fa <_strtod_l+0x4da>
 800f0f6:	4680      	mov	r8, r0
 800f0f8:	4689      	mov	r9, r1
 800f0fa:	4b2e      	ldr	r3, [pc, #184]	; (800f1b4 <_strtod_l+0x594>)
 800f0fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f100:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f104:	4642      	mov	r2, r8
 800f106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f10a:	464b      	mov	r3, r9
 800f10c:	f7f1 fa50 	bl	80005b0 <__aeabi_dmul>
 800f110:	4b29      	ldr	r3, [pc, #164]	; (800f1b8 <_strtod_l+0x598>)
 800f112:	460a      	mov	r2, r1
 800f114:	400b      	ands	r3, r1
 800f116:	4929      	ldr	r1, [pc, #164]	; (800f1bc <_strtod_l+0x59c>)
 800f118:	4680      	mov	r8, r0
 800f11a:	428b      	cmp	r3, r1
 800f11c:	d8bb      	bhi.n	800f096 <_strtod_l+0x476>
 800f11e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f122:	428b      	cmp	r3, r1
 800f124:	bf86      	itte	hi
 800f126:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800f12a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800f1c0 <_strtod_l+0x5a0>
 800f12e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f132:	2300      	movs	r3, #0
 800f134:	9305      	str	r3, [sp, #20]
 800f136:	e07e      	b.n	800f236 <_strtod_l+0x616>
 800f138:	07f2      	lsls	r2, r6, #31
 800f13a:	d507      	bpl.n	800f14c <_strtod_l+0x52c>
 800f13c:	4b1d      	ldr	r3, [pc, #116]	; (800f1b4 <_strtod_l+0x594>)
 800f13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f7f1 fa33 	bl	80005b0 <__aeabi_dmul>
 800f14a:	2301      	movs	r3, #1
 800f14c:	3701      	adds	r7, #1
 800f14e:	1076      	asrs	r6, r6, #1
 800f150:	e7ce      	b.n	800f0f0 <_strtod_l+0x4d0>
 800f152:	d0ee      	beq.n	800f132 <_strtod_l+0x512>
 800f154:	4276      	negs	r6, r6
 800f156:	f016 020f 	ands.w	r2, r6, #15
 800f15a:	d00a      	beq.n	800f172 <_strtod_l+0x552>
 800f15c:	4b14      	ldr	r3, [pc, #80]	; (800f1b0 <_strtod_l+0x590>)
 800f15e:	4640      	mov	r0, r8
 800f160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f164:	4649      	mov	r1, r9
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	f7f1 fb4b 	bl	8000804 <__aeabi_ddiv>
 800f16e:	4680      	mov	r8, r0
 800f170:	4689      	mov	r9, r1
 800f172:	1136      	asrs	r6, r6, #4
 800f174:	d0dd      	beq.n	800f132 <_strtod_l+0x512>
 800f176:	2e1f      	cmp	r6, #31
 800f178:	dd24      	ble.n	800f1c4 <_strtod_l+0x5a4>
 800f17a:	f04f 0b00 	mov.w	fp, #0
 800f17e:	f8cd b010 	str.w	fp, [sp, #16]
 800f182:	f8cd b020 	str.w	fp, [sp, #32]
 800f186:	f8cd b018 	str.w	fp, [sp, #24]
 800f18a:	2322      	movs	r3, #34	; 0x22
 800f18c:	f04f 0800 	mov.w	r8, #0
 800f190:	f04f 0900 	mov.w	r9, #0
 800f194:	f8ca 3000 	str.w	r3, [sl]
 800f198:	e78c      	b.n	800f0b4 <_strtod_l+0x494>
 800f19a:	bf00      	nop
 800f19c:	0801396d 	.word	0x0801396d
 800f1a0:	080139b0 	.word	0x080139b0
 800f1a4:	08013965 	.word	0x08013965
 800f1a8:	08013b30 	.word	0x08013b30
 800f1ac:	08013a2b 	.word	0x08013a2b
 800f1b0:	08013d30 	.word	0x08013d30
 800f1b4:	08013d08 	.word	0x08013d08
 800f1b8:	7ff00000 	.word	0x7ff00000
 800f1bc:	7ca00000 	.word	0x7ca00000
 800f1c0:	7fefffff 	.word	0x7fefffff
 800f1c4:	f016 0310 	ands.w	r3, r6, #16
 800f1c8:	bf18      	it	ne
 800f1ca:	236a      	movne	r3, #106	; 0x6a
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	9305      	str	r3, [sp, #20]
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	4fb2      	ldr	r7, [pc, #712]	; (800f4a0 <_strtod_l+0x880>)
 800f1d6:	07f2      	lsls	r2, r6, #31
 800f1d8:	d504      	bpl.n	800f1e4 <_strtod_l+0x5c4>
 800f1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1de:	f7f1 f9e7 	bl	80005b0 <__aeabi_dmul>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	1076      	asrs	r6, r6, #1
 800f1e6:	f107 0708 	add.w	r7, r7, #8
 800f1ea:	d1f4      	bne.n	800f1d6 <_strtod_l+0x5b6>
 800f1ec:	b10b      	cbz	r3, 800f1f2 <_strtod_l+0x5d2>
 800f1ee:	4680      	mov	r8, r0
 800f1f0:	4689      	mov	r9, r1
 800f1f2:	9b05      	ldr	r3, [sp, #20]
 800f1f4:	b1bb      	cbz	r3, 800f226 <_strtod_l+0x606>
 800f1f6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800f1fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	4649      	mov	r1, r9
 800f202:	dd10      	ble.n	800f226 <_strtod_l+0x606>
 800f204:	2b1f      	cmp	r3, #31
 800f206:	f340 812b 	ble.w	800f460 <_strtod_l+0x840>
 800f20a:	2b34      	cmp	r3, #52	; 0x34
 800f20c:	bfd8      	it	le
 800f20e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800f212:	f04f 0800 	mov.w	r8, #0
 800f216:	bfcf      	iteee	gt
 800f218:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f21c:	3b20      	suble	r3, #32
 800f21e:	fa02 f303 	lslle.w	r3, r2, r3
 800f222:	ea03 0901 	andle.w	r9, r3, r1
 800f226:	2200      	movs	r2, #0
 800f228:	2300      	movs	r3, #0
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 fc27 	bl	8000a80 <__aeabi_dcmpeq>
 800f232:	2800      	cmp	r0, #0
 800f234:	d1a1      	bne.n	800f17a <_strtod_l+0x55a>
 800f236:	9b06      	ldr	r3, [sp, #24]
 800f238:	465a      	mov	r2, fp
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	4650      	mov	r0, sl
 800f23e:	4623      	mov	r3, r4
 800f240:	9908      	ldr	r1, [sp, #32]
 800f242:	f002 f9a7 	bl	8011594 <__s2b>
 800f246:	9008      	str	r0, [sp, #32]
 800f248:	2800      	cmp	r0, #0
 800f24a:	f43f af24 	beq.w	800f096 <_strtod_l+0x476>
 800f24e:	9b04      	ldr	r3, [sp, #16]
 800f250:	f04f 0b00 	mov.w	fp, #0
 800f254:	1b5d      	subs	r5, r3, r5
 800f256:	9b07      	ldr	r3, [sp, #28]
 800f258:	f8cd b010 	str.w	fp, [sp, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfb4      	ite	lt
 800f260:	462b      	movlt	r3, r5
 800f262:	2300      	movge	r3, #0
 800f264:	930e      	str	r3, [sp, #56]	; 0x38
 800f266:	9b07      	ldr	r3, [sp, #28]
 800f268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f26c:	9316      	str	r3, [sp, #88]	; 0x58
 800f26e:	9b08      	ldr	r3, [sp, #32]
 800f270:	4650      	mov	r0, sl
 800f272:	6859      	ldr	r1, [r3, #4]
 800f274:	f002 f8e2 	bl	801143c <_Balloc>
 800f278:	9006      	str	r0, [sp, #24]
 800f27a:	2800      	cmp	r0, #0
 800f27c:	f43f af13 	beq.w	800f0a6 <_strtod_l+0x486>
 800f280:	9b08      	ldr	r3, [sp, #32]
 800f282:	300c      	adds	r0, #12
 800f284:	691a      	ldr	r2, [r3, #16]
 800f286:	f103 010c 	add.w	r1, r3, #12
 800f28a:	3202      	adds	r2, #2
 800f28c:	0092      	lsls	r2, r2, #2
 800f28e:	f7fe fd1d 	bl	800dccc <memcpy>
 800f292:	ab1e      	add	r3, sp, #120	; 0x78
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	ab1d      	add	r3, sp, #116	; 0x74
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	4642      	mov	r2, r8
 800f29c:	464b      	mov	r3, r9
 800f29e:	4650      	mov	r0, sl
 800f2a0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800f2a4:	f002 fcb4 	bl	8011c10 <__d2b>
 800f2a8:	901c      	str	r0, [sp, #112]	; 0x70
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f aefb 	beq.w	800f0a6 <_strtod_l+0x486>
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	4650      	mov	r0, sl
 800f2b4:	f002 fa06 	bl	80116c4 <__i2b>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	9004      	str	r0, [sp, #16]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f43f aef2 	beq.w	800f0a6 <_strtod_l+0x486>
 800f2c2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800f2c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2c6:	2d00      	cmp	r5, #0
 800f2c8:	bfab      	itete	ge
 800f2ca:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f2cc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f2ce:	18ee      	addge	r6, r5, r3
 800f2d0:	1b5c      	sublt	r4, r3, r5
 800f2d2:	9b05      	ldr	r3, [sp, #20]
 800f2d4:	bfa8      	it	ge
 800f2d6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800f2d8:	eba5 0503 	sub.w	r5, r5, r3
 800f2dc:	4415      	add	r5, r2
 800f2de:	4b71      	ldr	r3, [pc, #452]	; (800f4a4 <_strtod_l+0x884>)
 800f2e0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800f2e4:	bfb8      	it	lt
 800f2e6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800f2e8:	429d      	cmp	r5, r3
 800f2ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2ee:	f280 80c9 	bge.w	800f484 <_strtod_l+0x864>
 800f2f2:	1b5b      	subs	r3, r3, r5
 800f2f4:	2b1f      	cmp	r3, #31
 800f2f6:	f04f 0701 	mov.w	r7, #1
 800f2fa:	eba2 0203 	sub.w	r2, r2, r3
 800f2fe:	f300 80b6 	bgt.w	800f46e <_strtod_l+0x84e>
 800f302:	2500      	movs	r5, #0
 800f304:	fa07 f303 	lsl.w	r3, r7, r3
 800f308:	930f      	str	r3, [sp, #60]	; 0x3c
 800f30a:	18b7      	adds	r7, r6, r2
 800f30c:	9b05      	ldr	r3, [sp, #20]
 800f30e:	42be      	cmp	r6, r7
 800f310:	4414      	add	r4, r2
 800f312:	441c      	add	r4, r3
 800f314:	4633      	mov	r3, r6
 800f316:	bfa8      	it	ge
 800f318:	463b      	movge	r3, r7
 800f31a:	42a3      	cmp	r3, r4
 800f31c:	bfa8      	it	ge
 800f31e:	4623      	movge	r3, r4
 800f320:	2b00      	cmp	r3, #0
 800f322:	bfc2      	ittt	gt
 800f324:	1aff      	subgt	r7, r7, r3
 800f326:	1ae4      	subgt	r4, r4, r3
 800f328:	1af6      	subgt	r6, r6, r3
 800f32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dd17      	ble.n	800f360 <_strtod_l+0x740>
 800f330:	461a      	mov	r2, r3
 800f332:	4650      	mov	r0, sl
 800f334:	9904      	ldr	r1, [sp, #16]
 800f336:	f002 fa7f 	bl	8011838 <__pow5mult>
 800f33a:	9004      	str	r0, [sp, #16]
 800f33c:	2800      	cmp	r0, #0
 800f33e:	f43f aeb2 	beq.w	800f0a6 <_strtod_l+0x486>
 800f342:	4601      	mov	r1, r0
 800f344:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f346:	4650      	mov	r0, sl
 800f348:	f002 f9d2 	bl	80116f0 <__multiply>
 800f34c:	9009      	str	r0, [sp, #36]	; 0x24
 800f34e:	2800      	cmp	r0, #0
 800f350:	f43f aea9 	beq.w	800f0a6 <_strtod_l+0x486>
 800f354:	4650      	mov	r0, sl
 800f356:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f358:	f002 f8b0 	bl	80114bc <_Bfree>
 800f35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35e:	931c      	str	r3, [sp, #112]	; 0x70
 800f360:	2f00      	cmp	r7, #0
 800f362:	f300 8093 	bgt.w	800f48c <_strtod_l+0x86c>
 800f366:	9b07      	ldr	r3, [sp, #28]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	dd08      	ble.n	800f37e <_strtod_l+0x75e>
 800f36c:	4650      	mov	r0, sl
 800f36e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f370:	9906      	ldr	r1, [sp, #24]
 800f372:	f002 fa61 	bl	8011838 <__pow5mult>
 800f376:	9006      	str	r0, [sp, #24]
 800f378:	2800      	cmp	r0, #0
 800f37a:	f43f ae94 	beq.w	800f0a6 <_strtod_l+0x486>
 800f37e:	2c00      	cmp	r4, #0
 800f380:	dd08      	ble.n	800f394 <_strtod_l+0x774>
 800f382:	4622      	mov	r2, r4
 800f384:	4650      	mov	r0, sl
 800f386:	9906      	ldr	r1, [sp, #24]
 800f388:	f002 fab0 	bl	80118ec <__lshift>
 800f38c:	9006      	str	r0, [sp, #24]
 800f38e:	2800      	cmp	r0, #0
 800f390:	f43f ae89 	beq.w	800f0a6 <_strtod_l+0x486>
 800f394:	2e00      	cmp	r6, #0
 800f396:	dd08      	ble.n	800f3aa <_strtod_l+0x78a>
 800f398:	4632      	mov	r2, r6
 800f39a:	4650      	mov	r0, sl
 800f39c:	9904      	ldr	r1, [sp, #16]
 800f39e:	f002 faa5 	bl	80118ec <__lshift>
 800f3a2:	9004      	str	r0, [sp, #16]
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	f43f ae7e 	beq.w	800f0a6 <_strtod_l+0x486>
 800f3aa:	4650      	mov	r0, sl
 800f3ac:	9a06      	ldr	r2, [sp, #24]
 800f3ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3b0:	f002 fb24 	bl	80119fc <__mdiff>
 800f3b4:	4683      	mov	fp, r0
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f43f ae75 	beq.w	800f0a6 <_strtod_l+0x486>
 800f3bc:	2400      	movs	r4, #0
 800f3be:	68c3      	ldr	r3, [r0, #12]
 800f3c0:	9904      	ldr	r1, [sp, #16]
 800f3c2:	60c4      	str	r4, [r0, #12]
 800f3c4:	930d      	str	r3, [sp, #52]	; 0x34
 800f3c6:	f002 fafd 	bl	80119c4 <__mcmp>
 800f3ca:	42a0      	cmp	r0, r4
 800f3cc:	da70      	bge.n	800f4b0 <_strtod_l+0x890>
 800f3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3d0:	ea53 0308 	orrs.w	r3, r3, r8
 800f3d4:	f040 8096 	bne.w	800f504 <_strtod_l+0x8e4>
 800f3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f040 8091 	bne.w	800f504 <_strtod_l+0x8e4>
 800f3e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3e6:	0d1b      	lsrs	r3, r3, #20
 800f3e8:	051b      	lsls	r3, r3, #20
 800f3ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3ee:	f240 8089 	bls.w	800f504 <_strtod_l+0x8e4>
 800f3f2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800f3f6:	b923      	cbnz	r3, 800f402 <_strtod_l+0x7e2>
 800f3f8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	f340 8081 	ble.w	800f504 <_strtod_l+0x8e4>
 800f402:	4659      	mov	r1, fp
 800f404:	2201      	movs	r2, #1
 800f406:	4650      	mov	r0, sl
 800f408:	f002 fa70 	bl	80118ec <__lshift>
 800f40c:	9904      	ldr	r1, [sp, #16]
 800f40e:	4683      	mov	fp, r0
 800f410:	f002 fad8 	bl	80119c4 <__mcmp>
 800f414:	2800      	cmp	r0, #0
 800f416:	dd75      	ble.n	800f504 <_strtod_l+0x8e4>
 800f418:	9905      	ldr	r1, [sp, #20]
 800f41a:	464b      	mov	r3, r9
 800f41c:	4a22      	ldr	r2, [pc, #136]	; (800f4a8 <_strtod_l+0x888>)
 800f41e:	2900      	cmp	r1, #0
 800f420:	f000 8091 	beq.w	800f546 <_strtod_l+0x926>
 800f424:	ea02 0109 	and.w	r1, r2, r9
 800f428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f42c:	f300 808b 	bgt.w	800f546 <_strtod_l+0x926>
 800f430:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f434:	f77f aea9 	ble.w	800f18a <_strtod_l+0x56a>
 800f438:	2300      	movs	r3, #0
 800f43a:	4a1c      	ldr	r2, [pc, #112]	; (800f4ac <_strtod_l+0x88c>)
 800f43c:	4640      	mov	r0, r8
 800f43e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f442:	4649      	mov	r1, r9
 800f444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f448:	f7f1 f8b2 	bl	80005b0 <__aeabi_dmul>
 800f44c:	460b      	mov	r3, r1
 800f44e:	4303      	orrs	r3, r0
 800f450:	bf08      	it	eq
 800f452:	2322      	moveq	r3, #34	; 0x22
 800f454:	4680      	mov	r8, r0
 800f456:	4689      	mov	r9, r1
 800f458:	bf08      	it	eq
 800f45a:	f8ca 3000 	streq.w	r3, [sl]
 800f45e:	e62d      	b.n	800f0bc <_strtod_l+0x49c>
 800f460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f464:	fa02 f303 	lsl.w	r3, r2, r3
 800f468:	ea03 0808 	and.w	r8, r3, r8
 800f46c:	e6db      	b.n	800f226 <_strtod_l+0x606>
 800f46e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800f472:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800f476:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800f47a:	35e2      	adds	r5, #226	; 0xe2
 800f47c:	fa07 f505 	lsl.w	r5, r7, r5
 800f480:	970f      	str	r7, [sp, #60]	; 0x3c
 800f482:	e742      	b.n	800f30a <_strtod_l+0x6ea>
 800f484:	2301      	movs	r3, #1
 800f486:	2500      	movs	r5, #0
 800f488:	930f      	str	r3, [sp, #60]	; 0x3c
 800f48a:	e73e      	b.n	800f30a <_strtod_l+0x6ea>
 800f48c:	463a      	mov	r2, r7
 800f48e:	4650      	mov	r0, sl
 800f490:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f492:	f002 fa2b 	bl	80118ec <__lshift>
 800f496:	901c      	str	r0, [sp, #112]	; 0x70
 800f498:	2800      	cmp	r0, #0
 800f49a:	f47f af64 	bne.w	800f366 <_strtod_l+0x746>
 800f49e:	e602      	b.n	800f0a6 <_strtod_l+0x486>
 800f4a0:	080139c8 	.word	0x080139c8
 800f4a4:	fffffc02 	.word	0xfffffc02
 800f4a8:	7ff00000 	.word	0x7ff00000
 800f4ac:	39500000 	.word	0x39500000
 800f4b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f4b4:	d166      	bne.n	800f584 <_strtod_l+0x964>
 800f4b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4bc:	b35a      	cbz	r2, 800f516 <_strtod_l+0x8f6>
 800f4be:	4a9c      	ldr	r2, [pc, #624]	; (800f730 <_strtod_l+0xb10>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d12c      	bne.n	800f51e <_strtod_l+0x8fe>
 800f4c4:	9b05      	ldr	r3, [sp, #20]
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	b303      	cbz	r3, 800f50c <_strtod_l+0x8ec>
 800f4ca:	464b      	mov	r3, r9
 800f4cc:	4a99      	ldr	r2, [pc, #612]	; (800f734 <_strtod_l+0xb14>)
 800f4ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f4d2:	401a      	ands	r2, r3
 800f4d4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f4d8:	d81b      	bhi.n	800f512 <_strtod_l+0x8f2>
 800f4da:	0d12      	lsrs	r2, r2, #20
 800f4dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f4e4:	4298      	cmp	r0, r3
 800f4e6:	d11a      	bne.n	800f51e <_strtod_l+0x8fe>
 800f4e8:	4b93      	ldr	r3, [pc, #588]	; (800f738 <_strtod_l+0xb18>)
 800f4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d102      	bne.n	800f4f6 <_strtod_l+0x8d6>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	f43f add8 	beq.w	800f0a6 <_strtod_l+0x486>
 800f4f6:	f04f 0800 	mov.w	r8, #0
 800f4fa:	4b8e      	ldr	r3, [pc, #568]	; (800f734 <_strtod_l+0xb14>)
 800f4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4fe:	401a      	ands	r2, r3
 800f500:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800f504:	9b05      	ldr	r3, [sp, #20]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d196      	bne.n	800f438 <_strtod_l+0x818>
 800f50a:	e5d7      	b.n	800f0bc <_strtod_l+0x49c>
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f510:	e7e8      	b.n	800f4e4 <_strtod_l+0x8c4>
 800f512:	460b      	mov	r3, r1
 800f514:	e7e6      	b.n	800f4e4 <_strtod_l+0x8c4>
 800f516:	ea53 0308 	orrs.w	r3, r3, r8
 800f51a:	f43f af7d 	beq.w	800f418 <_strtod_l+0x7f8>
 800f51e:	b1e5      	cbz	r5, 800f55a <_strtod_l+0x93a>
 800f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f522:	421d      	tst	r5, r3
 800f524:	d0ee      	beq.n	800f504 <_strtod_l+0x8e4>
 800f526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f528:	4640      	mov	r0, r8
 800f52a:	4649      	mov	r1, r9
 800f52c:	9a05      	ldr	r2, [sp, #20]
 800f52e:	b1c3      	cbz	r3, 800f562 <_strtod_l+0x942>
 800f530:	f7ff fb52 	bl	800ebd8 <sulp>
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f53c:	f7f0 fe82 	bl	8000244 <__adddf3>
 800f540:	4680      	mov	r8, r0
 800f542:	4689      	mov	r9, r1
 800f544:	e7de      	b.n	800f504 <_strtod_l+0x8e4>
 800f546:	4013      	ands	r3, r2
 800f548:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f54c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f550:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f554:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f558:	e7d4      	b.n	800f504 <_strtod_l+0x8e4>
 800f55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f55c:	ea13 0f08 	tst.w	r3, r8
 800f560:	e7e0      	b.n	800f524 <_strtod_l+0x904>
 800f562:	f7ff fb39 	bl	800ebd8 <sulp>
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f56e:	f7f0 fe67 	bl	8000240 <__aeabi_dsub>
 800f572:	2200      	movs	r2, #0
 800f574:	2300      	movs	r3, #0
 800f576:	4680      	mov	r8, r0
 800f578:	4689      	mov	r9, r1
 800f57a:	f7f1 fa81 	bl	8000a80 <__aeabi_dcmpeq>
 800f57e:	2800      	cmp	r0, #0
 800f580:	d0c0      	beq.n	800f504 <_strtod_l+0x8e4>
 800f582:	e602      	b.n	800f18a <_strtod_l+0x56a>
 800f584:	4658      	mov	r0, fp
 800f586:	9904      	ldr	r1, [sp, #16]
 800f588:	f002 fb9e 	bl	8011cc8 <__ratio>
 800f58c:	2200      	movs	r2, #0
 800f58e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	f7f1 fa87 	bl	8000aa8 <__aeabi_dcmple>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d075      	beq.n	800f68a <_strtod_l+0xa6a>
 800f59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d047      	beq.n	800f634 <_strtod_l+0xa14>
 800f5a4:	2600      	movs	r6, #0
 800f5a6:	4f65      	ldr	r7, [pc, #404]	; (800f73c <_strtod_l+0xb1c>)
 800f5a8:	4d64      	ldr	r5, [pc, #400]	; (800f73c <_strtod_l+0xb1c>)
 800f5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5b0:	0d1b      	lsrs	r3, r3, #20
 800f5b2:	051b      	lsls	r3, r3, #20
 800f5b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5b8:	4b61      	ldr	r3, [pc, #388]	; (800f740 <_strtod_l+0xb20>)
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	f040 80c8 	bne.w	800f750 <_strtod_l+0xb30>
 800f5c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f5c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ca:	4640      	mov	r0, r8
 800f5cc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800f5d0:	4649      	mov	r1, r9
 800f5d2:	f002 faa3 	bl	8011b1c <__ulp>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4630      	mov	r0, r6
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f0 ffe7 	bl	80005b0 <__aeabi_dmul>
 800f5e2:	4642      	mov	r2, r8
 800f5e4:	464b      	mov	r3, r9
 800f5e6:	f7f0 fe2d 	bl	8000244 <__adddf3>
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4951      	ldr	r1, [pc, #324]	; (800f734 <_strtod_l+0xb14>)
 800f5ee:	4a55      	ldr	r2, [pc, #340]	; (800f744 <_strtod_l+0xb24>)
 800f5f0:	4019      	ands	r1, r3
 800f5f2:	4291      	cmp	r1, r2
 800f5f4:	4680      	mov	r8, r0
 800f5f6:	d95e      	bls.n	800f6b6 <_strtod_l+0xa96>
 800f5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d103      	bne.n	800f60a <_strtod_l+0x9ea>
 800f602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f604:	3301      	adds	r3, #1
 800f606:	f43f ad4e 	beq.w	800f0a6 <_strtod_l+0x486>
 800f60a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f60e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800f738 <_strtod_l+0xb18>
 800f612:	4650      	mov	r0, sl
 800f614:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f616:	f001 ff51 	bl	80114bc <_Bfree>
 800f61a:	4650      	mov	r0, sl
 800f61c:	9906      	ldr	r1, [sp, #24]
 800f61e:	f001 ff4d 	bl	80114bc <_Bfree>
 800f622:	4650      	mov	r0, sl
 800f624:	9904      	ldr	r1, [sp, #16]
 800f626:	f001 ff49 	bl	80114bc <_Bfree>
 800f62a:	4659      	mov	r1, fp
 800f62c:	4650      	mov	r0, sl
 800f62e:	f001 ff45 	bl	80114bc <_Bfree>
 800f632:	e61c      	b.n	800f26e <_strtod_l+0x64e>
 800f634:	f1b8 0f00 	cmp.w	r8, #0
 800f638:	d119      	bne.n	800f66e <_strtod_l+0xa4e>
 800f63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f640:	b9e3      	cbnz	r3, 800f67c <_strtod_l+0xa5c>
 800f642:	2200      	movs	r2, #0
 800f644:	4630      	mov	r0, r6
 800f646:	4639      	mov	r1, r7
 800f648:	4b3c      	ldr	r3, [pc, #240]	; (800f73c <_strtod_l+0xb1c>)
 800f64a:	f7f1 fa23 	bl	8000a94 <__aeabi_dcmplt>
 800f64e:	b9c8      	cbnz	r0, 800f684 <_strtod_l+0xa64>
 800f650:	2200      	movs	r2, #0
 800f652:	4630      	mov	r0, r6
 800f654:	4639      	mov	r1, r7
 800f656:	4b3c      	ldr	r3, [pc, #240]	; (800f748 <_strtod_l+0xb28>)
 800f658:	f7f0 ffaa 	bl	80005b0 <__aeabi_dmul>
 800f65c:	4604      	mov	r4, r0
 800f65e:	460d      	mov	r5, r1
 800f660:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f664:	9418      	str	r4, [sp, #96]	; 0x60
 800f666:	9319      	str	r3, [sp, #100]	; 0x64
 800f668:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800f66c:	e79d      	b.n	800f5aa <_strtod_l+0x98a>
 800f66e:	f1b8 0f01 	cmp.w	r8, #1
 800f672:	d103      	bne.n	800f67c <_strtod_l+0xa5c>
 800f674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f676:	2b00      	cmp	r3, #0
 800f678:	f43f ad87 	beq.w	800f18a <_strtod_l+0x56a>
 800f67c:	2600      	movs	r6, #0
 800f67e:	2400      	movs	r4, #0
 800f680:	4f32      	ldr	r7, [pc, #200]	; (800f74c <_strtod_l+0xb2c>)
 800f682:	e791      	b.n	800f5a8 <_strtod_l+0x988>
 800f684:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f686:	4d30      	ldr	r5, [pc, #192]	; (800f748 <_strtod_l+0xb28>)
 800f688:	e7ea      	b.n	800f660 <_strtod_l+0xa40>
 800f68a:	4b2f      	ldr	r3, [pc, #188]	; (800f748 <_strtod_l+0xb28>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	4630      	mov	r0, r6
 800f690:	4639      	mov	r1, r7
 800f692:	f7f0 ff8d 	bl	80005b0 <__aeabi_dmul>
 800f696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	b933      	cbnz	r3, 800f6ac <_strtod_l+0xa8c>
 800f69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6a2:	9010      	str	r0, [sp, #64]	; 0x40
 800f6a4:	9311      	str	r3, [sp, #68]	; 0x44
 800f6a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f6aa:	e77e      	b.n	800f5aa <_strtod_l+0x98a>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f6b4:	e7f7      	b.n	800f6a6 <_strtod_l+0xa86>
 800f6b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f6ba:	9b05      	ldr	r3, [sp, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1a8      	bne.n	800f612 <_strtod_l+0x9f2>
 800f6c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6c6:	0d1b      	lsrs	r3, r3, #20
 800f6c8:	051b      	lsls	r3, r3, #20
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d1a1      	bne.n	800f612 <_strtod_l+0x9f2>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	f7f1 fb41 	bl	8000d58 <__aeabi_d2lz>
 800f6d6:	f7f0 ff3d 	bl	8000554 <__aeabi_l2d>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	4620      	mov	r0, r4
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	f7f0 fdad 	bl	8000240 <__aeabi_dsub>
 800f6e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6ec:	ea43 0308 	orr.w	r3, r3, r8
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	d066      	beq.n	800f7c6 <_strtod_l+0xba6>
 800f6f8:	a309      	add	r3, pc, #36	; (adr r3, 800f720 <_strtod_l+0xb00>)
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	f7f1 f9c9 	bl	8000a94 <__aeabi_dcmplt>
 800f702:	2800      	cmp	r0, #0
 800f704:	f47f acda 	bne.w	800f0bc <_strtod_l+0x49c>
 800f708:	a307      	add	r3, pc, #28	; (adr r3, 800f728 <_strtod_l+0xb08>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	4620      	mov	r0, r4
 800f710:	4629      	mov	r1, r5
 800f712:	f7f1 f9dd 	bl	8000ad0 <__aeabi_dcmpgt>
 800f716:	2800      	cmp	r0, #0
 800f718:	f43f af7b 	beq.w	800f612 <_strtod_l+0x9f2>
 800f71c:	e4ce      	b.n	800f0bc <_strtod_l+0x49c>
 800f71e:	bf00      	nop
 800f720:	94a03595 	.word	0x94a03595
 800f724:	3fdfffff 	.word	0x3fdfffff
 800f728:	35afe535 	.word	0x35afe535
 800f72c:	3fe00000 	.word	0x3fe00000
 800f730:	000fffff 	.word	0x000fffff
 800f734:	7ff00000 	.word	0x7ff00000
 800f738:	7fefffff 	.word	0x7fefffff
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	7fe00000 	.word	0x7fe00000
 800f744:	7c9fffff 	.word	0x7c9fffff
 800f748:	3fe00000 	.word	0x3fe00000
 800f74c:	bff00000 	.word	0xbff00000
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	b313      	cbz	r3, 800f79a <_strtod_l+0xb7a>
 800f754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f75a:	d81e      	bhi.n	800f79a <_strtod_l+0xb7a>
 800f75c:	a326      	add	r3, pc, #152	; (adr r3, 800f7f8 <_strtod_l+0xbd8>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	4620      	mov	r0, r4
 800f764:	4629      	mov	r1, r5
 800f766:	f7f1 f99f 	bl	8000aa8 <__aeabi_dcmple>
 800f76a:	b190      	cbz	r0, 800f792 <_strtod_l+0xb72>
 800f76c:	4629      	mov	r1, r5
 800f76e:	4620      	mov	r0, r4
 800f770:	f7f1 f9f6 	bl	8000b60 <__aeabi_d2uiz>
 800f774:	2801      	cmp	r0, #1
 800f776:	bf38      	it	cc
 800f778:	2001      	movcc	r0, #1
 800f77a:	f7f0 fe9f 	bl	80004bc <__aeabi_ui2d>
 800f77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f780:	4604      	mov	r4, r0
 800f782:	460d      	mov	r5, r1
 800f784:	b9d3      	cbnz	r3, 800f7bc <_strtod_l+0xb9c>
 800f786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f78a:	9012      	str	r0, [sp, #72]	; 0x48
 800f78c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f78e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800f792:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f794:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800f798:	1a9f      	subs	r7, r3, r2
 800f79a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f79e:	f002 f9bd 	bl	8011b1c <__ulp>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	f7f0 ff01 	bl	80005b0 <__aeabi_dmul>
 800f7ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f7b2:	f7f0 fd47 	bl	8000244 <__adddf3>
 800f7b6:	4680      	mov	r8, r0
 800f7b8:	4689      	mov	r9, r1
 800f7ba:	e77e      	b.n	800f6ba <_strtod_l+0xa9a>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800f7c4:	e7e3      	b.n	800f78e <_strtod_l+0xb6e>
 800f7c6:	a30e      	add	r3, pc, #56	; (adr r3, 800f800 <_strtod_l+0xbe0>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	f7f1 f962 	bl	8000a94 <__aeabi_dcmplt>
 800f7d0:	e7a1      	b.n	800f716 <_strtod_l+0xaf6>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	930c      	str	r3, [sp, #48]	; 0x30
 800f7d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f7da:	6013      	str	r3, [r2, #0]
 800f7dc:	f7ff ba65 	b.w	800ecaa <_strtod_l+0x8a>
 800f7e0:	2b65      	cmp	r3, #101	; 0x65
 800f7e2:	f43f ab5c 	beq.w	800ee9e <_strtod_l+0x27e>
 800f7e6:	2b45      	cmp	r3, #69	; 0x45
 800f7e8:	f43f ab59 	beq.w	800ee9e <_strtod_l+0x27e>
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	f7ff bb8d 	b.w	800ef0c <_strtod_l+0x2ec>
 800f7f2:	bf00      	nop
 800f7f4:	f3af 8000 	nop.w
 800f7f8:	ffc00000 	.word	0xffc00000
 800f7fc:	41dfffff 	.word	0x41dfffff
 800f800:	94a03595 	.word	0x94a03595
 800f804:	3fcfffff 	.word	0x3fcfffff

0800f808 <_strtod_r>:
 800f808:	4b01      	ldr	r3, [pc, #4]	; (800f810 <_strtod_r+0x8>)
 800f80a:	f7ff ba09 	b.w	800ec20 <_strtod_l>
 800f80e:	bf00      	nop
 800f810:	2000013c 	.word	0x2000013c

0800f814 <strtod>:
 800f814:	460a      	mov	r2, r1
 800f816:	4601      	mov	r1, r0
 800f818:	4802      	ldr	r0, [pc, #8]	; (800f824 <strtod+0x10>)
 800f81a:	4b03      	ldr	r3, [pc, #12]	; (800f828 <strtod+0x14>)
 800f81c:	6800      	ldr	r0, [r0, #0]
 800f81e:	f7ff b9ff 	b.w	800ec20 <_strtod_l>
 800f822:	bf00      	nop
 800f824:	200000d4 	.word	0x200000d4
 800f828:	2000013c 	.word	0x2000013c

0800f82c <strtof>:
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	4f22      	ldr	r7, [pc, #136]	; (800f8bc <strtof+0x90>)
 800f832:	460a      	mov	r2, r1
 800f834:	4b22      	ldr	r3, [pc, #136]	; (800f8c0 <strtof+0x94>)
 800f836:	4601      	mov	r1, r0
 800f838:	6838      	ldr	r0, [r7, #0]
 800f83a:	f7ff f9f1 	bl	800ec20 <_strtod_l>
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	4606      	mov	r6, r0
 800f844:	460c      	mov	r4, r1
 800f846:	f7f1 f94d 	bl	8000ae4 <__aeabi_dcmpun>
 800f84a:	b168      	cbz	r0, 800f868 <strtof+0x3c>
 800f84c:	2c00      	cmp	r4, #0
 800f84e:	481d      	ldr	r0, [pc, #116]	; (800f8c4 <strtof+0x98>)
 800f850:	da06      	bge.n	800f860 <strtof+0x34>
 800f852:	f7ff f979 	bl	800eb48 <nanf>
 800f856:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800f85a:	4628      	mov	r0, r5
 800f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f864:	f7ff b970 	b.w	800eb48 <nanf>
 800f868:	4621      	mov	r1, r4
 800f86a:	4630      	mov	r0, r6
 800f86c:	f7f1 f998 	bl	8000ba0 <__aeabi_d2f>
 800f870:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f874:	4605      	mov	r5, r0
 800f876:	4914      	ldr	r1, [pc, #80]	; (800f8c8 <strtof+0x9c>)
 800f878:	4640      	mov	r0, r8
 800f87a:	f7f1 fa57 	bl	8000d2c <__aeabi_fcmpun>
 800f87e:	2800      	cmp	r0, #0
 800f880:	d1eb      	bne.n	800f85a <strtof+0x2e>
 800f882:	4640      	mov	r0, r8
 800f884:	4910      	ldr	r1, [pc, #64]	; (800f8c8 <strtof+0x9c>)
 800f886:	f7f1 fa33 	bl	8000cf0 <__aeabi_fcmple>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d1e5      	bne.n	800f85a <strtof+0x2e>
 800f88e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f896:	4630      	mov	r0, r6
 800f898:	4621      	mov	r1, r4
 800f89a:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <strtof+0xa0>)
 800f89c:	f7f1 f922 	bl	8000ae4 <__aeabi_dcmpun>
 800f8a0:	b940      	cbnz	r0, 800f8b4 <strtof+0x88>
 800f8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4b08      	ldr	r3, [pc, #32]	; (800f8cc <strtof+0xa0>)
 800f8ac:	f7f1 f8fc 	bl	8000aa8 <__aeabi_dcmple>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d0d2      	beq.n	800f85a <strtof+0x2e>
 800f8b4:	2222      	movs	r2, #34	; 0x22
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e7ce      	b.n	800f85a <strtof+0x2e>
 800f8bc:	200000d4 	.word	0x200000d4
 800f8c0:	2000013c 	.word	0x2000013c
 800f8c4:	08013a2b 	.word	0x08013a2b
 800f8c8:	7f7fffff 	.word	0x7f7fffff
 800f8cc:	7fefffff 	.word	0x7fefffff

0800f8d0 <_strtol_l.isra.0>:
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d6:	4686      	mov	lr, r0
 800f8d8:	d001      	beq.n	800f8de <_strtol_l.isra.0+0xe>
 800f8da:	2b24      	cmp	r3, #36	; 0x24
 800f8dc:	d906      	bls.n	800f8ec <_strtol_l.isra.0+0x1c>
 800f8de:	f7fe f9c3 	bl	800dc68 <__errno>
 800f8e2:	2316      	movs	r3, #22
 800f8e4:	6003      	str	r3, [r0, #0]
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ec:	468c      	mov	ip, r1
 800f8ee:	4e3a      	ldr	r6, [pc, #232]	; (800f9d8 <_strtol_l.isra.0+0x108>)
 800f8f0:	4660      	mov	r0, ip
 800f8f2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f8f6:	5da5      	ldrb	r5, [r4, r6]
 800f8f8:	f015 0508 	ands.w	r5, r5, #8
 800f8fc:	d1f8      	bne.n	800f8f0 <_strtol_l.isra.0+0x20>
 800f8fe:	2c2d      	cmp	r4, #45	; 0x2d
 800f900:	d133      	bne.n	800f96a <_strtol_l.isra.0+0x9a>
 800f902:	f04f 0801 	mov.w	r8, #1
 800f906:	f89c 4000 	ldrb.w	r4, [ip]
 800f90a:	f100 0c02 	add.w	ip, r0, #2
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d05d      	beq.n	800f9ce <_strtol_l.isra.0+0xfe>
 800f912:	2b10      	cmp	r3, #16
 800f914:	d10c      	bne.n	800f930 <_strtol_l.isra.0+0x60>
 800f916:	2c30      	cmp	r4, #48	; 0x30
 800f918:	d10a      	bne.n	800f930 <_strtol_l.isra.0+0x60>
 800f91a:	f89c 0000 	ldrb.w	r0, [ip]
 800f91e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f922:	2858      	cmp	r0, #88	; 0x58
 800f924:	d14e      	bne.n	800f9c4 <_strtol_l.isra.0+0xf4>
 800f926:	2310      	movs	r3, #16
 800f928:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800f92c:	f10c 0c02 	add.w	ip, ip, #2
 800f930:	2500      	movs	r5, #0
 800f932:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800f936:	3f01      	subs	r7, #1
 800f938:	fbb7 f9f3 	udiv	r9, r7, r3
 800f93c:	4628      	mov	r0, r5
 800f93e:	fb03 7a19 	mls	sl, r3, r9, r7
 800f942:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800f946:	2e09      	cmp	r6, #9
 800f948:	d818      	bhi.n	800f97c <_strtol_l.isra.0+0xac>
 800f94a:	4634      	mov	r4, r6
 800f94c:	42a3      	cmp	r3, r4
 800f94e:	dd24      	ble.n	800f99a <_strtol_l.isra.0+0xca>
 800f950:	2d00      	cmp	r5, #0
 800f952:	db1f      	blt.n	800f994 <_strtol_l.isra.0+0xc4>
 800f954:	4581      	cmp	r9, r0
 800f956:	d31d      	bcc.n	800f994 <_strtol_l.isra.0+0xc4>
 800f958:	d101      	bne.n	800f95e <_strtol_l.isra.0+0x8e>
 800f95a:	45a2      	cmp	sl, r4
 800f95c:	db1a      	blt.n	800f994 <_strtol_l.isra.0+0xc4>
 800f95e:	2501      	movs	r5, #1
 800f960:	fb00 4003 	mla	r0, r0, r3, r4
 800f964:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f968:	e7eb      	b.n	800f942 <_strtol_l.isra.0+0x72>
 800f96a:	2c2b      	cmp	r4, #43	; 0x2b
 800f96c:	bf08      	it	eq
 800f96e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800f972:	46a8      	mov	r8, r5
 800f974:	bf08      	it	eq
 800f976:	f100 0c02 	addeq.w	ip, r0, #2
 800f97a:	e7c8      	b.n	800f90e <_strtol_l.isra.0+0x3e>
 800f97c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800f980:	2e19      	cmp	r6, #25
 800f982:	d801      	bhi.n	800f988 <_strtol_l.isra.0+0xb8>
 800f984:	3c37      	subs	r4, #55	; 0x37
 800f986:	e7e1      	b.n	800f94c <_strtol_l.isra.0+0x7c>
 800f988:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800f98c:	2e19      	cmp	r6, #25
 800f98e:	d804      	bhi.n	800f99a <_strtol_l.isra.0+0xca>
 800f990:	3c57      	subs	r4, #87	; 0x57
 800f992:	e7db      	b.n	800f94c <_strtol_l.isra.0+0x7c>
 800f994:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f998:	e7e4      	b.n	800f964 <_strtol_l.isra.0+0x94>
 800f99a:	2d00      	cmp	r5, #0
 800f99c:	da08      	bge.n	800f9b0 <_strtol_l.isra.0+0xe0>
 800f99e:	2322      	movs	r3, #34	; 0x22
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f8ce 3000 	str.w	r3, [lr]
 800f9a6:	2a00      	cmp	r2, #0
 800f9a8:	d09e      	beq.n	800f8e8 <_strtol_l.isra.0+0x18>
 800f9aa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800f9ae:	e007      	b.n	800f9c0 <_strtol_l.isra.0+0xf0>
 800f9b0:	f1b8 0f00 	cmp.w	r8, #0
 800f9b4:	d000      	beq.n	800f9b8 <_strtol_l.isra.0+0xe8>
 800f9b6:	4240      	negs	r0, r0
 800f9b8:	2a00      	cmp	r2, #0
 800f9ba:	d095      	beq.n	800f8e8 <_strtol_l.isra.0+0x18>
 800f9bc:	2d00      	cmp	r5, #0
 800f9be:	d1f4      	bne.n	800f9aa <_strtol_l.isra.0+0xda>
 800f9c0:	6011      	str	r1, [r2, #0]
 800f9c2:	e791      	b.n	800f8e8 <_strtol_l.isra.0+0x18>
 800f9c4:	2430      	movs	r4, #48	; 0x30
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1b2      	bne.n	800f930 <_strtol_l.isra.0+0x60>
 800f9ca:	2308      	movs	r3, #8
 800f9cc:	e7b0      	b.n	800f930 <_strtol_l.isra.0+0x60>
 800f9ce:	2c30      	cmp	r4, #48	; 0x30
 800f9d0:	d0a3      	beq.n	800f91a <_strtol_l.isra.0+0x4a>
 800f9d2:	230a      	movs	r3, #10
 800f9d4:	e7ac      	b.n	800f930 <_strtol_l.isra.0+0x60>
 800f9d6:	bf00      	nop
 800f9d8:	08013a2d 	.word	0x08013a2d

0800f9dc <_strtol_r>:
 800f9dc:	f7ff bf78 	b.w	800f8d0 <_strtol_l.isra.0>

0800f9e0 <strtol>:
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	460a      	mov	r2, r1
 800f9e4:	4601      	mov	r1, r0
 800f9e6:	4802      	ldr	r0, [pc, #8]	; (800f9f0 <strtol+0x10>)
 800f9e8:	6800      	ldr	r0, [r0, #0]
 800f9ea:	f7ff bf71 	b.w	800f8d0 <_strtol_l.isra.0>
 800f9ee:	bf00      	nop
 800f9f0:	200000d4 	.word	0x200000d4

0800f9f4 <__swbuf_r>:
 800f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f6:	460e      	mov	r6, r1
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	b118      	cbz	r0, 800fa06 <__swbuf_r+0x12>
 800f9fe:	6983      	ldr	r3, [r0, #24]
 800fa00:	b90b      	cbnz	r3, 800fa06 <__swbuf_r+0x12>
 800fa02:	f001 f86d 	bl	8010ae0 <__sinit>
 800fa06:	4b21      	ldr	r3, [pc, #132]	; (800fa8c <__swbuf_r+0x98>)
 800fa08:	429c      	cmp	r4, r3
 800fa0a:	d12b      	bne.n	800fa64 <__swbuf_r+0x70>
 800fa0c:	686c      	ldr	r4, [r5, #4]
 800fa0e:	69a3      	ldr	r3, [r4, #24]
 800fa10:	60a3      	str	r3, [r4, #8]
 800fa12:	89a3      	ldrh	r3, [r4, #12]
 800fa14:	071a      	lsls	r2, r3, #28
 800fa16:	d52f      	bpl.n	800fa78 <__swbuf_r+0x84>
 800fa18:	6923      	ldr	r3, [r4, #16]
 800fa1a:	b36b      	cbz	r3, 800fa78 <__swbuf_r+0x84>
 800fa1c:	6923      	ldr	r3, [r4, #16]
 800fa1e:	6820      	ldr	r0, [r4, #0]
 800fa20:	b2f6      	uxtb	r6, r6
 800fa22:	1ac0      	subs	r0, r0, r3
 800fa24:	6963      	ldr	r3, [r4, #20]
 800fa26:	4637      	mov	r7, r6
 800fa28:	4283      	cmp	r3, r0
 800fa2a:	dc04      	bgt.n	800fa36 <__swbuf_r+0x42>
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f000 ffc2 	bl	80109b8 <_fflush_r>
 800fa34:	bb30      	cbnz	r0, 800fa84 <__swbuf_r+0x90>
 800fa36:	68a3      	ldr	r3, [r4, #8]
 800fa38:	3001      	adds	r0, #1
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	60a3      	str	r3, [r4, #8]
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	6022      	str	r2, [r4, #0]
 800fa44:	701e      	strb	r6, [r3, #0]
 800fa46:	6963      	ldr	r3, [r4, #20]
 800fa48:	4283      	cmp	r3, r0
 800fa4a:	d004      	beq.n	800fa56 <__swbuf_r+0x62>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	07db      	lsls	r3, r3, #31
 800fa50:	d506      	bpl.n	800fa60 <__swbuf_r+0x6c>
 800fa52:	2e0a      	cmp	r6, #10
 800fa54:	d104      	bne.n	800fa60 <__swbuf_r+0x6c>
 800fa56:	4621      	mov	r1, r4
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f000 ffad 	bl	80109b8 <_fflush_r>
 800fa5e:	b988      	cbnz	r0, 800fa84 <__swbuf_r+0x90>
 800fa60:	4638      	mov	r0, r7
 800fa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa64:	4b0a      	ldr	r3, [pc, #40]	; (800fa90 <__swbuf_r+0x9c>)
 800fa66:	429c      	cmp	r4, r3
 800fa68:	d101      	bne.n	800fa6e <__swbuf_r+0x7a>
 800fa6a:	68ac      	ldr	r4, [r5, #8]
 800fa6c:	e7cf      	b.n	800fa0e <__swbuf_r+0x1a>
 800fa6e:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <__swbuf_r+0xa0>)
 800fa70:	429c      	cmp	r4, r3
 800fa72:	bf08      	it	eq
 800fa74:	68ec      	ldreq	r4, [r5, #12]
 800fa76:	e7ca      	b.n	800fa0e <__swbuf_r+0x1a>
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	f000 f80c 	bl	800fa98 <__swsetup_r>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d0cb      	beq.n	800fa1c <__swbuf_r+0x28>
 800fa84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa88:	e7ea      	b.n	800fa60 <__swbuf_r+0x6c>
 800fa8a:	bf00      	nop
 800fa8c:	08013be4 	.word	0x08013be4
 800fa90:	08013c04 	.word	0x08013c04
 800fa94:	08013bc4 	.word	0x08013bc4

0800fa98 <__swsetup_r>:
 800fa98:	4b32      	ldr	r3, [pc, #200]	; (800fb64 <__swsetup_r+0xcc>)
 800fa9a:	b570      	push	{r4, r5, r6, lr}
 800fa9c:	681d      	ldr	r5, [r3, #0]
 800fa9e:	4606      	mov	r6, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	b125      	cbz	r5, 800faae <__swsetup_r+0x16>
 800faa4:	69ab      	ldr	r3, [r5, #24]
 800faa6:	b913      	cbnz	r3, 800faae <__swsetup_r+0x16>
 800faa8:	4628      	mov	r0, r5
 800faaa:	f001 f819 	bl	8010ae0 <__sinit>
 800faae:	4b2e      	ldr	r3, [pc, #184]	; (800fb68 <__swsetup_r+0xd0>)
 800fab0:	429c      	cmp	r4, r3
 800fab2:	d10f      	bne.n	800fad4 <__swsetup_r+0x3c>
 800fab4:	686c      	ldr	r4, [r5, #4]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fabc:	0719      	lsls	r1, r3, #28
 800fabe:	d42c      	bmi.n	800fb1a <__swsetup_r+0x82>
 800fac0:	06dd      	lsls	r5, r3, #27
 800fac2:	d411      	bmi.n	800fae8 <__swsetup_r+0x50>
 800fac4:	2309      	movs	r3, #9
 800fac6:	6033      	str	r3, [r6, #0]
 800fac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800facc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	e03e      	b.n	800fb52 <__swsetup_r+0xba>
 800fad4:	4b25      	ldr	r3, [pc, #148]	; (800fb6c <__swsetup_r+0xd4>)
 800fad6:	429c      	cmp	r4, r3
 800fad8:	d101      	bne.n	800fade <__swsetup_r+0x46>
 800fada:	68ac      	ldr	r4, [r5, #8]
 800fadc:	e7eb      	b.n	800fab6 <__swsetup_r+0x1e>
 800fade:	4b24      	ldr	r3, [pc, #144]	; (800fb70 <__swsetup_r+0xd8>)
 800fae0:	429c      	cmp	r4, r3
 800fae2:	bf08      	it	eq
 800fae4:	68ec      	ldreq	r4, [r5, #12]
 800fae6:	e7e6      	b.n	800fab6 <__swsetup_r+0x1e>
 800fae8:	0758      	lsls	r0, r3, #29
 800faea:	d512      	bpl.n	800fb12 <__swsetup_r+0x7a>
 800faec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faee:	b141      	cbz	r1, 800fb02 <__swsetup_r+0x6a>
 800faf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faf4:	4299      	cmp	r1, r3
 800faf6:	d002      	beq.n	800fafe <__swsetup_r+0x66>
 800faf8:	4630      	mov	r0, r6
 800fafa:	f7fe f8fd 	bl	800dcf8 <_free_r>
 800fafe:	2300      	movs	r3, #0
 800fb00:	6363      	str	r3, [r4, #52]	; 0x34
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb08:	81a3      	strh	r3, [r4, #12]
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6063      	str	r3, [r4, #4]
 800fb0e:	6923      	ldr	r3, [r4, #16]
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	f043 0308 	orr.w	r3, r3, #8
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	b94b      	cbnz	r3, 800fb32 <__swsetup_r+0x9a>
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb28:	d003      	beq.n	800fb32 <__swsetup_r+0x9a>
 800fb2a:	4621      	mov	r1, r4
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	f001 fc19 	bl	8011364 <__smakebuf_r>
 800fb32:	89a0      	ldrh	r0, [r4, #12]
 800fb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb38:	f010 0301 	ands.w	r3, r0, #1
 800fb3c:	d00a      	beq.n	800fb54 <__swsetup_r+0xbc>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	60a3      	str	r3, [r4, #8]
 800fb42:	6963      	ldr	r3, [r4, #20]
 800fb44:	425b      	negs	r3, r3
 800fb46:	61a3      	str	r3, [r4, #24]
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	b943      	cbnz	r3, 800fb5e <__swsetup_r+0xc6>
 800fb4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb50:	d1ba      	bne.n	800fac8 <__swsetup_r+0x30>
 800fb52:	bd70      	pop	{r4, r5, r6, pc}
 800fb54:	0781      	lsls	r1, r0, #30
 800fb56:	bf58      	it	pl
 800fb58:	6963      	ldrpl	r3, [r4, #20]
 800fb5a:	60a3      	str	r3, [r4, #8]
 800fb5c:	e7f4      	b.n	800fb48 <__swsetup_r+0xb0>
 800fb5e:	2000      	movs	r0, #0
 800fb60:	e7f7      	b.n	800fb52 <__swsetup_r+0xba>
 800fb62:	bf00      	nop
 800fb64:	200000d4 	.word	0x200000d4
 800fb68:	08013be4 	.word	0x08013be4
 800fb6c:	08013c04 	.word	0x08013c04
 800fb70:	08013bc4 	.word	0x08013bc4

0800fb74 <__assert_func>:
 800fb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb76:	4614      	mov	r4, r2
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b09      	ldr	r3, [pc, #36]	; (800fba0 <__assert_func+0x2c>)
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68d8      	ldr	r0, [r3, #12]
 800fb82:	b14c      	cbz	r4, 800fb98 <__assert_func+0x24>
 800fb84:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <__assert_func+0x30>)
 800fb86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb8a:	9100      	str	r1, [sp, #0]
 800fb8c:	462b      	mov	r3, r5
 800fb8e:	4906      	ldr	r1, [pc, #24]	; (800fba8 <__assert_func+0x34>)
 800fb90:	f001 f824 	bl	8010bdc <fiprintf>
 800fb94:	f002 fc34 	bl	8012400 <abort>
 800fb98:	4b04      	ldr	r3, [pc, #16]	; (800fbac <__assert_func+0x38>)
 800fb9a:	461c      	mov	r4, r3
 800fb9c:	e7f3      	b.n	800fb86 <__assert_func+0x12>
 800fb9e:	bf00      	nop
 800fba0:	200000d4 	.word	0x200000d4
 800fba4:	080139f0 	.word	0x080139f0
 800fba8:	080139fd 	.word	0x080139fd
 800fbac:	08013a2b 	.word	0x08013a2b

0800fbb0 <quorem>:
 800fbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	6903      	ldr	r3, [r0, #16]
 800fbb6:	690c      	ldr	r4, [r1, #16]
 800fbb8:	4607      	mov	r7, r0
 800fbba:	42a3      	cmp	r3, r4
 800fbbc:	f2c0 8083 	blt.w	800fcc6 <quorem+0x116>
 800fbc0:	3c01      	subs	r4, #1
 800fbc2:	f100 0514 	add.w	r5, r0, #20
 800fbc6:	f101 0814 	add.w	r8, r1, #20
 800fbca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbe8:	d332      	bcc.n	800fc50 <quorem+0xa0>
 800fbea:	f04f 0e00 	mov.w	lr, #0
 800fbee:	4640      	mov	r0, r8
 800fbf0:	46ac      	mov	ip, r5
 800fbf2:	46f2      	mov	sl, lr
 800fbf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbf8:	b293      	uxth	r3, r2
 800fbfa:	fb06 e303 	mla	r3, r6, r3, lr
 800fbfe:	0c12      	lsrs	r2, r2, #16
 800fc00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc04:	fb06 e202 	mla	r2, r6, r2, lr
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	ebaa 0303 	sub.w	r3, sl, r3
 800fc0e:	f8dc a000 	ldr.w	sl, [ip]
 800fc12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc16:	fa1f fa8a 	uxth.w	sl, sl
 800fc1a:	4453      	add	r3, sl
 800fc1c:	fa1f fa82 	uxth.w	sl, r2
 800fc20:	f8dc 2000 	ldr.w	r2, [ip]
 800fc24:	4581      	cmp	r9, r0
 800fc26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fc2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc38:	f84c 3b04 	str.w	r3, [ip], #4
 800fc3c:	d2da      	bcs.n	800fbf4 <quorem+0x44>
 800fc3e:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc42:	b92b      	cbnz	r3, 800fc50 <quorem+0xa0>
 800fc44:	9b01      	ldr	r3, [sp, #4]
 800fc46:	3b04      	subs	r3, #4
 800fc48:	429d      	cmp	r5, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	d32f      	bcc.n	800fcae <quorem+0xfe>
 800fc4e:	613c      	str	r4, [r7, #16]
 800fc50:	4638      	mov	r0, r7
 800fc52:	f001 feb7 	bl	80119c4 <__mcmp>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	db25      	blt.n	800fca6 <quorem+0xf6>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f04f 0c00 	mov.w	ip, #0
 800fc60:	3601      	adds	r6, #1
 800fc62:	f858 1b04 	ldr.w	r1, [r8], #4
 800fc66:	f8d0 e000 	ldr.w	lr, [r0]
 800fc6a:	b28b      	uxth	r3, r1
 800fc6c:	ebac 0303 	sub.w	r3, ip, r3
 800fc70:	fa1f f28e 	uxth.w	r2, lr
 800fc74:	4413      	add	r3, r2
 800fc76:	0c0a      	lsrs	r2, r1, #16
 800fc78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc86:	45c1      	cmp	r9, r8
 800fc88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc8c:	f840 3b04 	str.w	r3, [r0], #4
 800fc90:	d2e7      	bcs.n	800fc62 <quorem+0xb2>
 800fc92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc9a:	b922      	cbnz	r2, 800fca6 <quorem+0xf6>
 800fc9c:	3b04      	subs	r3, #4
 800fc9e:	429d      	cmp	r5, r3
 800fca0:	461a      	mov	r2, r3
 800fca2:	d30a      	bcc.n	800fcba <quorem+0x10a>
 800fca4:	613c      	str	r4, [r7, #16]
 800fca6:	4630      	mov	r0, r6
 800fca8:	b003      	add	sp, #12
 800fcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	3b04      	subs	r3, #4
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d1cb      	bne.n	800fc4e <quorem+0x9e>
 800fcb6:	3c01      	subs	r4, #1
 800fcb8:	e7c6      	b.n	800fc48 <quorem+0x98>
 800fcba:	6812      	ldr	r2, [r2, #0]
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	2a00      	cmp	r2, #0
 800fcc0:	d1f0      	bne.n	800fca4 <quorem+0xf4>
 800fcc2:	3c01      	subs	r4, #1
 800fcc4:	e7eb      	b.n	800fc9e <quorem+0xee>
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	e7ee      	b.n	800fca8 <quorem+0xf8>
 800fcca:	0000      	movs	r0, r0
 800fccc:	0000      	movs	r0, r0
	...

0800fcd0 <_dtoa_r>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	4616      	mov	r6, r2
 800fcd6:	461f      	mov	r7, r3
 800fcd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fcda:	b099      	sub	sp, #100	; 0x64
 800fcdc:	4605      	mov	r5, r0
 800fcde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fce2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800fce6:	b974      	cbnz	r4, 800fd06 <_dtoa_r+0x36>
 800fce8:	2010      	movs	r0, #16
 800fcea:	f7fd ffe7 	bl	800dcbc <malloc>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	6268      	str	r0, [r5, #36]	; 0x24
 800fcf2:	b920      	cbnz	r0, 800fcfe <_dtoa_r+0x2e>
 800fcf4:	21ea      	movs	r1, #234	; 0xea
 800fcf6:	4bae      	ldr	r3, [pc, #696]	; (800ffb0 <_dtoa_r+0x2e0>)
 800fcf8:	48ae      	ldr	r0, [pc, #696]	; (800ffb4 <_dtoa_r+0x2e4>)
 800fcfa:	f7ff ff3b 	bl	800fb74 <__assert_func>
 800fcfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd02:	6004      	str	r4, [r0, #0]
 800fd04:	60c4      	str	r4, [r0, #12]
 800fd06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd08:	6819      	ldr	r1, [r3, #0]
 800fd0a:	b151      	cbz	r1, 800fd22 <_dtoa_r+0x52>
 800fd0c:	685a      	ldr	r2, [r3, #4]
 800fd0e:	2301      	movs	r3, #1
 800fd10:	4093      	lsls	r3, r2
 800fd12:	604a      	str	r2, [r1, #4]
 800fd14:	608b      	str	r3, [r1, #8]
 800fd16:	4628      	mov	r0, r5
 800fd18:	f001 fbd0 	bl	80114bc <_Bfree>
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	1e3b      	subs	r3, r7, #0
 800fd24:	bfaf      	iteee	ge
 800fd26:	2300      	movge	r3, #0
 800fd28:	2201      	movlt	r2, #1
 800fd2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd2e:	9305      	strlt	r3, [sp, #20]
 800fd30:	bfa8      	it	ge
 800fd32:	f8c8 3000 	strge.w	r3, [r8]
 800fd36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fd3a:	4b9f      	ldr	r3, [pc, #636]	; (800ffb8 <_dtoa_r+0x2e8>)
 800fd3c:	bfb8      	it	lt
 800fd3e:	f8c8 2000 	strlt.w	r2, [r8]
 800fd42:	ea33 0309 	bics.w	r3, r3, r9
 800fd46:	d119      	bne.n	800fd7c <_dtoa_r+0xac>
 800fd48:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd54:	4333      	orrs	r3, r6
 800fd56:	f000 8580 	beq.w	801085a <_dtoa_r+0xb8a>
 800fd5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd5c:	b953      	cbnz	r3, 800fd74 <_dtoa_r+0xa4>
 800fd5e:	4b97      	ldr	r3, [pc, #604]	; (800ffbc <_dtoa_r+0x2ec>)
 800fd60:	e022      	b.n	800fda8 <_dtoa_r+0xd8>
 800fd62:	4b97      	ldr	r3, [pc, #604]	; (800ffc0 <_dtoa_r+0x2f0>)
 800fd64:	9308      	str	r3, [sp, #32]
 800fd66:	3308      	adds	r3, #8
 800fd68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	9808      	ldr	r0, [sp, #32]
 800fd6e:	b019      	add	sp, #100	; 0x64
 800fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd74:	4b91      	ldr	r3, [pc, #580]	; (800ffbc <_dtoa_r+0x2ec>)
 800fd76:	9308      	str	r3, [sp, #32]
 800fd78:	3303      	adds	r3, #3
 800fd7a:	e7f5      	b.n	800fd68 <_dtoa_r+0x98>
 800fd7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fd80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800fd84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd88:	2200      	movs	r2, #0
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f7f0 fe78 	bl	8000a80 <__aeabi_dcmpeq>
 800fd90:	4680      	mov	r8, r0
 800fd92:	b158      	cbz	r0, 800fdac <_dtoa_r+0xdc>
 800fd94:	2301      	movs	r3, #1
 800fd96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd98:	6013      	str	r3, [r2, #0]
 800fd9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 8559 	beq.w	8010854 <_dtoa_r+0xb84>
 800fda2:	4888      	ldr	r0, [pc, #544]	; (800ffc4 <_dtoa_r+0x2f4>)
 800fda4:	6018      	str	r0, [r3, #0]
 800fda6:	1e43      	subs	r3, r0, #1
 800fda8:	9308      	str	r3, [sp, #32]
 800fdaa:	e7df      	b.n	800fd6c <_dtoa_r+0x9c>
 800fdac:	ab16      	add	r3, sp, #88	; 0x58
 800fdae:	9301      	str	r3, [sp, #4]
 800fdb0:	ab17      	add	r3, sp, #92	; 0x5c
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fdba:	f001 ff29 	bl	8011c10 <__d2b>
 800fdbe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fdc2:	4682      	mov	sl, r0
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	d07e      	beq.n	800fec6 <_dtoa_r+0x1f6>
 800fdc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fdcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fdd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdd6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800fdda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fdde:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800fde2:	2200      	movs	r2, #0
 800fde4:	4b78      	ldr	r3, [pc, #480]	; (800ffc8 <_dtoa_r+0x2f8>)
 800fde6:	f7f0 fa2b 	bl	8000240 <__aeabi_dsub>
 800fdea:	a36b      	add	r3, pc, #428	; (adr r3, 800ff98 <_dtoa_r+0x2c8>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fbde 	bl	80005b0 <__aeabi_dmul>
 800fdf4:	a36a      	add	r3, pc, #424	; (adr r3, 800ffa0 <_dtoa_r+0x2d0>)
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f7f0 fa23 	bl	8000244 <__adddf3>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	4620      	mov	r0, r4
 800fe02:	460f      	mov	r7, r1
 800fe04:	f7f0 fb6a 	bl	80004dc <__aeabi_i2d>
 800fe08:	a367      	add	r3, pc, #412	; (adr r3, 800ffa8 <_dtoa_r+0x2d8>)
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	f7f0 fbcf 	bl	80005b0 <__aeabi_dmul>
 800fe12:	4602      	mov	r2, r0
 800fe14:	460b      	mov	r3, r1
 800fe16:	4630      	mov	r0, r6
 800fe18:	4639      	mov	r1, r7
 800fe1a:	f7f0 fa13 	bl	8000244 <__adddf3>
 800fe1e:	4606      	mov	r6, r0
 800fe20:	460f      	mov	r7, r1
 800fe22:	f7f0 fe75 	bl	8000b10 <__aeabi_d2iz>
 800fe26:	2200      	movs	r2, #0
 800fe28:	4681      	mov	r9, r0
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	4639      	mov	r1, r7
 800fe30:	f7f0 fe30 	bl	8000a94 <__aeabi_dcmplt>
 800fe34:	b148      	cbz	r0, 800fe4a <_dtoa_r+0x17a>
 800fe36:	4648      	mov	r0, r9
 800fe38:	f7f0 fb50 	bl	80004dc <__aeabi_i2d>
 800fe3c:	4632      	mov	r2, r6
 800fe3e:	463b      	mov	r3, r7
 800fe40:	f7f0 fe1e 	bl	8000a80 <__aeabi_dcmpeq>
 800fe44:	b908      	cbnz	r0, 800fe4a <_dtoa_r+0x17a>
 800fe46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fe4a:	f1b9 0f16 	cmp.w	r9, #22
 800fe4e:	d857      	bhi.n	800ff00 <_dtoa_r+0x230>
 800fe50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe54:	4b5d      	ldr	r3, [pc, #372]	; (800ffcc <_dtoa_r+0x2fc>)
 800fe56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5e:	f7f0 fe19 	bl	8000a94 <__aeabi_dcmplt>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d04e      	beq.n	800ff04 <_dtoa_r+0x234>
 800fe66:	2300      	movs	r3, #0
 800fe68:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fe6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe70:	1b1c      	subs	r4, r3, r4
 800fe72:	1e63      	subs	r3, r4, #1
 800fe74:	9309      	str	r3, [sp, #36]	; 0x24
 800fe76:	bf49      	itett	mi
 800fe78:	f1c4 0301 	rsbmi	r3, r4, #1
 800fe7c:	2300      	movpl	r3, #0
 800fe7e:	9306      	strmi	r3, [sp, #24]
 800fe80:	2300      	movmi	r3, #0
 800fe82:	bf54      	ite	pl
 800fe84:	9306      	strpl	r3, [sp, #24]
 800fe86:	9309      	strmi	r3, [sp, #36]	; 0x24
 800fe88:	f1b9 0f00 	cmp.w	r9, #0
 800fe8c:	db3c      	blt.n	800ff08 <_dtoa_r+0x238>
 800fe8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe90:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fe94:	444b      	add	r3, r9
 800fe96:	9309      	str	r3, [sp, #36]	; 0x24
 800fe98:	2300      	movs	r3, #0
 800fe9a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe9e:	2b09      	cmp	r3, #9
 800fea0:	d86c      	bhi.n	800ff7c <_dtoa_r+0x2ac>
 800fea2:	2b05      	cmp	r3, #5
 800fea4:	bfc4      	itt	gt
 800fea6:	3b04      	subgt	r3, #4
 800fea8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800feaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800feac:	bfc8      	it	gt
 800feae:	2400      	movgt	r4, #0
 800feb0:	f1a3 0302 	sub.w	r3, r3, #2
 800feb4:	bfd8      	it	le
 800feb6:	2401      	movle	r4, #1
 800feb8:	2b03      	cmp	r3, #3
 800feba:	f200 808b 	bhi.w	800ffd4 <_dtoa_r+0x304>
 800febe:	e8df f003 	tbb	[pc, r3]
 800fec2:	4f2d      	.short	0x4f2d
 800fec4:	5b4d      	.short	0x5b4d
 800fec6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800feca:	441c      	add	r4, r3
 800fecc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800fed0:	2b20      	cmp	r3, #32
 800fed2:	bfc3      	ittte	gt
 800fed4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fed8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800fedc:	fa09 f303 	lslgt.w	r3, r9, r3
 800fee0:	f1c3 0320 	rsble	r3, r3, #32
 800fee4:	bfc6      	itte	gt
 800fee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800feea:	4318      	orrgt	r0, r3
 800feec:	fa06 f003 	lslle.w	r0, r6, r3
 800fef0:	f7f0 fae4 	bl	80004bc <__aeabi_ui2d>
 800fef4:	2301      	movs	r3, #1
 800fef6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fefa:	3c01      	subs	r4, #1
 800fefc:	9313      	str	r3, [sp, #76]	; 0x4c
 800fefe:	e770      	b.n	800fde2 <_dtoa_r+0x112>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e7b3      	b.n	800fe6c <_dtoa_r+0x19c>
 800ff04:	900f      	str	r0, [sp, #60]	; 0x3c
 800ff06:	e7b2      	b.n	800fe6e <_dtoa_r+0x19e>
 800ff08:	9b06      	ldr	r3, [sp, #24]
 800ff0a:	eba3 0309 	sub.w	r3, r3, r9
 800ff0e:	9306      	str	r3, [sp, #24]
 800ff10:	f1c9 0300 	rsb	r3, r9, #0
 800ff14:	930a      	str	r3, [sp, #40]	; 0x28
 800ff16:	2300      	movs	r3, #0
 800ff18:	930e      	str	r3, [sp, #56]	; 0x38
 800ff1a:	e7bf      	b.n	800fe9c <_dtoa_r+0x1cc>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	dc59      	bgt.n	800ffda <_dtoa_r+0x30a>
 800ff26:	f04f 0b01 	mov.w	fp, #1
 800ff2a:	465b      	mov	r3, fp
 800ff2c:	f8cd b008 	str.w	fp, [sp, #8]
 800ff30:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ff34:	2200      	movs	r2, #0
 800ff36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ff38:	6042      	str	r2, [r0, #4]
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	f102 0614 	add.w	r6, r2, #20
 800ff40:	429e      	cmp	r6, r3
 800ff42:	6841      	ldr	r1, [r0, #4]
 800ff44:	d94f      	bls.n	800ffe6 <_dtoa_r+0x316>
 800ff46:	4628      	mov	r0, r5
 800ff48:	f001 fa78 	bl	801143c <_Balloc>
 800ff4c:	9008      	str	r0, [sp, #32]
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d14d      	bne.n	800ffee <_dtoa_r+0x31e>
 800ff52:	4602      	mov	r2, r0
 800ff54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff58:	4b1d      	ldr	r3, [pc, #116]	; (800ffd0 <_dtoa_r+0x300>)
 800ff5a:	e6cd      	b.n	800fcf8 <_dtoa_r+0x28>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e7de      	b.n	800ff1e <_dtoa_r+0x24e>
 800ff60:	2300      	movs	r3, #0
 800ff62:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff66:	eb09 0b03 	add.w	fp, r9, r3
 800ff6a:	f10b 0301 	add.w	r3, fp, #1
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	9302      	str	r3, [sp, #8]
 800ff72:	bfb8      	it	lt
 800ff74:	2301      	movlt	r3, #1
 800ff76:	e7dd      	b.n	800ff34 <_dtoa_r+0x264>
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e7f2      	b.n	800ff62 <_dtoa_r+0x292>
 800ff7c:	2401      	movs	r4, #1
 800ff7e:	2300      	movs	r3, #0
 800ff80:	940b      	str	r4, [sp, #44]	; 0x2c
 800ff82:	9322      	str	r3, [sp, #136]	; 0x88
 800ff84:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2312      	movs	r3, #18
 800ff8c:	f8cd b008 	str.w	fp, [sp, #8]
 800ff90:	9223      	str	r2, [sp, #140]	; 0x8c
 800ff92:	e7cf      	b.n	800ff34 <_dtoa_r+0x264>
 800ff94:	f3af 8000 	nop.w
 800ff98:	636f4361 	.word	0x636f4361
 800ff9c:	3fd287a7 	.word	0x3fd287a7
 800ffa0:	8b60c8b3 	.word	0x8b60c8b3
 800ffa4:	3fc68a28 	.word	0x3fc68a28
 800ffa8:	509f79fb 	.word	0x509f79fb
 800ffac:	3fd34413 	.word	0x3fd34413
 800ffb0:	08013b3a 	.word	0x08013b3a
 800ffb4:	08013b51 	.word	0x08013b51
 800ffb8:	7ff00000 	.word	0x7ff00000
 800ffbc:	08013b36 	.word	0x08013b36
 800ffc0:	08013b2d 	.word	0x08013b2d
 800ffc4:	08013971 	.word	0x08013971
 800ffc8:	3ff80000 	.word	0x3ff80000
 800ffcc:	08013d30 	.word	0x08013d30
 800ffd0:	08013bb0 	.word	0x08013bb0
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffd8:	e7d4      	b.n	800ff84 <_dtoa_r+0x2b4>
 800ffda:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ffde:	465b      	mov	r3, fp
 800ffe0:	f8cd b008 	str.w	fp, [sp, #8]
 800ffe4:	e7a6      	b.n	800ff34 <_dtoa_r+0x264>
 800ffe6:	3101      	adds	r1, #1
 800ffe8:	6041      	str	r1, [r0, #4]
 800ffea:	0052      	lsls	r2, r2, #1
 800ffec:	e7a6      	b.n	800ff3c <_dtoa_r+0x26c>
 800ffee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fff0:	9a08      	ldr	r2, [sp, #32]
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	9b02      	ldr	r3, [sp, #8]
 800fff6:	2b0e      	cmp	r3, #14
 800fff8:	f200 80a8 	bhi.w	801014c <_dtoa_r+0x47c>
 800fffc:	2c00      	cmp	r4, #0
 800fffe:	f000 80a5 	beq.w	801014c <_dtoa_r+0x47c>
 8010002:	f1b9 0f00 	cmp.w	r9, #0
 8010006:	dd34      	ble.n	8010072 <_dtoa_r+0x3a2>
 8010008:	4a9a      	ldr	r2, [pc, #616]	; (8010274 <_dtoa_r+0x5a4>)
 801000a:	f009 030f 	and.w	r3, r9, #15
 801000e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010012:	f419 7f80 	tst.w	r9, #256	; 0x100
 8010016:	e9d3 3400 	ldrd	r3, r4, [r3]
 801001a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801001e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8010022:	d016      	beq.n	8010052 <_dtoa_r+0x382>
 8010024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010028:	4b93      	ldr	r3, [pc, #588]	; (8010278 <_dtoa_r+0x5a8>)
 801002a:	2703      	movs	r7, #3
 801002c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010030:	f7f0 fbe8 	bl	8000804 <__aeabi_ddiv>
 8010034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010038:	f004 040f 	and.w	r4, r4, #15
 801003c:	4e8e      	ldr	r6, [pc, #568]	; (8010278 <_dtoa_r+0x5a8>)
 801003e:	b954      	cbnz	r4, 8010056 <_dtoa_r+0x386>
 8010040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010048:	f7f0 fbdc 	bl	8000804 <__aeabi_ddiv>
 801004c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010050:	e029      	b.n	80100a6 <_dtoa_r+0x3d6>
 8010052:	2702      	movs	r7, #2
 8010054:	e7f2      	b.n	801003c <_dtoa_r+0x36c>
 8010056:	07e1      	lsls	r1, r4, #31
 8010058:	d508      	bpl.n	801006c <_dtoa_r+0x39c>
 801005a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801005e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010062:	f7f0 faa5 	bl	80005b0 <__aeabi_dmul>
 8010066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801006a:	3701      	adds	r7, #1
 801006c:	1064      	asrs	r4, r4, #1
 801006e:	3608      	adds	r6, #8
 8010070:	e7e5      	b.n	801003e <_dtoa_r+0x36e>
 8010072:	f000 80a5 	beq.w	80101c0 <_dtoa_r+0x4f0>
 8010076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801007a:	f1c9 0400 	rsb	r4, r9, #0
 801007e:	4b7d      	ldr	r3, [pc, #500]	; (8010274 <_dtoa_r+0x5a4>)
 8010080:	f004 020f 	and.w	r2, r4, #15
 8010084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008c:	f7f0 fa90 	bl	80005b0 <__aeabi_dmul>
 8010090:	2702      	movs	r7, #2
 8010092:	2300      	movs	r3, #0
 8010094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010098:	4e77      	ldr	r6, [pc, #476]	; (8010278 <_dtoa_r+0x5a8>)
 801009a:	1124      	asrs	r4, r4, #4
 801009c:	2c00      	cmp	r4, #0
 801009e:	f040 8084 	bne.w	80101aa <_dtoa_r+0x4da>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1d2      	bne.n	801004c <_dtoa_r+0x37c>
 80100a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 808b 	beq.w	80101c4 <_dtoa_r+0x4f4>
 80100ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80100b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80100b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80100ba:	2200      	movs	r2, #0
 80100bc:	4b6f      	ldr	r3, [pc, #444]	; (801027c <_dtoa_r+0x5ac>)
 80100be:	f7f0 fce9 	bl	8000a94 <__aeabi_dcmplt>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d07e      	beq.n	80101c4 <_dtoa_r+0x4f4>
 80100c6:	9b02      	ldr	r3, [sp, #8]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d07b      	beq.n	80101c4 <_dtoa_r+0x4f4>
 80100cc:	f1bb 0f00 	cmp.w	fp, #0
 80100d0:	dd38      	ble.n	8010144 <_dtoa_r+0x474>
 80100d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80100d6:	2200      	movs	r2, #0
 80100d8:	4b69      	ldr	r3, [pc, #420]	; (8010280 <_dtoa_r+0x5b0>)
 80100da:	f7f0 fa69 	bl	80005b0 <__aeabi_dmul>
 80100de:	465c      	mov	r4, fp
 80100e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100e4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80100e8:	3701      	adds	r7, #1
 80100ea:	4638      	mov	r0, r7
 80100ec:	f7f0 f9f6 	bl	80004dc <__aeabi_i2d>
 80100f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100f4:	f7f0 fa5c 	bl	80005b0 <__aeabi_dmul>
 80100f8:	2200      	movs	r2, #0
 80100fa:	4b62      	ldr	r3, [pc, #392]	; (8010284 <_dtoa_r+0x5b4>)
 80100fc:	f7f0 f8a2 	bl	8000244 <__adddf3>
 8010100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010104:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010108:	9611      	str	r6, [sp, #68]	; 0x44
 801010a:	2c00      	cmp	r4, #0
 801010c:	d15d      	bne.n	80101ca <_dtoa_r+0x4fa>
 801010e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010112:	2200      	movs	r2, #0
 8010114:	4b5c      	ldr	r3, [pc, #368]	; (8010288 <_dtoa_r+0x5b8>)
 8010116:	f7f0 f893 	bl	8000240 <__aeabi_dsub>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010122:	4633      	mov	r3, r6
 8010124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010126:	f7f0 fcd3 	bl	8000ad0 <__aeabi_dcmpgt>
 801012a:	2800      	cmp	r0, #0
 801012c:	f040 829e 	bne.w	801066c <_dtoa_r+0x99c>
 8010130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010136:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801013a:	f7f0 fcab 	bl	8000a94 <__aeabi_dcmplt>
 801013e:	2800      	cmp	r0, #0
 8010140:	f040 8292 	bne.w	8010668 <_dtoa_r+0x998>
 8010144:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010148:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801014c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801014e:	2b00      	cmp	r3, #0
 8010150:	f2c0 8153 	blt.w	80103fa <_dtoa_r+0x72a>
 8010154:	f1b9 0f0e 	cmp.w	r9, #14
 8010158:	f300 814f 	bgt.w	80103fa <_dtoa_r+0x72a>
 801015c:	4b45      	ldr	r3, [pc, #276]	; (8010274 <_dtoa_r+0x5a4>)
 801015e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010162:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010166:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801016a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801016c:	2b00      	cmp	r3, #0
 801016e:	f280 80db 	bge.w	8010328 <_dtoa_r+0x658>
 8010172:	9b02      	ldr	r3, [sp, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f300 80d7 	bgt.w	8010328 <_dtoa_r+0x658>
 801017a:	f040 8274 	bne.w	8010666 <_dtoa_r+0x996>
 801017e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010182:	2200      	movs	r2, #0
 8010184:	4b40      	ldr	r3, [pc, #256]	; (8010288 <_dtoa_r+0x5b8>)
 8010186:	f7f0 fa13 	bl	80005b0 <__aeabi_dmul>
 801018a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801018e:	f7f0 fc95 	bl	8000abc <__aeabi_dcmpge>
 8010192:	9c02      	ldr	r4, [sp, #8]
 8010194:	4626      	mov	r6, r4
 8010196:	2800      	cmp	r0, #0
 8010198:	f040 824a 	bne.w	8010630 <_dtoa_r+0x960>
 801019c:	2331      	movs	r3, #49	; 0x31
 801019e:	9f08      	ldr	r7, [sp, #32]
 80101a0:	f109 0901 	add.w	r9, r9, #1
 80101a4:	f807 3b01 	strb.w	r3, [r7], #1
 80101a8:	e246      	b.n	8010638 <_dtoa_r+0x968>
 80101aa:	07e2      	lsls	r2, r4, #31
 80101ac:	d505      	bpl.n	80101ba <_dtoa_r+0x4ea>
 80101ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80101b2:	f7f0 f9fd 	bl	80005b0 <__aeabi_dmul>
 80101b6:	2301      	movs	r3, #1
 80101b8:	3701      	adds	r7, #1
 80101ba:	1064      	asrs	r4, r4, #1
 80101bc:	3608      	adds	r6, #8
 80101be:	e76d      	b.n	801009c <_dtoa_r+0x3cc>
 80101c0:	2702      	movs	r7, #2
 80101c2:	e770      	b.n	80100a6 <_dtoa_r+0x3d6>
 80101c4:	46c8      	mov	r8, r9
 80101c6:	9c02      	ldr	r4, [sp, #8]
 80101c8:	e78f      	b.n	80100ea <_dtoa_r+0x41a>
 80101ca:	9908      	ldr	r1, [sp, #32]
 80101cc:	4b29      	ldr	r3, [pc, #164]	; (8010274 <_dtoa_r+0x5a4>)
 80101ce:	4421      	add	r1, r4
 80101d0:	9112      	str	r1, [sp, #72]	; 0x48
 80101d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80101dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101e0:	2900      	cmp	r1, #0
 80101e2:	d055      	beq.n	8010290 <_dtoa_r+0x5c0>
 80101e4:	2000      	movs	r0, #0
 80101e6:	4929      	ldr	r1, [pc, #164]	; (801028c <_dtoa_r+0x5bc>)
 80101e8:	f7f0 fb0c 	bl	8000804 <__aeabi_ddiv>
 80101ec:	463b      	mov	r3, r7
 80101ee:	4632      	mov	r2, r6
 80101f0:	f7f0 f826 	bl	8000240 <__aeabi_dsub>
 80101f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80101f8:	9f08      	ldr	r7, [sp, #32]
 80101fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101fe:	f7f0 fc87 	bl	8000b10 <__aeabi_d2iz>
 8010202:	4604      	mov	r4, r0
 8010204:	f7f0 f96a 	bl	80004dc <__aeabi_i2d>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010210:	f7f0 f816 	bl	8000240 <__aeabi_dsub>
 8010214:	4602      	mov	r2, r0
 8010216:	460b      	mov	r3, r1
 8010218:	3430      	adds	r4, #48	; 0x30
 801021a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801021e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010222:	f807 4b01 	strb.w	r4, [r7], #1
 8010226:	f7f0 fc35 	bl	8000a94 <__aeabi_dcmplt>
 801022a:	2800      	cmp	r0, #0
 801022c:	d174      	bne.n	8010318 <_dtoa_r+0x648>
 801022e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010232:	2000      	movs	r0, #0
 8010234:	4911      	ldr	r1, [pc, #68]	; (801027c <_dtoa_r+0x5ac>)
 8010236:	f7f0 f803 	bl	8000240 <__aeabi_dsub>
 801023a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801023e:	f7f0 fc29 	bl	8000a94 <__aeabi_dcmplt>
 8010242:	2800      	cmp	r0, #0
 8010244:	f040 80b6 	bne.w	80103b4 <_dtoa_r+0x6e4>
 8010248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801024a:	429f      	cmp	r7, r3
 801024c:	f43f af7a 	beq.w	8010144 <_dtoa_r+0x474>
 8010250:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010254:	2200      	movs	r2, #0
 8010256:	4b0a      	ldr	r3, [pc, #40]	; (8010280 <_dtoa_r+0x5b0>)
 8010258:	f7f0 f9aa 	bl	80005b0 <__aeabi_dmul>
 801025c:	2200      	movs	r2, #0
 801025e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010266:	4b06      	ldr	r3, [pc, #24]	; (8010280 <_dtoa_r+0x5b0>)
 8010268:	f7f0 f9a2 	bl	80005b0 <__aeabi_dmul>
 801026c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010270:	e7c3      	b.n	80101fa <_dtoa_r+0x52a>
 8010272:	bf00      	nop
 8010274:	08013d30 	.word	0x08013d30
 8010278:	08013d08 	.word	0x08013d08
 801027c:	3ff00000 	.word	0x3ff00000
 8010280:	40240000 	.word	0x40240000
 8010284:	401c0000 	.word	0x401c0000
 8010288:	40140000 	.word	0x40140000
 801028c:	3fe00000 	.word	0x3fe00000
 8010290:	4630      	mov	r0, r6
 8010292:	4639      	mov	r1, r7
 8010294:	f7f0 f98c 	bl	80005b0 <__aeabi_dmul>
 8010298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801029a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801029e:	9c08      	ldr	r4, [sp, #32]
 80102a0:	9314      	str	r3, [sp, #80]	; 0x50
 80102a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102a6:	f7f0 fc33 	bl	8000b10 <__aeabi_d2iz>
 80102aa:	9015      	str	r0, [sp, #84]	; 0x54
 80102ac:	f7f0 f916 	bl	80004dc <__aeabi_i2d>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102b8:	f7ef ffc2 	bl	8000240 <__aeabi_dsub>
 80102bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102be:	4606      	mov	r6, r0
 80102c0:	3330      	adds	r3, #48	; 0x30
 80102c2:	f804 3b01 	strb.w	r3, [r4], #1
 80102c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102c8:	460f      	mov	r7, r1
 80102ca:	429c      	cmp	r4, r3
 80102cc:	f04f 0200 	mov.w	r2, #0
 80102d0:	d124      	bne.n	801031c <_dtoa_r+0x64c>
 80102d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80102d6:	4bb3      	ldr	r3, [pc, #716]	; (80105a4 <_dtoa_r+0x8d4>)
 80102d8:	f7ef ffb4 	bl	8000244 <__adddf3>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4630      	mov	r0, r6
 80102e2:	4639      	mov	r1, r7
 80102e4:	f7f0 fbf4 	bl	8000ad0 <__aeabi_dcmpgt>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d162      	bne.n	80103b2 <_dtoa_r+0x6e2>
 80102ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80102f0:	2000      	movs	r0, #0
 80102f2:	49ac      	ldr	r1, [pc, #688]	; (80105a4 <_dtoa_r+0x8d4>)
 80102f4:	f7ef ffa4 	bl	8000240 <__aeabi_dsub>
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4630      	mov	r0, r6
 80102fe:	4639      	mov	r1, r7
 8010300:	f7f0 fbc8 	bl	8000a94 <__aeabi_dcmplt>
 8010304:	2800      	cmp	r0, #0
 8010306:	f43f af1d 	beq.w	8010144 <_dtoa_r+0x474>
 801030a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801030c:	1e7b      	subs	r3, r7, #1
 801030e:	9314      	str	r3, [sp, #80]	; 0x50
 8010310:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010314:	2b30      	cmp	r3, #48	; 0x30
 8010316:	d0f8      	beq.n	801030a <_dtoa_r+0x63a>
 8010318:	46c1      	mov	r9, r8
 801031a:	e03a      	b.n	8010392 <_dtoa_r+0x6c2>
 801031c:	4ba2      	ldr	r3, [pc, #648]	; (80105a8 <_dtoa_r+0x8d8>)
 801031e:	f7f0 f947 	bl	80005b0 <__aeabi_dmul>
 8010322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010326:	e7bc      	b.n	80102a2 <_dtoa_r+0x5d2>
 8010328:	9f08      	ldr	r7, [sp, #32]
 801032a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801032e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010332:	f7f0 fa67 	bl	8000804 <__aeabi_ddiv>
 8010336:	f7f0 fbeb 	bl	8000b10 <__aeabi_d2iz>
 801033a:	4604      	mov	r4, r0
 801033c:	f7f0 f8ce 	bl	80004dc <__aeabi_i2d>
 8010340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010344:	f7f0 f934 	bl	80005b0 <__aeabi_dmul>
 8010348:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801034c:	460b      	mov	r3, r1
 801034e:	4602      	mov	r2, r0
 8010350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010354:	f7ef ff74 	bl	8000240 <__aeabi_dsub>
 8010358:	f807 6b01 	strb.w	r6, [r7], #1
 801035c:	9e08      	ldr	r6, [sp, #32]
 801035e:	9b02      	ldr	r3, [sp, #8]
 8010360:	1bbe      	subs	r6, r7, r6
 8010362:	42b3      	cmp	r3, r6
 8010364:	d13a      	bne.n	80103dc <_dtoa_r+0x70c>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	f7ef ff6b 	bl	8000244 <__adddf3>
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801037a:	f7f0 fba9 	bl	8000ad0 <__aeabi_dcmpgt>
 801037e:	bb58      	cbnz	r0, 80103d8 <_dtoa_r+0x708>
 8010380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010388:	f7f0 fb7a 	bl	8000a80 <__aeabi_dcmpeq>
 801038c:	b108      	cbz	r0, 8010392 <_dtoa_r+0x6c2>
 801038e:	07e1      	lsls	r1, r4, #31
 8010390:	d422      	bmi.n	80103d8 <_dtoa_r+0x708>
 8010392:	4628      	mov	r0, r5
 8010394:	4651      	mov	r1, sl
 8010396:	f001 f891 	bl	80114bc <_Bfree>
 801039a:	2300      	movs	r3, #0
 801039c:	703b      	strb	r3, [r7, #0]
 801039e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80103a0:	f109 0001 	add.w	r0, r9, #1
 80103a4:	6018      	str	r0, [r3, #0]
 80103a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f43f acdf 	beq.w	800fd6c <_dtoa_r+0x9c>
 80103ae:	601f      	str	r7, [r3, #0]
 80103b0:	e4dc      	b.n	800fd6c <_dtoa_r+0x9c>
 80103b2:	4627      	mov	r7, r4
 80103b4:	463b      	mov	r3, r7
 80103b6:	461f      	mov	r7, r3
 80103b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103bc:	2a39      	cmp	r2, #57	; 0x39
 80103be:	d107      	bne.n	80103d0 <_dtoa_r+0x700>
 80103c0:	9a08      	ldr	r2, [sp, #32]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d1f7      	bne.n	80103b6 <_dtoa_r+0x6e6>
 80103c6:	2230      	movs	r2, #48	; 0x30
 80103c8:	9908      	ldr	r1, [sp, #32]
 80103ca:	f108 0801 	add.w	r8, r8, #1
 80103ce:	700a      	strb	r2, [r1, #0]
 80103d0:	781a      	ldrb	r2, [r3, #0]
 80103d2:	3201      	adds	r2, #1
 80103d4:	701a      	strb	r2, [r3, #0]
 80103d6:	e79f      	b.n	8010318 <_dtoa_r+0x648>
 80103d8:	46c8      	mov	r8, r9
 80103da:	e7eb      	b.n	80103b4 <_dtoa_r+0x6e4>
 80103dc:	2200      	movs	r2, #0
 80103de:	4b72      	ldr	r3, [pc, #456]	; (80105a8 <_dtoa_r+0x8d8>)
 80103e0:	f7f0 f8e6 	bl	80005b0 <__aeabi_dmul>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103ec:	2200      	movs	r2, #0
 80103ee:	2300      	movs	r3, #0
 80103f0:	f7f0 fb46 	bl	8000a80 <__aeabi_dcmpeq>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d098      	beq.n	801032a <_dtoa_r+0x65a>
 80103f8:	e7cb      	b.n	8010392 <_dtoa_r+0x6c2>
 80103fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103fc:	2a00      	cmp	r2, #0
 80103fe:	f000 80cd 	beq.w	801059c <_dtoa_r+0x8cc>
 8010402:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010404:	2a01      	cmp	r2, #1
 8010406:	f300 80af 	bgt.w	8010568 <_dtoa_r+0x898>
 801040a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801040c:	2a00      	cmp	r2, #0
 801040e:	f000 80a7 	beq.w	8010560 <_dtoa_r+0x890>
 8010412:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010416:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010418:	9f06      	ldr	r7, [sp, #24]
 801041a:	9a06      	ldr	r2, [sp, #24]
 801041c:	2101      	movs	r1, #1
 801041e:	441a      	add	r2, r3
 8010420:	9206      	str	r2, [sp, #24]
 8010422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010424:	4628      	mov	r0, r5
 8010426:	441a      	add	r2, r3
 8010428:	9209      	str	r2, [sp, #36]	; 0x24
 801042a:	f001 f94b 	bl	80116c4 <__i2b>
 801042e:	4606      	mov	r6, r0
 8010430:	2f00      	cmp	r7, #0
 8010432:	dd0c      	ble.n	801044e <_dtoa_r+0x77e>
 8010434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010436:	2b00      	cmp	r3, #0
 8010438:	dd09      	ble.n	801044e <_dtoa_r+0x77e>
 801043a:	42bb      	cmp	r3, r7
 801043c:	bfa8      	it	ge
 801043e:	463b      	movge	r3, r7
 8010440:	9a06      	ldr	r2, [sp, #24]
 8010442:	1aff      	subs	r7, r7, r3
 8010444:	1ad2      	subs	r2, r2, r3
 8010446:	9206      	str	r2, [sp, #24]
 8010448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	9309      	str	r3, [sp, #36]	; 0x24
 801044e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010450:	b1f3      	cbz	r3, 8010490 <_dtoa_r+0x7c0>
 8010452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80a9 	beq.w	80105ac <_dtoa_r+0x8dc>
 801045a:	2c00      	cmp	r4, #0
 801045c:	dd10      	ble.n	8010480 <_dtoa_r+0x7b0>
 801045e:	4631      	mov	r1, r6
 8010460:	4622      	mov	r2, r4
 8010462:	4628      	mov	r0, r5
 8010464:	f001 f9e8 	bl	8011838 <__pow5mult>
 8010468:	4652      	mov	r2, sl
 801046a:	4601      	mov	r1, r0
 801046c:	4606      	mov	r6, r0
 801046e:	4628      	mov	r0, r5
 8010470:	f001 f93e 	bl	80116f0 <__multiply>
 8010474:	4680      	mov	r8, r0
 8010476:	4651      	mov	r1, sl
 8010478:	4628      	mov	r0, r5
 801047a:	f001 f81f 	bl	80114bc <_Bfree>
 801047e:	46c2      	mov	sl, r8
 8010480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010482:	1b1a      	subs	r2, r3, r4
 8010484:	d004      	beq.n	8010490 <_dtoa_r+0x7c0>
 8010486:	4651      	mov	r1, sl
 8010488:	4628      	mov	r0, r5
 801048a:	f001 f9d5 	bl	8011838 <__pow5mult>
 801048e:	4682      	mov	sl, r0
 8010490:	2101      	movs	r1, #1
 8010492:	4628      	mov	r0, r5
 8010494:	f001 f916 	bl	80116c4 <__i2b>
 8010498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801049a:	4604      	mov	r4, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	f340 8087 	ble.w	80105b0 <_dtoa_r+0x8e0>
 80104a2:	461a      	mov	r2, r3
 80104a4:	4601      	mov	r1, r0
 80104a6:	4628      	mov	r0, r5
 80104a8:	f001 f9c6 	bl	8011838 <__pow5mult>
 80104ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104ae:	4604      	mov	r4, r0
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	f340 8080 	ble.w	80105b6 <_dtoa_r+0x8e6>
 80104b6:	f04f 0800 	mov.w	r8, #0
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80104c0:	6918      	ldr	r0, [r3, #16]
 80104c2:	f001 f8b1 	bl	8011628 <__hi0bits>
 80104c6:	f1c0 0020 	rsb	r0, r0, #32
 80104ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104cc:	4418      	add	r0, r3
 80104ce:	f010 001f 	ands.w	r0, r0, #31
 80104d2:	f000 8092 	beq.w	80105fa <_dtoa_r+0x92a>
 80104d6:	f1c0 0320 	rsb	r3, r0, #32
 80104da:	2b04      	cmp	r3, #4
 80104dc:	f340 808a 	ble.w	80105f4 <_dtoa_r+0x924>
 80104e0:	f1c0 001c 	rsb	r0, r0, #28
 80104e4:	9b06      	ldr	r3, [sp, #24]
 80104e6:	4407      	add	r7, r0
 80104e8:	4403      	add	r3, r0
 80104ea:	9306      	str	r3, [sp, #24]
 80104ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ee:	4403      	add	r3, r0
 80104f0:	9309      	str	r3, [sp, #36]	; 0x24
 80104f2:	9b06      	ldr	r3, [sp, #24]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dd05      	ble.n	8010504 <_dtoa_r+0x834>
 80104f8:	4651      	mov	r1, sl
 80104fa:	461a      	mov	r2, r3
 80104fc:	4628      	mov	r0, r5
 80104fe:	f001 f9f5 	bl	80118ec <__lshift>
 8010502:	4682      	mov	sl, r0
 8010504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010506:	2b00      	cmp	r3, #0
 8010508:	dd05      	ble.n	8010516 <_dtoa_r+0x846>
 801050a:	4621      	mov	r1, r4
 801050c:	461a      	mov	r2, r3
 801050e:	4628      	mov	r0, r5
 8010510:	f001 f9ec 	bl	80118ec <__lshift>
 8010514:	4604      	mov	r4, r0
 8010516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010518:	2b00      	cmp	r3, #0
 801051a:	d070      	beq.n	80105fe <_dtoa_r+0x92e>
 801051c:	4621      	mov	r1, r4
 801051e:	4650      	mov	r0, sl
 8010520:	f001 fa50 	bl	80119c4 <__mcmp>
 8010524:	2800      	cmp	r0, #0
 8010526:	da6a      	bge.n	80105fe <_dtoa_r+0x92e>
 8010528:	2300      	movs	r3, #0
 801052a:	4651      	mov	r1, sl
 801052c:	220a      	movs	r2, #10
 801052e:	4628      	mov	r0, r5
 8010530:	f000 ffe6 	bl	8011500 <__multadd>
 8010534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010536:	4682      	mov	sl, r0
 8010538:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801053c:	2b00      	cmp	r3, #0
 801053e:	f000 8193 	beq.w	8010868 <_dtoa_r+0xb98>
 8010542:	4631      	mov	r1, r6
 8010544:	2300      	movs	r3, #0
 8010546:	220a      	movs	r2, #10
 8010548:	4628      	mov	r0, r5
 801054a:	f000 ffd9 	bl	8011500 <__multadd>
 801054e:	f1bb 0f00 	cmp.w	fp, #0
 8010552:	4606      	mov	r6, r0
 8010554:	f300 8093 	bgt.w	801067e <_dtoa_r+0x9ae>
 8010558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801055a:	2b02      	cmp	r3, #2
 801055c:	dc57      	bgt.n	801060e <_dtoa_r+0x93e>
 801055e:	e08e      	b.n	801067e <_dtoa_r+0x9ae>
 8010560:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010562:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010566:	e756      	b.n	8010416 <_dtoa_r+0x746>
 8010568:	9b02      	ldr	r3, [sp, #8]
 801056a:	1e5c      	subs	r4, r3, #1
 801056c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801056e:	42a3      	cmp	r3, r4
 8010570:	bfb7      	itett	lt
 8010572:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010574:	1b1c      	subge	r4, r3, r4
 8010576:	1ae2      	sublt	r2, r4, r3
 8010578:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801057a:	bfbe      	ittt	lt
 801057c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801057e:	189b      	addlt	r3, r3, r2
 8010580:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010582:	9b02      	ldr	r3, [sp, #8]
 8010584:	bfb8      	it	lt
 8010586:	2400      	movlt	r4, #0
 8010588:	2b00      	cmp	r3, #0
 801058a:	bfbb      	ittet	lt
 801058c:	9b06      	ldrlt	r3, [sp, #24]
 801058e:	9a02      	ldrlt	r2, [sp, #8]
 8010590:	9f06      	ldrge	r7, [sp, #24]
 8010592:	1a9f      	sublt	r7, r3, r2
 8010594:	bfac      	ite	ge
 8010596:	9b02      	ldrge	r3, [sp, #8]
 8010598:	2300      	movlt	r3, #0
 801059a:	e73e      	b.n	801041a <_dtoa_r+0x74a>
 801059c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801059e:	9f06      	ldr	r7, [sp, #24]
 80105a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80105a2:	e745      	b.n	8010430 <_dtoa_r+0x760>
 80105a4:	3fe00000 	.word	0x3fe00000
 80105a8:	40240000 	.word	0x40240000
 80105ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105ae:	e76a      	b.n	8010486 <_dtoa_r+0x7b6>
 80105b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	dc19      	bgt.n	80105ea <_dtoa_r+0x91a>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	b9bb      	cbnz	r3, 80105ea <_dtoa_r+0x91a>
 80105ba:	9b05      	ldr	r3, [sp, #20]
 80105bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105c0:	b99b      	cbnz	r3, 80105ea <_dtoa_r+0x91a>
 80105c2:	9b05      	ldr	r3, [sp, #20]
 80105c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105c8:	0d1b      	lsrs	r3, r3, #20
 80105ca:	051b      	lsls	r3, r3, #20
 80105cc:	b183      	cbz	r3, 80105f0 <_dtoa_r+0x920>
 80105ce:	f04f 0801 	mov.w	r8, #1
 80105d2:	9b06      	ldr	r3, [sp, #24]
 80105d4:	3301      	adds	r3, #1
 80105d6:	9306      	str	r3, [sp, #24]
 80105d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105da:	3301      	adds	r3, #1
 80105dc:	9309      	str	r3, [sp, #36]	; 0x24
 80105de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f47f af6a 	bne.w	80104ba <_dtoa_r+0x7ea>
 80105e6:	2001      	movs	r0, #1
 80105e8:	e76f      	b.n	80104ca <_dtoa_r+0x7fa>
 80105ea:	f04f 0800 	mov.w	r8, #0
 80105ee:	e7f6      	b.n	80105de <_dtoa_r+0x90e>
 80105f0:	4698      	mov	r8, r3
 80105f2:	e7f4      	b.n	80105de <_dtoa_r+0x90e>
 80105f4:	f43f af7d 	beq.w	80104f2 <_dtoa_r+0x822>
 80105f8:	4618      	mov	r0, r3
 80105fa:	301c      	adds	r0, #28
 80105fc:	e772      	b.n	80104e4 <_dtoa_r+0x814>
 80105fe:	9b02      	ldr	r3, [sp, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	dc36      	bgt.n	8010672 <_dtoa_r+0x9a2>
 8010604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010606:	2b02      	cmp	r3, #2
 8010608:	dd33      	ble.n	8010672 <_dtoa_r+0x9a2>
 801060a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801060e:	f1bb 0f00 	cmp.w	fp, #0
 8010612:	d10d      	bne.n	8010630 <_dtoa_r+0x960>
 8010614:	4621      	mov	r1, r4
 8010616:	465b      	mov	r3, fp
 8010618:	2205      	movs	r2, #5
 801061a:	4628      	mov	r0, r5
 801061c:	f000 ff70 	bl	8011500 <__multadd>
 8010620:	4601      	mov	r1, r0
 8010622:	4604      	mov	r4, r0
 8010624:	4650      	mov	r0, sl
 8010626:	f001 f9cd 	bl	80119c4 <__mcmp>
 801062a:	2800      	cmp	r0, #0
 801062c:	f73f adb6 	bgt.w	801019c <_dtoa_r+0x4cc>
 8010630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010632:	9f08      	ldr	r7, [sp, #32]
 8010634:	ea6f 0903 	mvn.w	r9, r3
 8010638:	f04f 0800 	mov.w	r8, #0
 801063c:	4621      	mov	r1, r4
 801063e:	4628      	mov	r0, r5
 8010640:	f000 ff3c 	bl	80114bc <_Bfree>
 8010644:	2e00      	cmp	r6, #0
 8010646:	f43f aea4 	beq.w	8010392 <_dtoa_r+0x6c2>
 801064a:	f1b8 0f00 	cmp.w	r8, #0
 801064e:	d005      	beq.n	801065c <_dtoa_r+0x98c>
 8010650:	45b0      	cmp	r8, r6
 8010652:	d003      	beq.n	801065c <_dtoa_r+0x98c>
 8010654:	4641      	mov	r1, r8
 8010656:	4628      	mov	r0, r5
 8010658:	f000 ff30 	bl	80114bc <_Bfree>
 801065c:	4631      	mov	r1, r6
 801065e:	4628      	mov	r0, r5
 8010660:	f000 ff2c 	bl	80114bc <_Bfree>
 8010664:	e695      	b.n	8010392 <_dtoa_r+0x6c2>
 8010666:	2400      	movs	r4, #0
 8010668:	4626      	mov	r6, r4
 801066a:	e7e1      	b.n	8010630 <_dtoa_r+0x960>
 801066c:	46c1      	mov	r9, r8
 801066e:	4626      	mov	r6, r4
 8010670:	e594      	b.n	801019c <_dtoa_r+0x4cc>
 8010672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010674:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 80fc 	beq.w	8010876 <_dtoa_r+0xba6>
 801067e:	2f00      	cmp	r7, #0
 8010680:	dd05      	ble.n	801068e <_dtoa_r+0x9be>
 8010682:	4631      	mov	r1, r6
 8010684:	463a      	mov	r2, r7
 8010686:	4628      	mov	r0, r5
 8010688:	f001 f930 	bl	80118ec <__lshift>
 801068c:	4606      	mov	r6, r0
 801068e:	f1b8 0f00 	cmp.w	r8, #0
 8010692:	d05c      	beq.n	801074e <_dtoa_r+0xa7e>
 8010694:	4628      	mov	r0, r5
 8010696:	6871      	ldr	r1, [r6, #4]
 8010698:	f000 fed0 	bl	801143c <_Balloc>
 801069c:	4607      	mov	r7, r0
 801069e:	b928      	cbnz	r0, 80106ac <_dtoa_r+0x9dc>
 80106a0:	4602      	mov	r2, r0
 80106a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80106a6:	4b7e      	ldr	r3, [pc, #504]	; (80108a0 <_dtoa_r+0xbd0>)
 80106a8:	f7ff bb26 	b.w	800fcf8 <_dtoa_r+0x28>
 80106ac:	6932      	ldr	r2, [r6, #16]
 80106ae:	f106 010c 	add.w	r1, r6, #12
 80106b2:	3202      	adds	r2, #2
 80106b4:	0092      	lsls	r2, r2, #2
 80106b6:	300c      	adds	r0, #12
 80106b8:	f7fd fb08 	bl	800dccc <memcpy>
 80106bc:	2201      	movs	r2, #1
 80106be:	4639      	mov	r1, r7
 80106c0:	4628      	mov	r0, r5
 80106c2:	f001 f913 	bl	80118ec <__lshift>
 80106c6:	46b0      	mov	r8, r6
 80106c8:	4606      	mov	r6, r0
 80106ca:	9b08      	ldr	r3, [sp, #32]
 80106cc:	3301      	adds	r3, #1
 80106ce:	9302      	str	r3, [sp, #8]
 80106d0:	9b08      	ldr	r3, [sp, #32]
 80106d2:	445b      	add	r3, fp
 80106d4:	930a      	str	r3, [sp, #40]	; 0x28
 80106d6:	9b04      	ldr	r3, [sp, #16]
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	9309      	str	r3, [sp, #36]	; 0x24
 80106de:	9b02      	ldr	r3, [sp, #8]
 80106e0:	4621      	mov	r1, r4
 80106e2:	4650      	mov	r0, sl
 80106e4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80106e8:	f7ff fa62 	bl	800fbb0 <quorem>
 80106ec:	4603      	mov	r3, r0
 80106ee:	4641      	mov	r1, r8
 80106f0:	3330      	adds	r3, #48	; 0x30
 80106f2:	9004      	str	r0, [sp, #16]
 80106f4:	4650      	mov	r0, sl
 80106f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80106f8:	f001 f964 	bl	80119c4 <__mcmp>
 80106fc:	4632      	mov	r2, r6
 80106fe:	9006      	str	r0, [sp, #24]
 8010700:	4621      	mov	r1, r4
 8010702:	4628      	mov	r0, r5
 8010704:	f001 f97a 	bl	80119fc <__mdiff>
 8010708:	68c2      	ldr	r2, [r0, #12]
 801070a:	4607      	mov	r7, r0
 801070c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801070e:	bb02      	cbnz	r2, 8010752 <_dtoa_r+0xa82>
 8010710:	4601      	mov	r1, r0
 8010712:	4650      	mov	r0, sl
 8010714:	f001 f956 	bl	80119c4 <__mcmp>
 8010718:	4602      	mov	r2, r0
 801071a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801071c:	4639      	mov	r1, r7
 801071e:	4628      	mov	r0, r5
 8010720:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010724:	f000 feca 	bl	80114bc <_Bfree>
 8010728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801072a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801072c:	9f02      	ldr	r7, [sp, #8]
 801072e:	ea43 0102 	orr.w	r1, r3, r2
 8010732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010734:	430b      	orrs	r3, r1
 8010736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010738:	d10d      	bne.n	8010756 <_dtoa_r+0xa86>
 801073a:	2b39      	cmp	r3, #57	; 0x39
 801073c:	d027      	beq.n	801078e <_dtoa_r+0xabe>
 801073e:	9a06      	ldr	r2, [sp, #24]
 8010740:	2a00      	cmp	r2, #0
 8010742:	dd01      	ble.n	8010748 <_dtoa_r+0xa78>
 8010744:	9b04      	ldr	r3, [sp, #16]
 8010746:	3331      	adds	r3, #49	; 0x31
 8010748:	f88b 3000 	strb.w	r3, [fp]
 801074c:	e776      	b.n	801063c <_dtoa_r+0x96c>
 801074e:	4630      	mov	r0, r6
 8010750:	e7b9      	b.n	80106c6 <_dtoa_r+0x9f6>
 8010752:	2201      	movs	r2, #1
 8010754:	e7e2      	b.n	801071c <_dtoa_r+0xa4c>
 8010756:	9906      	ldr	r1, [sp, #24]
 8010758:	2900      	cmp	r1, #0
 801075a:	db04      	blt.n	8010766 <_dtoa_r+0xa96>
 801075c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801075e:	4301      	orrs	r1, r0
 8010760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010762:	4301      	orrs	r1, r0
 8010764:	d120      	bne.n	80107a8 <_dtoa_r+0xad8>
 8010766:	2a00      	cmp	r2, #0
 8010768:	ddee      	ble.n	8010748 <_dtoa_r+0xa78>
 801076a:	4651      	mov	r1, sl
 801076c:	2201      	movs	r2, #1
 801076e:	4628      	mov	r0, r5
 8010770:	9302      	str	r3, [sp, #8]
 8010772:	f001 f8bb 	bl	80118ec <__lshift>
 8010776:	4621      	mov	r1, r4
 8010778:	4682      	mov	sl, r0
 801077a:	f001 f923 	bl	80119c4 <__mcmp>
 801077e:	2800      	cmp	r0, #0
 8010780:	9b02      	ldr	r3, [sp, #8]
 8010782:	dc02      	bgt.n	801078a <_dtoa_r+0xaba>
 8010784:	d1e0      	bne.n	8010748 <_dtoa_r+0xa78>
 8010786:	07da      	lsls	r2, r3, #31
 8010788:	d5de      	bpl.n	8010748 <_dtoa_r+0xa78>
 801078a:	2b39      	cmp	r3, #57	; 0x39
 801078c:	d1da      	bne.n	8010744 <_dtoa_r+0xa74>
 801078e:	2339      	movs	r3, #57	; 0x39
 8010790:	f88b 3000 	strb.w	r3, [fp]
 8010794:	463b      	mov	r3, r7
 8010796:	461f      	mov	r7, r3
 8010798:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801079c:	3b01      	subs	r3, #1
 801079e:	2a39      	cmp	r2, #57	; 0x39
 80107a0:	d050      	beq.n	8010844 <_dtoa_r+0xb74>
 80107a2:	3201      	adds	r2, #1
 80107a4:	701a      	strb	r2, [r3, #0]
 80107a6:	e749      	b.n	801063c <_dtoa_r+0x96c>
 80107a8:	2a00      	cmp	r2, #0
 80107aa:	dd03      	ble.n	80107b4 <_dtoa_r+0xae4>
 80107ac:	2b39      	cmp	r3, #57	; 0x39
 80107ae:	d0ee      	beq.n	801078e <_dtoa_r+0xabe>
 80107b0:	3301      	adds	r3, #1
 80107b2:	e7c9      	b.n	8010748 <_dtoa_r+0xa78>
 80107b4:	9a02      	ldr	r2, [sp, #8]
 80107b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80107bc:	428a      	cmp	r2, r1
 80107be:	d02a      	beq.n	8010816 <_dtoa_r+0xb46>
 80107c0:	4651      	mov	r1, sl
 80107c2:	2300      	movs	r3, #0
 80107c4:	220a      	movs	r2, #10
 80107c6:	4628      	mov	r0, r5
 80107c8:	f000 fe9a 	bl	8011500 <__multadd>
 80107cc:	45b0      	cmp	r8, r6
 80107ce:	4682      	mov	sl, r0
 80107d0:	f04f 0300 	mov.w	r3, #0
 80107d4:	f04f 020a 	mov.w	r2, #10
 80107d8:	4641      	mov	r1, r8
 80107da:	4628      	mov	r0, r5
 80107dc:	d107      	bne.n	80107ee <_dtoa_r+0xb1e>
 80107de:	f000 fe8f 	bl	8011500 <__multadd>
 80107e2:	4680      	mov	r8, r0
 80107e4:	4606      	mov	r6, r0
 80107e6:	9b02      	ldr	r3, [sp, #8]
 80107e8:	3301      	adds	r3, #1
 80107ea:	9302      	str	r3, [sp, #8]
 80107ec:	e777      	b.n	80106de <_dtoa_r+0xa0e>
 80107ee:	f000 fe87 	bl	8011500 <__multadd>
 80107f2:	4631      	mov	r1, r6
 80107f4:	4680      	mov	r8, r0
 80107f6:	2300      	movs	r3, #0
 80107f8:	220a      	movs	r2, #10
 80107fa:	4628      	mov	r0, r5
 80107fc:	f000 fe80 	bl	8011500 <__multadd>
 8010800:	4606      	mov	r6, r0
 8010802:	e7f0      	b.n	80107e6 <_dtoa_r+0xb16>
 8010804:	f1bb 0f00 	cmp.w	fp, #0
 8010808:	bfcc      	ite	gt
 801080a:	465f      	movgt	r7, fp
 801080c:	2701      	movle	r7, #1
 801080e:	f04f 0800 	mov.w	r8, #0
 8010812:	9a08      	ldr	r2, [sp, #32]
 8010814:	4417      	add	r7, r2
 8010816:	4651      	mov	r1, sl
 8010818:	2201      	movs	r2, #1
 801081a:	4628      	mov	r0, r5
 801081c:	9302      	str	r3, [sp, #8]
 801081e:	f001 f865 	bl	80118ec <__lshift>
 8010822:	4621      	mov	r1, r4
 8010824:	4682      	mov	sl, r0
 8010826:	f001 f8cd 	bl	80119c4 <__mcmp>
 801082a:	2800      	cmp	r0, #0
 801082c:	dcb2      	bgt.n	8010794 <_dtoa_r+0xac4>
 801082e:	d102      	bne.n	8010836 <_dtoa_r+0xb66>
 8010830:	9b02      	ldr	r3, [sp, #8]
 8010832:	07db      	lsls	r3, r3, #31
 8010834:	d4ae      	bmi.n	8010794 <_dtoa_r+0xac4>
 8010836:	463b      	mov	r3, r7
 8010838:	461f      	mov	r7, r3
 801083a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801083e:	2a30      	cmp	r2, #48	; 0x30
 8010840:	d0fa      	beq.n	8010838 <_dtoa_r+0xb68>
 8010842:	e6fb      	b.n	801063c <_dtoa_r+0x96c>
 8010844:	9a08      	ldr	r2, [sp, #32]
 8010846:	429a      	cmp	r2, r3
 8010848:	d1a5      	bne.n	8010796 <_dtoa_r+0xac6>
 801084a:	2331      	movs	r3, #49	; 0x31
 801084c:	f109 0901 	add.w	r9, r9, #1
 8010850:	7013      	strb	r3, [r2, #0]
 8010852:	e6f3      	b.n	801063c <_dtoa_r+0x96c>
 8010854:	4b13      	ldr	r3, [pc, #76]	; (80108a4 <_dtoa_r+0xbd4>)
 8010856:	f7ff baa7 	b.w	800fda8 <_dtoa_r+0xd8>
 801085a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801085c:	2b00      	cmp	r3, #0
 801085e:	f47f aa80 	bne.w	800fd62 <_dtoa_r+0x92>
 8010862:	4b11      	ldr	r3, [pc, #68]	; (80108a8 <_dtoa_r+0xbd8>)
 8010864:	f7ff baa0 	b.w	800fda8 <_dtoa_r+0xd8>
 8010868:	f1bb 0f00 	cmp.w	fp, #0
 801086c:	dc03      	bgt.n	8010876 <_dtoa_r+0xba6>
 801086e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010870:	2b02      	cmp	r3, #2
 8010872:	f73f aecc 	bgt.w	801060e <_dtoa_r+0x93e>
 8010876:	9f08      	ldr	r7, [sp, #32]
 8010878:	4621      	mov	r1, r4
 801087a:	4650      	mov	r0, sl
 801087c:	f7ff f998 	bl	800fbb0 <quorem>
 8010880:	9a08      	ldr	r2, [sp, #32]
 8010882:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010886:	f807 3b01 	strb.w	r3, [r7], #1
 801088a:	1aba      	subs	r2, r7, r2
 801088c:	4593      	cmp	fp, r2
 801088e:	ddb9      	ble.n	8010804 <_dtoa_r+0xb34>
 8010890:	4651      	mov	r1, sl
 8010892:	2300      	movs	r3, #0
 8010894:	220a      	movs	r2, #10
 8010896:	4628      	mov	r0, r5
 8010898:	f000 fe32 	bl	8011500 <__multadd>
 801089c:	4682      	mov	sl, r0
 801089e:	e7eb      	b.n	8010878 <_dtoa_r+0xba8>
 80108a0:	08013bb0 	.word	0x08013bb0
 80108a4:	08013970 	.word	0x08013970
 80108a8:	08013b2d 	.word	0x08013b2d

080108ac <__sflush_r>:
 80108ac:	898a      	ldrh	r2, [r1, #12]
 80108ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b2:	4605      	mov	r5, r0
 80108b4:	0710      	lsls	r0, r2, #28
 80108b6:	460c      	mov	r4, r1
 80108b8:	d458      	bmi.n	801096c <__sflush_r+0xc0>
 80108ba:	684b      	ldr	r3, [r1, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dc05      	bgt.n	80108cc <__sflush_r+0x20>
 80108c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dc02      	bgt.n	80108cc <__sflush_r+0x20>
 80108c6:	2000      	movs	r0, #0
 80108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ce:	2e00      	cmp	r6, #0
 80108d0:	d0f9      	beq.n	80108c6 <__sflush_r+0x1a>
 80108d2:	2300      	movs	r3, #0
 80108d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d8:	682f      	ldr	r7, [r5, #0]
 80108da:	602b      	str	r3, [r5, #0]
 80108dc:	d032      	beq.n	8010944 <__sflush_r+0x98>
 80108de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108e0:	89a3      	ldrh	r3, [r4, #12]
 80108e2:	075a      	lsls	r2, r3, #29
 80108e4:	d505      	bpl.n	80108f2 <__sflush_r+0x46>
 80108e6:	6863      	ldr	r3, [r4, #4]
 80108e8:	1ac0      	subs	r0, r0, r3
 80108ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108ec:	b10b      	cbz	r3, 80108f2 <__sflush_r+0x46>
 80108ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108f0:	1ac0      	subs	r0, r0, r3
 80108f2:	2300      	movs	r3, #0
 80108f4:	4602      	mov	r2, r0
 80108f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f8:	4628      	mov	r0, r5
 80108fa:	6a21      	ldr	r1, [r4, #32]
 80108fc:	47b0      	blx	r6
 80108fe:	1c43      	adds	r3, r0, #1
 8010900:	89a3      	ldrh	r3, [r4, #12]
 8010902:	d106      	bne.n	8010912 <__sflush_r+0x66>
 8010904:	6829      	ldr	r1, [r5, #0]
 8010906:	291d      	cmp	r1, #29
 8010908:	d82c      	bhi.n	8010964 <__sflush_r+0xb8>
 801090a:	4a2a      	ldr	r2, [pc, #168]	; (80109b4 <__sflush_r+0x108>)
 801090c:	40ca      	lsrs	r2, r1
 801090e:	07d6      	lsls	r6, r2, #31
 8010910:	d528      	bpl.n	8010964 <__sflush_r+0xb8>
 8010912:	2200      	movs	r2, #0
 8010914:	6062      	str	r2, [r4, #4]
 8010916:	6922      	ldr	r2, [r4, #16]
 8010918:	04d9      	lsls	r1, r3, #19
 801091a:	6022      	str	r2, [r4, #0]
 801091c:	d504      	bpl.n	8010928 <__sflush_r+0x7c>
 801091e:	1c42      	adds	r2, r0, #1
 8010920:	d101      	bne.n	8010926 <__sflush_r+0x7a>
 8010922:	682b      	ldr	r3, [r5, #0]
 8010924:	b903      	cbnz	r3, 8010928 <__sflush_r+0x7c>
 8010926:	6560      	str	r0, [r4, #84]	; 0x54
 8010928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801092a:	602f      	str	r7, [r5, #0]
 801092c:	2900      	cmp	r1, #0
 801092e:	d0ca      	beq.n	80108c6 <__sflush_r+0x1a>
 8010930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010934:	4299      	cmp	r1, r3
 8010936:	d002      	beq.n	801093e <__sflush_r+0x92>
 8010938:	4628      	mov	r0, r5
 801093a:	f7fd f9dd 	bl	800dcf8 <_free_r>
 801093e:	2000      	movs	r0, #0
 8010940:	6360      	str	r0, [r4, #52]	; 0x34
 8010942:	e7c1      	b.n	80108c8 <__sflush_r+0x1c>
 8010944:	6a21      	ldr	r1, [r4, #32]
 8010946:	2301      	movs	r3, #1
 8010948:	4628      	mov	r0, r5
 801094a:	47b0      	blx	r6
 801094c:	1c41      	adds	r1, r0, #1
 801094e:	d1c7      	bne.n	80108e0 <__sflush_r+0x34>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d0c4      	beq.n	80108e0 <__sflush_r+0x34>
 8010956:	2b1d      	cmp	r3, #29
 8010958:	d001      	beq.n	801095e <__sflush_r+0xb2>
 801095a:	2b16      	cmp	r3, #22
 801095c:	d101      	bne.n	8010962 <__sflush_r+0xb6>
 801095e:	602f      	str	r7, [r5, #0]
 8010960:	e7b1      	b.n	80108c6 <__sflush_r+0x1a>
 8010962:	89a3      	ldrh	r3, [r4, #12]
 8010964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	e7ad      	b.n	80108c8 <__sflush_r+0x1c>
 801096c:	690f      	ldr	r7, [r1, #16]
 801096e:	2f00      	cmp	r7, #0
 8010970:	d0a9      	beq.n	80108c6 <__sflush_r+0x1a>
 8010972:	0793      	lsls	r3, r2, #30
 8010974:	bf18      	it	ne
 8010976:	2300      	movne	r3, #0
 8010978:	680e      	ldr	r6, [r1, #0]
 801097a:	bf08      	it	eq
 801097c:	694b      	ldreq	r3, [r1, #20]
 801097e:	eba6 0807 	sub.w	r8, r6, r7
 8010982:	600f      	str	r7, [r1, #0]
 8010984:	608b      	str	r3, [r1, #8]
 8010986:	f1b8 0f00 	cmp.w	r8, #0
 801098a:	dd9c      	ble.n	80108c6 <__sflush_r+0x1a>
 801098c:	4643      	mov	r3, r8
 801098e:	463a      	mov	r2, r7
 8010990:	4628      	mov	r0, r5
 8010992:	6a21      	ldr	r1, [r4, #32]
 8010994:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010996:	47b0      	blx	r6
 8010998:	2800      	cmp	r0, #0
 801099a:	dc06      	bgt.n	80109aa <__sflush_r+0xfe>
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109a6:	81a3      	strh	r3, [r4, #12]
 80109a8:	e78e      	b.n	80108c8 <__sflush_r+0x1c>
 80109aa:	4407      	add	r7, r0
 80109ac:	eba8 0800 	sub.w	r8, r8, r0
 80109b0:	e7e9      	b.n	8010986 <__sflush_r+0xda>
 80109b2:	bf00      	nop
 80109b4:	20400001 	.word	0x20400001

080109b8 <_fflush_r>:
 80109b8:	b538      	push	{r3, r4, r5, lr}
 80109ba:	690b      	ldr	r3, [r1, #16]
 80109bc:	4605      	mov	r5, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	b913      	cbnz	r3, 80109c8 <_fflush_r+0x10>
 80109c2:	2500      	movs	r5, #0
 80109c4:	4628      	mov	r0, r5
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
 80109c8:	b118      	cbz	r0, 80109d2 <_fflush_r+0x1a>
 80109ca:	6983      	ldr	r3, [r0, #24]
 80109cc:	b90b      	cbnz	r3, 80109d2 <_fflush_r+0x1a>
 80109ce:	f000 f887 	bl	8010ae0 <__sinit>
 80109d2:	4b14      	ldr	r3, [pc, #80]	; (8010a24 <_fflush_r+0x6c>)
 80109d4:	429c      	cmp	r4, r3
 80109d6:	d11b      	bne.n	8010a10 <_fflush_r+0x58>
 80109d8:	686c      	ldr	r4, [r5, #4]
 80109da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0ef      	beq.n	80109c2 <_fflush_r+0xa>
 80109e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e4:	07d0      	lsls	r0, r2, #31
 80109e6:	d404      	bmi.n	80109f2 <_fflush_r+0x3a>
 80109e8:	0599      	lsls	r1, r3, #22
 80109ea:	d402      	bmi.n	80109f2 <_fflush_r+0x3a>
 80109ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ee:	f000 fc92 	bl	8011316 <__retarget_lock_acquire_recursive>
 80109f2:	4628      	mov	r0, r5
 80109f4:	4621      	mov	r1, r4
 80109f6:	f7ff ff59 	bl	80108ac <__sflush_r>
 80109fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109fc:	4605      	mov	r5, r0
 80109fe:	07da      	lsls	r2, r3, #31
 8010a00:	d4e0      	bmi.n	80109c4 <_fflush_r+0xc>
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	059b      	lsls	r3, r3, #22
 8010a06:	d4dd      	bmi.n	80109c4 <_fflush_r+0xc>
 8010a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a0a:	f000 fc85 	bl	8011318 <__retarget_lock_release_recursive>
 8010a0e:	e7d9      	b.n	80109c4 <_fflush_r+0xc>
 8010a10:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <_fflush_r+0x70>)
 8010a12:	429c      	cmp	r4, r3
 8010a14:	d101      	bne.n	8010a1a <_fflush_r+0x62>
 8010a16:	68ac      	ldr	r4, [r5, #8]
 8010a18:	e7df      	b.n	80109da <_fflush_r+0x22>
 8010a1a:	4b04      	ldr	r3, [pc, #16]	; (8010a2c <_fflush_r+0x74>)
 8010a1c:	429c      	cmp	r4, r3
 8010a1e:	bf08      	it	eq
 8010a20:	68ec      	ldreq	r4, [r5, #12]
 8010a22:	e7da      	b.n	80109da <_fflush_r+0x22>
 8010a24:	08013be4 	.word	0x08013be4
 8010a28:	08013c04 	.word	0x08013c04
 8010a2c:	08013bc4 	.word	0x08013bc4

08010a30 <std>:
 8010a30:	2300      	movs	r3, #0
 8010a32:	b510      	push	{r4, lr}
 8010a34:	4604      	mov	r4, r0
 8010a36:	e9c0 3300 	strd	r3, r3, [r0]
 8010a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a3e:	6083      	str	r3, [r0, #8]
 8010a40:	8181      	strh	r1, [r0, #12]
 8010a42:	6643      	str	r3, [r0, #100]	; 0x64
 8010a44:	81c2      	strh	r2, [r0, #14]
 8010a46:	6183      	str	r3, [r0, #24]
 8010a48:	4619      	mov	r1, r3
 8010a4a:	2208      	movs	r2, #8
 8010a4c:	305c      	adds	r0, #92	; 0x5c
 8010a4e:	f7fd f94b 	bl	800dce8 <memset>
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x38>)
 8010a54:	6224      	str	r4, [r4, #32]
 8010a56:	6263      	str	r3, [r4, #36]	; 0x24
 8010a58:	4b04      	ldr	r3, [pc, #16]	; (8010a6c <std+0x3c>)
 8010a5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a5c:	4b04      	ldr	r3, [pc, #16]	; (8010a70 <std+0x40>)
 8010a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a60:	4b04      	ldr	r3, [pc, #16]	; (8010a74 <std+0x44>)
 8010a62:	6323      	str	r3, [r4, #48]	; 0x30
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	bf00      	nop
 8010a68:	0801233d 	.word	0x0801233d
 8010a6c:	0801235f 	.word	0x0801235f
 8010a70:	08012397 	.word	0x08012397
 8010a74:	080123bb 	.word	0x080123bb

08010a78 <_cleanup_r>:
 8010a78:	4901      	ldr	r1, [pc, #4]	; (8010a80 <_cleanup_r+0x8>)
 8010a7a:	f000 b8c1 	b.w	8010c00 <_fwalk_reent>
 8010a7e:	bf00      	nop
 8010a80:	080109b9 	.word	0x080109b9

08010a84 <__sfmoreglue>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	2568      	movs	r5, #104	; 0x68
 8010a88:	1e4a      	subs	r2, r1, #1
 8010a8a:	4355      	muls	r5, r2
 8010a8c:	460e      	mov	r6, r1
 8010a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a92:	f7fd f97d 	bl	800dd90 <_malloc_r>
 8010a96:	4604      	mov	r4, r0
 8010a98:	b140      	cbz	r0, 8010aac <__sfmoreglue+0x28>
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8010aa0:	300c      	adds	r0, #12
 8010aa2:	60a0      	str	r0, [r4, #8]
 8010aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa8:	f7fd f91e 	bl	800dce8 <memset>
 8010aac:	4620      	mov	r0, r4
 8010aae:	bd70      	pop	{r4, r5, r6, pc}

08010ab0 <__sfp_lock_acquire>:
 8010ab0:	4801      	ldr	r0, [pc, #4]	; (8010ab8 <__sfp_lock_acquire+0x8>)
 8010ab2:	f000 bc30 	b.w	8011316 <__retarget_lock_acquire_recursive>
 8010ab6:	bf00      	nop
 8010ab8:	200013f4 	.word	0x200013f4

08010abc <__sfp_lock_release>:
 8010abc:	4801      	ldr	r0, [pc, #4]	; (8010ac4 <__sfp_lock_release+0x8>)
 8010abe:	f000 bc2b 	b.w	8011318 <__retarget_lock_release_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	200013f4 	.word	0x200013f4

08010ac8 <__sinit_lock_acquire>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	; (8010ad0 <__sinit_lock_acquire+0x8>)
 8010aca:	f000 bc24 	b.w	8011316 <__retarget_lock_acquire_recursive>
 8010ace:	bf00      	nop
 8010ad0:	200013ef 	.word	0x200013ef

08010ad4 <__sinit_lock_release>:
 8010ad4:	4801      	ldr	r0, [pc, #4]	; (8010adc <__sinit_lock_release+0x8>)
 8010ad6:	f000 bc1f 	b.w	8011318 <__retarget_lock_release_recursive>
 8010ada:	bf00      	nop
 8010adc:	200013ef 	.word	0x200013ef

08010ae0 <__sinit>:
 8010ae0:	b510      	push	{r4, lr}
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	f7ff fff0 	bl	8010ac8 <__sinit_lock_acquire>
 8010ae8:	69a3      	ldr	r3, [r4, #24]
 8010aea:	b11b      	cbz	r3, 8010af4 <__sinit+0x14>
 8010aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010af0:	f7ff bff0 	b.w	8010ad4 <__sinit_lock_release>
 8010af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af8:	6523      	str	r3, [r4, #80]	; 0x50
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <__sinit+0x68>)
 8010afc:	4a13      	ldr	r2, [pc, #76]	; (8010b4c <__sinit+0x6c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b02:	42a3      	cmp	r3, r4
 8010b04:	bf08      	it	eq
 8010b06:	2301      	moveq	r3, #1
 8010b08:	4620      	mov	r0, r4
 8010b0a:	bf08      	it	eq
 8010b0c:	61a3      	streq	r3, [r4, #24]
 8010b0e:	f000 f81f 	bl	8010b50 <__sfp>
 8010b12:	6060      	str	r0, [r4, #4]
 8010b14:	4620      	mov	r0, r4
 8010b16:	f000 f81b 	bl	8010b50 <__sfp>
 8010b1a:	60a0      	str	r0, [r4, #8]
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 f817 	bl	8010b50 <__sfp>
 8010b22:	2200      	movs	r2, #0
 8010b24:	2104      	movs	r1, #4
 8010b26:	60e0      	str	r0, [r4, #12]
 8010b28:	6860      	ldr	r0, [r4, #4]
 8010b2a:	f7ff ff81 	bl	8010a30 <std>
 8010b2e:	2201      	movs	r2, #1
 8010b30:	2109      	movs	r1, #9
 8010b32:	68a0      	ldr	r0, [r4, #8]
 8010b34:	f7ff ff7c 	bl	8010a30 <std>
 8010b38:	2202      	movs	r2, #2
 8010b3a:	2112      	movs	r1, #18
 8010b3c:	68e0      	ldr	r0, [r4, #12]
 8010b3e:	f7ff ff77 	bl	8010a30 <std>
 8010b42:	2301      	movs	r3, #1
 8010b44:	61a3      	str	r3, [r4, #24]
 8010b46:	e7d1      	b.n	8010aec <__sinit+0xc>
 8010b48:	0801395c 	.word	0x0801395c
 8010b4c:	08010a79 	.word	0x08010a79

08010b50 <__sfp>:
 8010b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b52:	4607      	mov	r7, r0
 8010b54:	f7ff ffac 	bl	8010ab0 <__sfp_lock_acquire>
 8010b58:	4b1e      	ldr	r3, [pc, #120]	; (8010bd4 <__sfp+0x84>)
 8010b5a:	681e      	ldr	r6, [r3, #0]
 8010b5c:	69b3      	ldr	r3, [r6, #24]
 8010b5e:	b913      	cbnz	r3, 8010b66 <__sfp+0x16>
 8010b60:	4630      	mov	r0, r6
 8010b62:	f7ff ffbd 	bl	8010ae0 <__sinit>
 8010b66:	3648      	adds	r6, #72	; 0x48
 8010b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	d503      	bpl.n	8010b78 <__sfp+0x28>
 8010b70:	6833      	ldr	r3, [r6, #0]
 8010b72:	b30b      	cbz	r3, 8010bb8 <__sfp+0x68>
 8010b74:	6836      	ldr	r6, [r6, #0]
 8010b76:	e7f7      	b.n	8010b68 <__sfp+0x18>
 8010b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b7c:	b9d5      	cbnz	r5, 8010bb4 <__sfp+0x64>
 8010b7e:	4b16      	ldr	r3, [pc, #88]	; (8010bd8 <__sfp+0x88>)
 8010b80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b84:	60e3      	str	r3, [r4, #12]
 8010b86:	6665      	str	r5, [r4, #100]	; 0x64
 8010b88:	f000 fbc4 	bl	8011314 <__retarget_lock_init_recursive>
 8010b8c:	f7ff ff96 	bl	8010abc <__sfp_lock_release>
 8010b90:	2208      	movs	r2, #8
 8010b92:	4629      	mov	r1, r5
 8010b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b9c:	6025      	str	r5, [r4, #0]
 8010b9e:	61a5      	str	r5, [r4, #24]
 8010ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ba4:	f7fd f8a0 	bl	800dce8 <memset>
 8010ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb4:	3468      	adds	r4, #104	; 0x68
 8010bb6:	e7d9      	b.n	8010b6c <__sfp+0x1c>
 8010bb8:	2104      	movs	r1, #4
 8010bba:	4638      	mov	r0, r7
 8010bbc:	f7ff ff62 	bl	8010a84 <__sfmoreglue>
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	6030      	str	r0, [r6, #0]
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d1d5      	bne.n	8010b74 <__sfp+0x24>
 8010bc8:	f7ff ff78 	bl	8010abc <__sfp_lock_release>
 8010bcc:	230c      	movs	r3, #12
 8010bce:	603b      	str	r3, [r7, #0]
 8010bd0:	e7ee      	b.n	8010bb0 <__sfp+0x60>
 8010bd2:	bf00      	nop
 8010bd4:	0801395c 	.word	0x0801395c
 8010bd8:	ffff0001 	.word	0xffff0001

08010bdc <fiprintf>:
 8010bdc:	b40e      	push	{r1, r2, r3}
 8010bde:	b503      	push	{r0, r1, lr}
 8010be0:	4601      	mov	r1, r0
 8010be2:	ab03      	add	r3, sp, #12
 8010be4:	4805      	ldr	r0, [pc, #20]	; (8010bfc <fiprintf+0x20>)
 8010be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bea:	6800      	ldr	r0, [r0, #0]
 8010bec:	9301      	str	r3, [sp, #4]
 8010bee:	f001 fa6f 	bl	80120d0 <_vfiprintf_r>
 8010bf2:	b002      	add	sp, #8
 8010bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bf8:	b003      	add	sp, #12
 8010bfa:	4770      	bx	lr
 8010bfc:	200000d4 	.word	0x200000d4

08010c00 <_fwalk_reent>:
 8010c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c04:	4606      	mov	r6, r0
 8010c06:	4688      	mov	r8, r1
 8010c08:	2700      	movs	r7, #0
 8010c0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c12:	f1b9 0901 	subs.w	r9, r9, #1
 8010c16:	d505      	bpl.n	8010c24 <_fwalk_reent+0x24>
 8010c18:	6824      	ldr	r4, [r4, #0]
 8010c1a:	2c00      	cmp	r4, #0
 8010c1c:	d1f7      	bne.n	8010c0e <_fwalk_reent+0xe>
 8010c1e:	4638      	mov	r0, r7
 8010c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c24:	89ab      	ldrh	r3, [r5, #12]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d907      	bls.n	8010c3a <_fwalk_reent+0x3a>
 8010c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	d003      	beq.n	8010c3a <_fwalk_reent+0x3a>
 8010c32:	4629      	mov	r1, r5
 8010c34:	4630      	mov	r0, r6
 8010c36:	47c0      	blx	r8
 8010c38:	4307      	orrs	r7, r0
 8010c3a:	3568      	adds	r5, #104	; 0x68
 8010c3c:	e7e9      	b.n	8010c12 <_fwalk_reent+0x12>

08010c3e <rshift>:
 8010c3e:	6903      	ldr	r3, [r0, #16]
 8010c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c48:	f100 0414 	add.w	r4, r0, #20
 8010c4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c50:	dd46      	ble.n	8010ce0 <rshift+0xa2>
 8010c52:	f011 011f 	ands.w	r1, r1, #31
 8010c56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c5e:	d10c      	bne.n	8010c7a <rshift+0x3c>
 8010c60:	4629      	mov	r1, r5
 8010c62:	f100 0710 	add.w	r7, r0, #16
 8010c66:	42b1      	cmp	r1, r6
 8010c68:	d335      	bcc.n	8010cd6 <rshift+0x98>
 8010c6a:	1a9b      	subs	r3, r3, r2
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	1eea      	subs	r2, r5, #3
 8010c70:	4296      	cmp	r6, r2
 8010c72:	bf38      	it	cc
 8010c74:	2300      	movcc	r3, #0
 8010c76:	4423      	add	r3, r4
 8010c78:	e015      	b.n	8010ca6 <rshift+0x68>
 8010c7a:	46a1      	mov	r9, r4
 8010c7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010c80:	f1c1 0820 	rsb	r8, r1, #32
 8010c84:	40cf      	lsrs	r7, r1
 8010c86:	f105 0e04 	add.w	lr, r5, #4
 8010c8a:	4576      	cmp	r6, lr
 8010c8c:	46f4      	mov	ip, lr
 8010c8e:	d816      	bhi.n	8010cbe <rshift+0x80>
 8010c90:	1a9b      	subs	r3, r3, r2
 8010c92:	009a      	lsls	r2, r3, #2
 8010c94:	3a04      	subs	r2, #4
 8010c96:	3501      	adds	r5, #1
 8010c98:	42ae      	cmp	r6, r5
 8010c9a:	bf38      	it	cc
 8010c9c:	2200      	movcc	r2, #0
 8010c9e:	18a3      	adds	r3, r4, r2
 8010ca0:	50a7      	str	r7, [r4, r2]
 8010ca2:	b107      	cbz	r7, 8010ca6 <rshift+0x68>
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	42a3      	cmp	r3, r4
 8010ca8:	eba3 0204 	sub.w	r2, r3, r4
 8010cac:	bf08      	it	eq
 8010cae:	2300      	moveq	r3, #0
 8010cb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010cb4:	6102      	str	r2, [r0, #16]
 8010cb6:	bf08      	it	eq
 8010cb8:	6143      	streq	r3, [r0, #20]
 8010cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cbe:	f8dc c000 	ldr.w	ip, [ip]
 8010cc2:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cc6:	ea4c 0707 	orr.w	r7, ip, r7
 8010cca:	f849 7b04 	str.w	r7, [r9], #4
 8010cce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010cd2:	40cf      	lsrs	r7, r1
 8010cd4:	e7d9      	b.n	8010c8a <rshift+0x4c>
 8010cd6:	f851 cb04 	ldr.w	ip, [r1], #4
 8010cda:	f847 cf04 	str.w	ip, [r7, #4]!
 8010cde:	e7c2      	b.n	8010c66 <rshift+0x28>
 8010ce0:	4623      	mov	r3, r4
 8010ce2:	e7e0      	b.n	8010ca6 <rshift+0x68>

08010ce4 <__hexdig_fun>:
 8010ce4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010ce8:	2b09      	cmp	r3, #9
 8010cea:	d802      	bhi.n	8010cf2 <__hexdig_fun+0xe>
 8010cec:	3820      	subs	r0, #32
 8010cee:	b2c0      	uxtb	r0, r0
 8010cf0:	4770      	bx	lr
 8010cf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010cf6:	2b05      	cmp	r3, #5
 8010cf8:	d801      	bhi.n	8010cfe <__hexdig_fun+0x1a>
 8010cfa:	3847      	subs	r0, #71	; 0x47
 8010cfc:	e7f7      	b.n	8010cee <__hexdig_fun+0xa>
 8010cfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010d02:	2b05      	cmp	r3, #5
 8010d04:	d801      	bhi.n	8010d0a <__hexdig_fun+0x26>
 8010d06:	3827      	subs	r0, #39	; 0x27
 8010d08:	e7f1      	b.n	8010cee <__hexdig_fun+0xa>
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	4770      	bx	lr
	...

08010d10 <__gethex>:
 8010d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	b08b      	sub	sp, #44	; 0x2c
 8010d16:	9306      	str	r3, [sp, #24]
 8010d18:	4bb9      	ldr	r3, [pc, #740]	; (8011000 <__gethex+0x2f0>)
 8010d1a:	9002      	str	r0, [sp, #8]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	468b      	mov	fp, r1
 8010d20:	4618      	mov	r0, r3
 8010d22:	4690      	mov	r8, r2
 8010d24:	9303      	str	r3, [sp, #12]
 8010d26:	f7ef fa7f 	bl	8000228 <strlen>
 8010d2a:	4682      	mov	sl, r0
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	f8db 2000 	ldr.w	r2, [fp]
 8010d32:	4403      	add	r3, r0
 8010d34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d38:	9307      	str	r3, [sp, #28]
 8010d3a:	1c93      	adds	r3, r2, #2
 8010d3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d44:	32fe      	adds	r2, #254	; 0xfe
 8010d46:	18d1      	adds	r1, r2, r3
 8010d48:	461f      	mov	r7, r3
 8010d4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d4e:	9101      	str	r1, [sp, #4]
 8010d50:	2830      	cmp	r0, #48	; 0x30
 8010d52:	d0f8      	beq.n	8010d46 <__gethex+0x36>
 8010d54:	f7ff ffc6 	bl	8010ce4 <__hexdig_fun>
 8010d58:	4604      	mov	r4, r0
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d13a      	bne.n	8010dd4 <__gethex+0xc4>
 8010d5e:	4652      	mov	r2, sl
 8010d60:	4638      	mov	r0, r7
 8010d62:	9903      	ldr	r1, [sp, #12]
 8010d64:	f7fd ff26 	bl	800ebb4 <strncmp>
 8010d68:	4605      	mov	r5, r0
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	d166      	bne.n	8010e3c <__gethex+0x12c>
 8010d6e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010d72:	eb07 060a 	add.w	r6, r7, sl
 8010d76:	f7ff ffb5 	bl	8010ce4 <__hexdig_fun>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	d060      	beq.n	8010e40 <__gethex+0x130>
 8010d7e:	4633      	mov	r3, r6
 8010d80:	7818      	ldrb	r0, [r3, #0]
 8010d82:	461f      	mov	r7, r3
 8010d84:	2830      	cmp	r0, #48	; 0x30
 8010d86:	f103 0301 	add.w	r3, r3, #1
 8010d8a:	d0f9      	beq.n	8010d80 <__gethex+0x70>
 8010d8c:	f7ff ffaa 	bl	8010ce4 <__hexdig_fun>
 8010d90:	2301      	movs	r3, #1
 8010d92:	fab0 f480 	clz	r4, r0
 8010d96:	4635      	mov	r5, r6
 8010d98:	0964      	lsrs	r4, r4, #5
 8010d9a:	9301      	str	r3, [sp, #4]
 8010d9c:	463a      	mov	r2, r7
 8010d9e:	4616      	mov	r6, r2
 8010da0:	7830      	ldrb	r0, [r6, #0]
 8010da2:	3201      	adds	r2, #1
 8010da4:	f7ff ff9e 	bl	8010ce4 <__hexdig_fun>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d1f8      	bne.n	8010d9e <__gethex+0x8e>
 8010dac:	4652      	mov	r2, sl
 8010dae:	4630      	mov	r0, r6
 8010db0:	9903      	ldr	r1, [sp, #12]
 8010db2:	f7fd feff 	bl	800ebb4 <strncmp>
 8010db6:	b980      	cbnz	r0, 8010dda <__gethex+0xca>
 8010db8:	b94d      	cbnz	r5, 8010dce <__gethex+0xbe>
 8010dba:	eb06 050a 	add.w	r5, r6, sl
 8010dbe:	462a      	mov	r2, r5
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	7830      	ldrb	r0, [r6, #0]
 8010dc4:	3201      	adds	r2, #1
 8010dc6:	f7ff ff8d 	bl	8010ce4 <__hexdig_fun>
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d1f8      	bne.n	8010dc0 <__gethex+0xb0>
 8010dce:	1bad      	subs	r5, r5, r6
 8010dd0:	00ad      	lsls	r5, r5, #2
 8010dd2:	e004      	b.n	8010dde <__gethex+0xce>
 8010dd4:	2400      	movs	r4, #0
 8010dd6:	4625      	mov	r5, r4
 8010dd8:	e7e0      	b.n	8010d9c <__gethex+0x8c>
 8010dda:	2d00      	cmp	r5, #0
 8010ddc:	d1f7      	bne.n	8010dce <__gethex+0xbe>
 8010dde:	7833      	ldrb	r3, [r6, #0]
 8010de0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010de4:	2b50      	cmp	r3, #80	; 0x50
 8010de6:	d139      	bne.n	8010e5c <__gethex+0x14c>
 8010de8:	7873      	ldrb	r3, [r6, #1]
 8010dea:	2b2b      	cmp	r3, #43	; 0x2b
 8010dec:	d02a      	beq.n	8010e44 <__gethex+0x134>
 8010dee:	2b2d      	cmp	r3, #45	; 0x2d
 8010df0:	d02c      	beq.n	8010e4c <__gethex+0x13c>
 8010df2:	f04f 0900 	mov.w	r9, #0
 8010df6:	1c71      	adds	r1, r6, #1
 8010df8:	7808      	ldrb	r0, [r1, #0]
 8010dfa:	f7ff ff73 	bl	8010ce4 <__hexdig_fun>
 8010dfe:	1e43      	subs	r3, r0, #1
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b18      	cmp	r3, #24
 8010e04:	d82a      	bhi.n	8010e5c <__gethex+0x14c>
 8010e06:	f1a0 0210 	sub.w	r2, r0, #16
 8010e0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e0e:	f7ff ff69 	bl	8010ce4 <__hexdig_fun>
 8010e12:	1e43      	subs	r3, r0, #1
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	2b18      	cmp	r3, #24
 8010e18:	d91b      	bls.n	8010e52 <__gethex+0x142>
 8010e1a:	f1b9 0f00 	cmp.w	r9, #0
 8010e1e:	d000      	beq.n	8010e22 <__gethex+0x112>
 8010e20:	4252      	negs	r2, r2
 8010e22:	4415      	add	r5, r2
 8010e24:	f8cb 1000 	str.w	r1, [fp]
 8010e28:	b1d4      	cbz	r4, 8010e60 <__gethex+0x150>
 8010e2a:	9b01      	ldr	r3, [sp, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	bf14      	ite	ne
 8010e30:	2700      	movne	r7, #0
 8010e32:	2706      	moveq	r7, #6
 8010e34:	4638      	mov	r0, r7
 8010e36:	b00b      	add	sp, #44	; 0x2c
 8010e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3c:	463e      	mov	r6, r7
 8010e3e:	4625      	mov	r5, r4
 8010e40:	2401      	movs	r4, #1
 8010e42:	e7cc      	b.n	8010dde <__gethex+0xce>
 8010e44:	f04f 0900 	mov.w	r9, #0
 8010e48:	1cb1      	adds	r1, r6, #2
 8010e4a:	e7d5      	b.n	8010df8 <__gethex+0xe8>
 8010e4c:	f04f 0901 	mov.w	r9, #1
 8010e50:	e7fa      	b.n	8010e48 <__gethex+0x138>
 8010e52:	230a      	movs	r3, #10
 8010e54:	fb03 0202 	mla	r2, r3, r2, r0
 8010e58:	3a10      	subs	r2, #16
 8010e5a:	e7d6      	b.n	8010e0a <__gethex+0xfa>
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	e7e1      	b.n	8010e24 <__gethex+0x114>
 8010e60:	4621      	mov	r1, r4
 8010e62:	1bf3      	subs	r3, r6, r7
 8010e64:	3b01      	subs	r3, #1
 8010e66:	2b07      	cmp	r3, #7
 8010e68:	dc0a      	bgt.n	8010e80 <__gethex+0x170>
 8010e6a:	9802      	ldr	r0, [sp, #8]
 8010e6c:	f000 fae6 	bl	801143c <_Balloc>
 8010e70:	4604      	mov	r4, r0
 8010e72:	b940      	cbnz	r0, 8010e86 <__gethex+0x176>
 8010e74:	4602      	mov	r2, r0
 8010e76:	21de      	movs	r1, #222	; 0xde
 8010e78:	4b62      	ldr	r3, [pc, #392]	; (8011004 <__gethex+0x2f4>)
 8010e7a:	4863      	ldr	r0, [pc, #396]	; (8011008 <__gethex+0x2f8>)
 8010e7c:	f7fe fe7a 	bl	800fb74 <__assert_func>
 8010e80:	3101      	adds	r1, #1
 8010e82:	105b      	asrs	r3, r3, #1
 8010e84:	e7ef      	b.n	8010e66 <__gethex+0x156>
 8010e86:	f04f 0b00 	mov.w	fp, #0
 8010e8a:	f100 0914 	add.w	r9, r0, #20
 8010e8e:	f1ca 0301 	rsb	r3, sl, #1
 8010e92:	f8cd 9010 	str.w	r9, [sp, #16]
 8010e96:	f8cd b004 	str.w	fp, [sp, #4]
 8010e9a:	9308      	str	r3, [sp, #32]
 8010e9c:	42b7      	cmp	r7, r6
 8010e9e:	d33f      	bcc.n	8010f20 <__gethex+0x210>
 8010ea0:	9f04      	ldr	r7, [sp, #16]
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	f847 3b04 	str.w	r3, [r7], #4
 8010ea8:	eba7 0709 	sub.w	r7, r7, r9
 8010eac:	10bf      	asrs	r7, r7, #2
 8010eae:	6127      	str	r7, [r4, #16]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f000 fbb9 	bl	8011628 <__hi0bits>
 8010eb6:	017f      	lsls	r7, r7, #5
 8010eb8:	f8d8 6000 	ldr.w	r6, [r8]
 8010ebc:	1a3f      	subs	r7, r7, r0
 8010ebe:	42b7      	cmp	r7, r6
 8010ec0:	dd62      	ble.n	8010f88 <__gethex+0x278>
 8010ec2:	1bbf      	subs	r7, r7, r6
 8010ec4:	4639      	mov	r1, r7
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 ff4f 	bl	8011d6a <__any_on>
 8010ecc:	4682      	mov	sl, r0
 8010ece:	b1a8      	cbz	r0, 8010efc <__gethex+0x1ec>
 8010ed0:	f04f 0a01 	mov.w	sl, #1
 8010ed4:	1e7b      	subs	r3, r7, #1
 8010ed6:	1159      	asrs	r1, r3, #5
 8010ed8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010edc:	f003 021f 	and.w	r2, r3, #31
 8010ee0:	fa0a f202 	lsl.w	r2, sl, r2
 8010ee4:	420a      	tst	r2, r1
 8010ee6:	d009      	beq.n	8010efc <__gethex+0x1ec>
 8010ee8:	4553      	cmp	r3, sl
 8010eea:	dd05      	ble.n	8010ef8 <__gethex+0x1e8>
 8010eec:	4620      	mov	r0, r4
 8010eee:	1eb9      	subs	r1, r7, #2
 8010ef0:	f000 ff3b 	bl	8011d6a <__any_on>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d144      	bne.n	8010f82 <__gethex+0x272>
 8010ef8:	f04f 0a02 	mov.w	sl, #2
 8010efc:	4639      	mov	r1, r7
 8010efe:	4620      	mov	r0, r4
 8010f00:	f7ff fe9d 	bl	8010c3e <rshift>
 8010f04:	443d      	add	r5, r7
 8010f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f0a:	42ab      	cmp	r3, r5
 8010f0c:	da4a      	bge.n	8010fa4 <__gethex+0x294>
 8010f0e:	4621      	mov	r1, r4
 8010f10:	9802      	ldr	r0, [sp, #8]
 8010f12:	f000 fad3 	bl	80114bc <_Bfree>
 8010f16:	2300      	movs	r3, #0
 8010f18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f1a:	27a3      	movs	r7, #163	; 0xa3
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	e789      	b.n	8010e34 <__gethex+0x124>
 8010f20:	1e73      	subs	r3, r6, #1
 8010f22:	9a07      	ldr	r2, [sp, #28]
 8010f24:	9305      	str	r3, [sp, #20]
 8010f26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d019      	beq.n	8010f62 <__gethex+0x252>
 8010f2e:	f1bb 0f20 	cmp.w	fp, #32
 8010f32:	d107      	bne.n	8010f44 <__gethex+0x234>
 8010f34:	9b04      	ldr	r3, [sp, #16]
 8010f36:	9a01      	ldr	r2, [sp, #4]
 8010f38:	f843 2b04 	str.w	r2, [r3], #4
 8010f3c:	9304      	str	r3, [sp, #16]
 8010f3e:	2300      	movs	r3, #0
 8010f40:	469b      	mov	fp, r3
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f48:	f7ff fecc 	bl	8010ce4 <__hexdig_fun>
 8010f4c:	9b01      	ldr	r3, [sp, #4]
 8010f4e:	f000 000f 	and.w	r0, r0, #15
 8010f52:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f56:	4303      	orrs	r3, r0
 8010f58:	9301      	str	r3, [sp, #4]
 8010f5a:	f10b 0b04 	add.w	fp, fp, #4
 8010f5e:	9b05      	ldr	r3, [sp, #20]
 8010f60:	e00d      	b.n	8010f7e <__gethex+0x26e>
 8010f62:	9b05      	ldr	r3, [sp, #20]
 8010f64:	9a08      	ldr	r2, [sp, #32]
 8010f66:	4413      	add	r3, r2
 8010f68:	42bb      	cmp	r3, r7
 8010f6a:	d3e0      	bcc.n	8010f2e <__gethex+0x21e>
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	4652      	mov	r2, sl
 8010f70:	9903      	ldr	r1, [sp, #12]
 8010f72:	9309      	str	r3, [sp, #36]	; 0x24
 8010f74:	f7fd fe1e 	bl	800ebb4 <strncmp>
 8010f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d1d7      	bne.n	8010f2e <__gethex+0x21e>
 8010f7e:	461e      	mov	r6, r3
 8010f80:	e78c      	b.n	8010e9c <__gethex+0x18c>
 8010f82:	f04f 0a03 	mov.w	sl, #3
 8010f86:	e7b9      	b.n	8010efc <__gethex+0x1ec>
 8010f88:	da09      	bge.n	8010f9e <__gethex+0x28e>
 8010f8a:	1bf7      	subs	r7, r6, r7
 8010f8c:	4621      	mov	r1, r4
 8010f8e:	463a      	mov	r2, r7
 8010f90:	9802      	ldr	r0, [sp, #8]
 8010f92:	f000 fcab 	bl	80118ec <__lshift>
 8010f96:	4604      	mov	r4, r0
 8010f98:	1bed      	subs	r5, r5, r7
 8010f9a:	f100 0914 	add.w	r9, r0, #20
 8010f9e:	f04f 0a00 	mov.w	sl, #0
 8010fa2:	e7b0      	b.n	8010f06 <__gethex+0x1f6>
 8010fa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fa8:	42a8      	cmp	r0, r5
 8010faa:	dd71      	ble.n	8011090 <__gethex+0x380>
 8010fac:	1b45      	subs	r5, r0, r5
 8010fae:	42ae      	cmp	r6, r5
 8010fb0:	dc34      	bgt.n	801101c <__gethex+0x30c>
 8010fb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	d028      	beq.n	801100c <__gethex+0x2fc>
 8010fba:	2b03      	cmp	r3, #3
 8010fbc:	d02a      	beq.n	8011014 <__gethex+0x304>
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d115      	bne.n	8010fee <__gethex+0x2de>
 8010fc2:	42ae      	cmp	r6, r5
 8010fc4:	d113      	bne.n	8010fee <__gethex+0x2de>
 8010fc6:	2e01      	cmp	r6, #1
 8010fc8:	d10b      	bne.n	8010fe2 <__gethex+0x2d2>
 8010fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fce:	9a06      	ldr	r2, [sp, #24]
 8010fd0:	2762      	movs	r7, #98	; 0x62
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	6123      	str	r3, [r4, #16]
 8010fd8:	f8c9 3000 	str.w	r3, [r9]
 8010fdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fde:	601c      	str	r4, [r3, #0]
 8010fe0:	e728      	b.n	8010e34 <__gethex+0x124>
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	1e71      	subs	r1, r6, #1
 8010fe6:	f000 fec0 	bl	8011d6a <__any_on>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	d1ed      	bne.n	8010fca <__gethex+0x2ba>
 8010fee:	4621      	mov	r1, r4
 8010ff0:	9802      	ldr	r0, [sp, #8]
 8010ff2:	f000 fa63 	bl	80114bc <_Bfree>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ffa:	2750      	movs	r7, #80	; 0x50
 8010ffc:	6013      	str	r3, [r2, #0]
 8010ffe:	e719      	b.n	8010e34 <__gethex+0x124>
 8011000:	08013c90 	.word	0x08013c90
 8011004:	08013bb0 	.word	0x08013bb0
 8011008:	08013c24 	.word	0x08013c24
 801100c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1ed      	bne.n	8010fee <__gethex+0x2de>
 8011012:	e7da      	b.n	8010fca <__gethex+0x2ba>
 8011014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1d7      	bne.n	8010fca <__gethex+0x2ba>
 801101a:	e7e8      	b.n	8010fee <__gethex+0x2de>
 801101c:	1e6f      	subs	r7, r5, #1
 801101e:	f1ba 0f00 	cmp.w	sl, #0
 8011022:	d132      	bne.n	801108a <__gethex+0x37a>
 8011024:	b127      	cbz	r7, 8011030 <__gethex+0x320>
 8011026:	4639      	mov	r1, r7
 8011028:	4620      	mov	r0, r4
 801102a:	f000 fe9e 	bl	8011d6a <__any_on>
 801102e:	4682      	mov	sl, r0
 8011030:	2101      	movs	r1, #1
 8011032:	117b      	asrs	r3, r7, #5
 8011034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011038:	f007 071f 	and.w	r7, r7, #31
 801103c:	fa01 f707 	lsl.w	r7, r1, r7
 8011040:	421f      	tst	r7, r3
 8011042:	f04f 0702 	mov.w	r7, #2
 8011046:	4629      	mov	r1, r5
 8011048:	4620      	mov	r0, r4
 801104a:	bf18      	it	ne
 801104c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011050:	1b76      	subs	r6, r6, r5
 8011052:	f7ff fdf4 	bl	8010c3e <rshift>
 8011056:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801105a:	f1ba 0f00 	cmp.w	sl, #0
 801105e:	d048      	beq.n	80110f2 <__gethex+0x3e2>
 8011060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011064:	2b02      	cmp	r3, #2
 8011066:	d015      	beq.n	8011094 <__gethex+0x384>
 8011068:	2b03      	cmp	r3, #3
 801106a:	d017      	beq.n	801109c <__gethex+0x38c>
 801106c:	2b01      	cmp	r3, #1
 801106e:	d109      	bne.n	8011084 <__gethex+0x374>
 8011070:	f01a 0f02 	tst.w	sl, #2
 8011074:	d006      	beq.n	8011084 <__gethex+0x374>
 8011076:	f8d9 0000 	ldr.w	r0, [r9]
 801107a:	ea4a 0a00 	orr.w	sl, sl, r0
 801107e:	f01a 0f01 	tst.w	sl, #1
 8011082:	d10e      	bne.n	80110a2 <__gethex+0x392>
 8011084:	f047 0710 	orr.w	r7, r7, #16
 8011088:	e033      	b.n	80110f2 <__gethex+0x3e2>
 801108a:	f04f 0a01 	mov.w	sl, #1
 801108e:	e7cf      	b.n	8011030 <__gethex+0x320>
 8011090:	2701      	movs	r7, #1
 8011092:	e7e2      	b.n	801105a <__gethex+0x34a>
 8011094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011096:	f1c3 0301 	rsb	r3, r3, #1
 801109a:	9315      	str	r3, [sp, #84]	; 0x54
 801109c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d0f0      	beq.n	8011084 <__gethex+0x374>
 80110a2:	f04f 0c00 	mov.w	ip, #0
 80110a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110aa:	f104 0314 	add.w	r3, r4, #20
 80110ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110b6:	4618      	mov	r0, r3
 80110b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80110bc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80110c0:	d01c      	beq.n	80110fc <__gethex+0x3ec>
 80110c2:	3201      	adds	r2, #1
 80110c4:	6002      	str	r2, [r0, #0]
 80110c6:	2f02      	cmp	r7, #2
 80110c8:	f104 0314 	add.w	r3, r4, #20
 80110cc:	d13d      	bne.n	801114a <__gethex+0x43a>
 80110ce:	f8d8 2000 	ldr.w	r2, [r8]
 80110d2:	3a01      	subs	r2, #1
 80110d4:	42b2      	cmp	r2, r6
 80110d6:	d10a      	bne.n	80110ee <__gethex+0x3de>
 80110d8:	2201      	movs	r2, #1
 80110da:	1171      	asrs	r1, r6, #5
 80110dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110e0:	f006 061f 	and.w	r6, r6, #31
 80110e4:	fa02 f606 	lsl.w	r6, r2, r6
 80110e8:	421e      	tst	r6, r3
 80110ea:	bf18      	it	ne
 80110ec:	4617      	movne	r7, r2
 80110ee:	f047 0720 	orr.w	r7, r7, #32
 80110f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110f4:	601c      	str	r4, [r3, #0]
 80110f6:	9b06      	ldr	r3, [sp, #24]
 80110f8:	601d      	str	r5, [r3, #0]
 80110fa:	e69b      	b.n	8010e34 <__gethex+0x124>
 80110fc:	4299      	cmp	r1, r3
 80110fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8011102:	d8d8      	bhi.n	80110b6 <__gethex+0x3a6>
 8011104:	68a3      	ldr	r3, [r4, #8]
 8011106:	459b      	cmp	fp, r3
 8011108:	db17      	blt.n	801113a <__gethex+0x42a>
 801110a:	6861      	ldr	r1, [r4, #4]
 801110c:	9802      	ldr	r0, [sp, #8]
 801110e:	3101      	adds	r1, #1
 8011110:	f000 f994 	bl	801143c <_Balloc>
 8011114:	4681      	mov	r9, r0
 8011116:	b918      	cbnz	r0, 8011120 <__gethex+0x410>
 8011118:	4602      	mov	r2, r0
 801111a:	2184      	movs	r1, #132	; 0x84
 801111c:	4b19      	ldr	r3, [pc, #100]	; (8011184 <__gethex+0x474>)
 801111e:	e6ac      	b.n	8010e7a <__gethex+0x16a>
 8011120:	6922      	ldr	r2, [r4, #16]
 8011122:	f104 010c 	add.w	r1, r4, #12
 8011126:	3202      	adds	r2, #2
 8011128:	0092      	lsls	r2, r2, #2
 801112a:	300c      	adds	r0, #12
 801112c:	f7fc fdce 	bl	800dccc <memcpy>
 8011130:	4621      	mov	r1, r4
 8011132:	9802      	ldr	r0, [sp, #8]
 8011134:	f000 f9c2 	bl	80114bc <_Bfree>
 8011138:	464c      	mov	r4, r9
 801113a:	6923      	ldr	r3, [r4, #16]
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	6122      	str	r2, [r4, #16]
 8011140:	2201      	movs	r2, #1
 8011142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011146:	615a      	str	r2, [r3, #20]
 8011148:	e7bd      	b.n	80110c6 <__gethex+0x3b6>
 801114a:	6922      	ldr	r2, [r4, #16]
 801114c:	455a      	cmp	r2, fp
 801114e:	dd0b      	ble.n	8011168 <__gethex+0x458>
 8011150:	2101      	movs	r1, #1
 8011152:	4620      	mov	r0, r4
 8011154:	f7ff fd73 	bl	8010c3e <rshift>
 8011158:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801115c:	3501      	adds	r5, #1
 801115e:	42ab      	cmp	r3, r5
 8011160:	f6ff aed5 	blt.w	8010f0e <__gethex+0x1fe>
 8011164:	2701      	movs	r7, #1
 8011166:	e7c2      	b.n	80110ee <__gethex+0x3de>
 8011168:	f016 061f 	ands.w	r6, r6, #31
 801116c:	d0fa      	beq.n	8011164 <__gethex+0x454>
 801116e:	449a      	add	sl, r3
 8011170:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011174:	f000 fa58 	bl	8011628 <__hi0bits>
 8011178:	f1c6 0620 	rsb	r6, r6, #32
 801117c:	42b0      	cmp	r0, r6
 801117e:	dbe7      	blt.n	8011150 <__gethex+0x440>
 8011180:	e7f0      	b.n	8011164 <__gethex+0x454>
 8011182:	bf00      	nop
 8011184:	08013bb0 	.word	0x08013bb0

08011188 <L_shift>:
 8011188:	f1c2 0208 	rsb	r2, r2, #8
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	b570      	push	{r4, r5, r6, lr}
 8011190:	f1c2 0620 	rsb	r6, r2, #32
 8011194:	6843      	ldr	r3, [r0, #4]
 8011196:	6804      	ldr	r4, [r0, #0]
 8011198:	fa03 f506 	lsl.w	r5, r3, r6
 801119c:	432c      	orrs	r4, r5
 801119e:	40d3      	lsrs	r3, r2
 80111a0:	6004      	str	r4, [r0, #0]
 80111a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80111a6:	4288      	cmp	r0, r1
 80111a8:	d3f4      	bcc.n	8011194 <L_shift+0xc>
 80111aa:	bd70      	pop	{r4, r5, r6, pc}

080111ac <__match>:
 80111ac:	b530      	push	{r4, r5, lr}
 80111ae:	6803      	ldr	r3, [r0, #0]
 80111b0:	3301      	adds	r3, #1
 80111b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111b6:	b914      	cbnz	r4, 80111be <__match+0x12>
 80111b8:	6003      	str	r3, [r0, #0]
 80111ba:	2001      	movs	r0, #1
 80111bc:	bd30      	pop	{r4, r5, pc}
 80111be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80111c6:	2d19      	cmp	r5, #25
 80111c8:	bf98      	it	ls
 80111ca:	3220      	addls	r2, #32
 80111cc:	42a2      	cmp	r2, r4
 80111ce:	d0f0      	beq.n	80111b2 <__match+0x6>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e7f3      	b.n	80111bc <__match+0x10>

080111d4 <__hexnan>:
 80111d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d8:	2500      	movs	r5, #0
 80111da:	680b      	ldr	r3, [r1, #0]
 80111dc:	4682      	mov	sl, r0
 80111de:	115e      	asrs	r6, r3, #5
 80111e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80111e4:	f013 031f 	ands.w	r3, r3, #31
 80111e8:	bf18      	it	ne
 80111ea:	3604      	addne	r6, #4
 80111ec:	1f37      	subs	r7, r6, #4
 80111ee:	4690      	mov	r8, r2
 80111f0:	46b9      	mov	r9, r7
 80111f2:	463c      	mov	r4, r7
 80111f4:	46ab      	mov	fp, r5
 80111f6:	b087      	sub	sp, #28
 80111f8:	6801      	ldr	r1, [r0, #0]
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8011200:	9502      	str	r5, [sp, #8]
 8011202:	784a      	ldrb	r2, [r1, #1]
 8011204:	1c4b      	adds	r3, r1, #1
 8011206:	9303      	str	r3, [sp, #12]
 8011208:	b342      	cbz	r2, 801125c <__hexnan+0x88>
 801120a:	4610      	mov	r0, r2
 801120c:	9105      	str	r1, [sp, #20]
 801120e:	9204      	str	r2, [sp, #16]
 8011210:	f7ff fd68 	bl	8010ce4 <__hexdig_fun>
 8011214:	2800      	cmp	r0, #0
 8011216:	d14f      	bne.n	80112b8 <__hexnan+0xe4>
 8011218:	9a04      	ldr	r2, [sp, #16]
 801121a:	9905      	ldr	r1, [sp, #20]
 801121c:	2a20      	cmp	r2, #32
 801121e:	d818      	bhi.n	8011252 <__hexnan+0x7e>
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	459b      	cmp	fp, r3
 8011224:	dd13      	ble.n	801124e <__hexnan+0x7a>
 8011226:	454c      	cmp	r4, r9
 8011228:	d206      	bcs.n	8011238 <__hexnan+0x64>
 801122a:	2d07      	cmp	r5, #7
 801122c:	dc04      	bgt.n	8011238 <__hexnan+0x64>
 801122e:	462a      	mov	r2, r5
 8011230:	4649      	mov	r1, r9
 8011232:	4620      	mov	r0, r4
 8011234:	f7ff ffa8 	bl	8011188 <L_shift>
 8011238:	4544      	cmp	r4, r8
 801123a:	d950      	bls.n	80112de <__hexnan+0x10a>
 801123c:	2300      	movs	r3, #0
 801123e:	f1a4 0904 	sub.w	r9, r4, #4
 8011242:	f844 3c04 	str.w	r3, [r4, #-4]
 8011246:	461d      	mov	r5, r3
 8011248:	464c      	mov	r4, r9
 801124a:	f8cd b008 	str.w	fp, [sp, #8]
 801124e:	9903      	ldr	r1, [sp, #12]
 8011250:	e7d7      	b.n	8011202 <__hexnan+0x2e>
 8011252:	2a29      	cmp	r2, #41	; 0x29
 8011254:	d156      	bne.n	8011304 <__hexnan+0x130>
 8011256:	3102      	adds	r1, #2
 8011258:	f8ca 1000 	str.w	r1, [sl]
 801125c:	f1bb 0f00 	cmp.w	fp, #0
 8011260:	d050      	beq.n	8011304 <__hexnan+0x130>
 8011262:	454c      	cmp	r4, r9
 8011264:	d206      	bcs.n	8011274 <__hexnan+0xa0>
 8011266:	2d07      	cmp	r5, #7
 8011268:	dc04      	bgt.n	8011274 <__hexnan+0xa0>
 801126a:	462a      	mov	r2, r5
 801126c:	4649      	mov	r1, r9
 801126e:	4620      	mov	r0, r4
 8011270:	f7ff ff8a 	bl	8011188 <L_shift>
 8011274:	4544      	cmp	r4, r8
 8011276:	d934      	bls.n	80112e2 <__hexnan+0x10e>
 8011278:	4623      	mov	r3, r4
 801127a:	f1a8 0204 	sub.w	r2, r8, #4
 801127e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011282:	429f      	cmp	r7, r3
 8011284:	f842 1f04 	str.w	r1, [r2, #4]!
 8011288:	d2f9      	bcs.n	801127e <__hexnan+0xaa>
 801128a:	1b3b      	subs	r3, r7, r4
 801128c:	f023 0303 	bic.w	r3, r3, #3
 8011290:	3304      	adds	r3, #4
 8011292:	3401      	adds	r4, #1
 8011294:	3e03      	subs	r6, #3
 8011296:	42b4      	cmp	r4, r6
 8011298:	bf88      	it	hi
 801129a:	2304      	movhi	r3, #4
 801129c:	2200      	movs	r2, #0
 801129e:	4443      	add	r3, r8
 80112a0:	f843 2b04 	str.w	r2, [r3], #4
 80112a4:	429f      	cmp	r7, r3
 80112a6:	d2fb      	bcs.n	80112a0 <__hexnan+0xcc>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	b91b      	cbnz	r3, 80112b4 <__hexnan+0xe0>
 80112ac:	4547      	cmp	r7, r8
 80112ae:	d127      	bne.n	8011300 <__hexnan+0x12c>
 80112b0:	2301      	movs	r3, #1
 80112b2:	603b      	str	r3, [r7, #0]
 80112b4:	2005      	movs	r0, #5
 80112b6:	e026      	b.n	8011306 <__hexnan+0x132>
 80112b8:	3501      	adds	r5, #1
 80112ba:	2d08      	cmp	r5, #8
 80112bc:	f10b 0b01 	add.w	fp, fp, #1
 80112c0:	dd06      	ble.n	80112d0 <__hexnan+0xfc>
 80112c2:	4544      	cmp	r4, r8
 80112c4:	d9c3      	bls.n	801124e <__hexnan+0x7a>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2501      	movs	r5, #1
 80112ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80112ce:	3c04      	subs	r4, #4
 80112d0:	6822      	ldr	r2, [r4, #0]
 80112d2:	f000 000f 	and.w	r0, r0, #15
 80112d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80112da:	6022      	str	r2, [r4, #0]
 80112dc:	e7b7      	b.n	801124e <__hexnan+0x7a>
 80112de:	2508      	movs	r5, #8
 80112e0:	e7b5      	b.n	801124e <__hexnan+0x7a>
 80112e2:	9b01      	ldr	r3, [sp, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d0df      	beq.n	80112a8 <__hexnan+0xd4>
 80112e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112ec:	f1c3 0320 	rsb	r3, r3, #32
 80112f0:	fa22 f303 	lsr.w	r3, r2, r3
 80112f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112f8:	401a      	ands	r2, r3
 80112fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80112fe:	e7d3      	b.n	80112a8 <__hexnan+0xd4>
 8011300:	3f04      	subs	r7, #4
 8011302:	e7d1      	b.n	80112a8 <__hexnan+0xd4>
 8011304:	2004      	movs	r0, #4
 8011306:	b007      	add	sp, #28
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801130c <_localeconv_r>:
 801130c:	4800      	ldr	r0, [pc, #0]	; (8011310 <_localeconv_r+0x4>)
 801130e:	4770      	bx	lr
 8011310:	2000022c 	.word	0x2000022c

08011314 <__retarget_lock_init_recursive>:
 8011314:	4770      	bx	lr

08011316 <__retarget_lock_acquire_recursive>:
 8011316:	4770      	bx	lr

08011318 <__retarget_lock_release_recursive>:
 8011318:	4770      	bx	lr

0801131a <__swhatbuf_r>:
 801131a:	b570      	push	{r4, r5, r6, lr}
 801131c:	460e      	mov	r6, r1
 801131e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011322:	4614      	mov	r4, r2
 8011324:	2900      	cmp	r1, #0
 8011326:	461d      	mov	r5, r3
 8011328:	b096      	sub	sp, #88	; 0x58
 801132a:	da07      	bge.n	801133c <__swhatbuf_r+0x22>
 801132c:	2300      	movs	r3, #0
 801132e:	602b      	str	r3, [r5, #0]
 8011330:	89b3      	ldrh	r3, [r6, #12]
 8011332:	061a      	lsls	r2, r3, #24
 8011334:	d410      	bmi.n	8011358 <__swhatbuf_r+0x3e>
 8011336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801133a:	e00e      	b.n	801135a <__swhatbuf_r+0x40>
 801133c:	466a      	mov	r2, sp
 801133e:	f001 f877 	bl	8012430 <_fstat_r>
 8011342:	2800      	cmp	r0, #0
 8011344:	dbf2      	blt.n	801132c <__swhatbuf_r+0x12>
 8011346:	9a01      	ldr	r2, [sp, #4]
 8011348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801134c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011350:	425a      	negs	r2, r3
 8011352:	415a      	adcs	r2, r3
 8011354:	602a      	str	r2, [r5, #0]
 8011356:	e7ee      	b.n	8011336 <__swhatbuf_r+0x1c>
 8011358:	2340      	movs	r3, #64	; 0x40
 801135a:	2000      	movs	r0, #0
 801135c:	6023      	str	r3, [r4, #0]
 801135e:	b016      	add	sp, #88	; 0x58
 8011360:	bd70      	pop	{r4, r5, r6, pc}
	...

08011364 <__smakebuf_r>:
 8011364:	898b      	ldrh	r3, [r1, #12]
 8011366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011368:	079d      	lsls	r5, r3, #30
 801136a:	4606      	mov	r6, r0
 801136c:	460c      	mov	r4, r1
 801136e:	d507      	bpl.n	8011380 <__smakebuf_r+0x1c>
 8011370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	6123      	str	r3, [r4, #16]
 8011378:	2301      	movs	r3, #1
 801137a:	6163      	str	r3, [r4, #20]
 801137c:	b002      	add	sp, #8
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	466a      	mov	r2, sp
 8011382:	ab01      	add	r3, sp, #4
 8011384:	f7ff ffc9 	bl	801131a <__swhatbuf_r>
 8011388:	9900      	ldr	r1, [sp, #0]
 801138a:	4605      	mov	r5, r0
 801138c:	4630      	mov	r0, r6
 801138e:	f7fc fcff 	bl	800dd90 <_malloc_r>
 8011392:	b948      	cbnz	r0, 80113a8 <__smakebuf_r+0x44>
 8011394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011398:	059a      	lsls	r2, r3, #22
 801139a:	d4ef      	bmi.n	801137c <__smakebuf_r+0x18>
 801139c:	f023 0303 	bic.w	r3, r3, #3
 80113a0:	f043 0302 	orr.w	r3, r3, #2
 80113a4:	81a3      	strh	r3, [r4, #12]
 80113a6:	e7e3      	b.n	8011370 <__smakebuf_r+0xc>
 80113a8:	4b0d      	ldr	r3, [pc, #52]	; (80113e0 <__smakebuf_r+0x7c>)
 80113aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80113ac:	89a3      	ldrh	r3, [r4, #12]
 80113ae:	6020      	str	r0, [r4, #0]
 80113b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113b4:	81a3      	strh	r3, [r4, #12]
 80113b6:	9b00      	ldr	r3, [sp, #0]
 80113b8:	6120      	str	r0, [r4, #16]
 80113ba:	6163      	str	r3, [r4, #20]
 80113bc:	9b01      	ldr	r3, [sp, #4]
 80113be:	b15b      	cbz	r3, 80113d8 <__smakebuf_r+0x74>
 80113c0:	4630      	mov	r0, r6
 80113c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113c6:	f001 f845 	bl	8012454 <_isatty_r>
 80113ca:	b128      	cbz	r0, 80113d8 <__smakebuf_r+0x74>
 80113cc:	89a3      	ldrh	r3, [r4, #12]
 80113ce:	f023 0303 	bic.w	r3, r3, #3
 80113d2:	f043 0301 	orr.w	r3, r3, #1
 80113d6:	81a3      	strh	r3, [r4, #12]
 80113d8:	89a0      	ldrh	r0, [r4, #12]
 80113da:	4305      	orrs	r5, r0
 80113dc:	81a5      	strh	r5, [r4, #12]
 80113de:	e7cd      	b.n	801137c <__smakebuf_r+0x18>
 80113e0:	08010a79 	.word	0x08010a79

080113e4 <__ascii_mbtowc>:
 80113e4:	b082      	sub	sp, #8
 80113e6:	b901      	cbnz	r1, 80113ea <__ascii_mbtowc+0x6>
 80113e8:	a901      	add	r1, sp, #4
 80113ea:	b142      	cbz	r2, 80113fe <__ascii_mbtowc+0x1a>
 80113ec:	b14b      	cbz	r3, 8011402 <__ascii_mbtowc+0x1e>
 80113ee:	7813      	ldrb	r3, [r2, #0]
 80113f0:	600b      	str	r3, [r1, #0]
 80113f2:	7812      	ldrb	r2, [r2, #0]
 80113f4:	1e10      	subs	r0, r2, #0
 80113f6:	bf18      	it	ne
 80113f8:	2001      	movne	r0, #1
 80113fa:	b002      	add	sp, #8
 80113fc:	4770      	bx	lr
 80113fe:	4610      	mov	r0, r2
 8011400:	e7fb      	b.n	80113fa <__ascii_mbtowc+0x16>
 8011402:	f06f 0001 	mvn.w	r0, #1
 8011406:	e7f8      	b.n	80113fa <__ascii_mbtowc+0x16>

08011408 <memchr>:
 8011408:	4603      	mov	r3, r0
 801140a:	b510      	push	{r4, lr}
 801140c:	b2c9      	uxtb	r1, r1
 801140e:	4402      	add	r2, r0
 8011410:	4293      	cmp	r3, r2
 8011412:	4618      	mov	r0, r3
 8011414:	d101      	bne.n	801141a <memchr+0x12>
 8011416:	2000      	movs	r0, #0
 8011418:	e003      	b.n	8011422 <memchr+0x1a>
 801141a:	7804      	ldrb	r4, [r0, #0]
 801141c:	3301      	adds	r3, #1
 801141e:	428c      	cmp	r4, r1
 8011420:	d1f6      	bne.n	8011410 <memchr+0x8>
 8011422:	bd10      	pop	{r4, pc}

08011424 <__malloc_lock>:
 8011424:	4801      	ldr	r0, [pc, #4]	; (801142c <__malloc_lock+0x8>)
 8011426:	f7ff bf76 	b.w	8011316 <__retarget_lock_acquire_recursive>
 801142a:	bf00      	nop
 801142c:	200013f0 	.word	0x200013f0

08011430 <__malloc_unlock>:
 8011430:	4801      	ldr	r0, [pc, #4]	; (8011438 <__malloc_unlock+0x8>)
 8011432:	f7ff bf71 	b.w	8011318 <__retarget_lock_release_recursive>
 8011436:	bf00      	nop
 8011438:	200013f0 	.word	0x200013f0

0801143c <_Balloc>:
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011440:	4604      	mov	r4, r0
 8011442:	460d      	mov	r5, r1
 8011444:	b976      	cbnz	r6, 8011464 <_Balloc+0x28>
 8011446:	2010      	movs	r0, #16
 8011448:	f7fc fc38 	bl	800dcbc <malloc>
 801144c:	4602      	mov	r2, r0
 801144e:	6260      	str	r0, [r4, #36]	; 0x24
 8011450:	b920      	cbnz	r0, 801145c <_Balloc+0x20>
 8011452:	2166      	movs	r1, #102	; 0x66
 8011454:	4b17      	ldr	r3, [pc, #92]	; (80114b4 <_Balloc+0x78>)
 8011456:	4818      	ldr	r0, [pc, #96]	; (80114b8 <_Balloc+0x7c>)
 8011458:	f7fe fb8c 	bl	800fb74 <__assert_func>
 801145c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011460:	6006      	str	r6, [r0, #0]
 8011462:	60c6      	str	r6, [r0, #12]
 8011464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011466:	68f3      	ldr	r3, [r6, #12]
 8011468:	b183      	cbz	r3, 801148c <_Balloc+0x50>
 801146a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011472:	b9b8      	cbnz	r0, 80114a4 <_Balloc+0x68>
 8011474:	2101      	movs	r1, #1
 8011476:	fa01 f605 	lsl.w	r6, r1, r5
 801147a:	1d72      	adds	r2, r6, #5
 801147c:	4620      	mov	r0, r4
 801147e:	0092      	lsls	r2, r2, #2
 8011480:	f000 fc94 	bl	8011dac <_calloc_r>
 8011484:	b160      	cbz	r0, 80114a0 <_Balloc+0x64>
 8011486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801148a:	e00e      	b.n	80114aa <_Balloc+0x6e>
 801148c:	2221      	movs	r2, #33	; 0x21
 801148e:	2104      	movs	r1, #4
 8011490:	4620      	mov	r0, r4
 8011492:	f000 fc8b 	bl	8011dac <_calloc_r>
 8011496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011498:	60f0      	str	r0, [r6, #12]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1e4      	bne.n	801146a <_Balloc+0x2e>
 80114a0:	2000      	movs	r0, #0
 80114a2:	bd70      	pop	{r4, r5, r6, pc}
 80114a4:	6802      	ldr	r2, [r0, #0]
 80114a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114aa:	2300      	movs	r3, #0
 80114ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114b0:	e7f7      	b.n	80114a2 <_Balloc+0x66>
 80114b2:	bf00      	nop
 80114b4:	08013b3a 	.word	0x08013b3a
 80114b8:	08013ca4 	.word	0x08013ca4

080114bc <_Bfree>:
 80114bc:	b570      	push	{r4, r5, r6, lr}
 80114be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114c0:	4605      	mov	r5, r0
 80114c2:	460c      	mov	r4, r1
 80114c4:	b976      	cbnz	r6, 80114e4 <_Bfree+0x28>
 80114c6:	2010      	movs	r0, #16
 80114c8:	f7fc fbf8 	bl	800dcbc <malloc>
 80114cc:	4602      	mov	r2, r0
 80114ce:	6268      	str	r0, [r5, #36]	; 0x24
 80114d0:	b920      	cbnz	r0, 80114dc <_Bfree+0x20>
 80114d2:	218a      	movs	r1, #138	; 0x8a
 80114d4:	4b08      	ldr	r3, [pc, #32]	; (80114f8 <_Bfree+0x3c>)
 80114d6:	4809      	ldr	r0, [pc, #36]	; (80114fc <_Bfree+0x40>)
 80114d8:	f7fe fb4c 	bl	800fb74 <__assert_func>
 80114dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114e0:	6006      	str	r6, [r0, #0]
 80114e2:	60c6      	str	r6, [r0, #12]
 80114e4:	b13c      	cbz	r4, 80114f6 <_Bfree+0x3a>
 80114e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114e8:	6862      	ldr	r2, [r4, #4]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114f0:	6021      	str	r1, [r4, #0]
 80114f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114f6:	bd70      	pop	{r4, r5, r6, pc}
 80114f8:	08013b3a 	.word	0x08013b3a
 80114fc:	08013ca4 	.word	0x08013ca4

08011500 <__multadd>:
 8011500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011504:	4698      	mov	r8, r3
 8011506:	460c      	mov	r4, r1
 8011508:	2300      	movs	r3, #0
 801150a:	690e      	ldr	r6, [r1, #16]
 801150c:	4607      	mov	r7, r0
 801150e:	f101 0014 	add.w	r0, r1, #20
 8011512:	6805      	ldr	r5, [r0, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	b2a9      	uxth	r1, r5
 8011518:	fb02 8101 	mla	r1, r2, r1, r8
 801151c:	0c2d      	lsrs	r5, r5, #16
 801151e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011522:	fb02 c505 	mla	r5, r2, r5, ip
 8011526:	b289      	uxth	r1, r1
 8011528:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801152c:	429e      	cmp	r6, r3
 801152e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011532:	f840 1b04 	str.w	r1, [r0], #4
 8011536:	dcec      	bgt.n	8011512 <__multadd+0x12>
 8011538:	f1b8 0f00 	cmp.w	r8, #0
 801153c:	d022      	beq.n	8011584 <__multadd+0x84>
 801153e:	68a3      	ldr	r3, [r4, #8]
 8011540:	42b3      	cmp	r3, r6
 8011542:	dc19      	bgt.n	8011578 <__multadd+0x78>
 8011544:	6861      	ldr	r1, [r4, #4]
 8011546:	4638      	mov	r0, r7
 8011548:	3101      	adds	r1, #1
 801154a:	f7ff ff77 	bl	801143c <_Balloc>
 801154e:	4605      	mov	r5, r0
 8011550:	b928      	cbnz	r0, 801155e <__multadd+0x5e>
 8011552:	4602      	mov	r2, r0
 8011554:	21b5      	movs	r1, #181	; 0xb5
 8011556:	4b0d      	ldr	r3, [pc, #52]	; (801158c <__multadd+0x8c>)
 8011558:	480d      	ldr	r0, [pc, #52]	; (8011590 <__multadd+0x90>)
 801155a:	f7fe fb0b 	bl	800fb74 <__assert_func>
 801155e:	6922      	ldr	r2, [r4, #16]
 8011560:	f104 010c 	add.w	r1, r4, #12
 8011564:	3202      	adds	r2, #2
 8011566:	0092      	lsls	r2, r2, #2
 8011568:	300c      	adds	r0, #12
 801156a:	f7fc fbaf 	bl	800dccc <memcpy>
 801156e:	4621      	mov	r1, r4
 8011570:	4638      	mov	r0, r7
 8011572:	f7ff ffa3 	bl	80114bc <_Bfree>
 8011576:	462c      	mov	r4, r5
 8011578:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801157c:	3601      	adds	r6, #1
 801157e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011582:	6126      	str	r6, [r4, #16]
 8011584:	4620      	mov	r0, r4
 8011586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158a:	bf00      	nop
 801158c:	08013bb0 	.word	0x08013bb0
 8011590:	08013ca4 	.word	0x08013ca4

08011594 <__s2b>:
 8011594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011598:	4615      	mov	r5, r2
 801159a:	2209      	movs	r2, #9
 801159c:	461f      	mov	r7, r3
 801159e:	3308      	adds	r3, #8
 80115a0:	460c      	mov	r4, r1
 80115a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80115a6:	4606      	mov	r6, r0
 80115a8:	2201      	movs	r2, #1
 80115aa:	2100      	movs	r1, #0
 80115ac:	429a      	cmp	r2, r3
 80115ae:	db09      	blt.n	80115c4 <__s2b+0x30>
 80115b0:	4630      	mov	r0, r6
 80115b2:	f7ff ff43 	bl	801143c <_Balloc>
 80115b6:	b940      	cbnz	r0, 80115ca <__s2b+0x36>
 80115b8:	4602      	mov	r2, r0
 80115ba:	21ce      	movs	r1, #206	; 0xce
 80115bc:	4b18      	ldr	r3, [pc, #96]	; (8011620 <__s2b+0x8c>)
 80115be:	4819      	ldr	r0, [pc, #100]	; (8011624 <__s2b+0x90>)
 80115c0:	f7fe fad8 	bl	800fb74 <__assert_func>
 80115c4:	0052      	lsls	r2, r2, #1
 80115c6:	3101      	adds	r1, #1
 80115c8:	e7f0      	b.n	80115ac <__s2b+0x18>
 80115ca:	9b08      	ldr	r3, [sp, #32]
 80115cc:	2d09      	cmp	r5, #9
 80115ce:	6143      	str	r3, [r0, #20]
 80115d0:	f04f 0301 	mov.w	r3, #1
 80115d4:	6103      	str	r3, [r0, #16]
 80115d6:	dd16      	ble.n	8011606 <__s2b+0x72>
 80115d8:	f104 0909 	add.w	r9, r4, #9
 80115dc:	46c8      	mov	r8, r9
 80115de:	442c      	add	r4, r5
 80115e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80115e4:	4601      	mov	r1, r0
 80115e6:	220a      	movs	r2, #10
 80115e8:	4630      	mov	r0, r6
 80115ea:	3b30      	subs	r3, #48	; 0x30
 80115ec:	f7ff ff88 	bl	8011500 <__multadd>
 80115f0:	45a0      	cmp	r8, r4
 80115f2:	d1f5      	bne.n	80115e0 <__s2b+0x4c>
 80115f4:	f1a5 0408 	sub.w	r4, r5, #8
 80115f8:	444c      	add	r4, r9
 80115fa:	1b2d      	subs	r5, r5, r4
 80115fc:	1963      	adds	r3, r4, r5
 80115fe:	42bb      	cmp	r3, r7
 8011600:	db04      	blt.n	801160c <__s2b+0x78>
 8011602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011606:	2509      	movs	r5, #9
 8011608:	340a      	adds	r4, #10
 801160a:	e7f6      	b.n	80115fa <__s2b+0x66>
 801160c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011610:	4601      	mov	r1, r0
 8011612:	220a      	movs	r2, #10
 8011614:	4630      	mov	r0, r6
 8011616:	3b30      	subs	r3, #48	; 0x30
 8011618:	f7ff ff72 	bl	8011500 <__multadd>
 801161c:	e7ee      	b.n	80115fc <__s2b+0x68>
 801161e:	bf00      	nop
 8011620:	08013bb0 	.word	0x08013bb0
 8011624:	08013ca4 	.word	0x08013ca4

08011628 <__hi0bits>:
 8011628:	0c02      	lsrs	r2, r0, #16
 801162a:	0412      	lsls	r2, r2, #16
 801162c:	4603      	mov	r3, r0
 801162e:	b9ca      	cbnz	r2, 8011664 <__hi0bits+0x3c>
 8011630:	0403      	lsls	r3, r0, #16
 8011632:	2010      	movs	r0, #16
 8011634:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011638:	bf04      	itt	eq
 801163a:	021b      	lsleq	r3, r3, #8
 801163c:	3008      	addeq	r0, #8
 801163e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011642:	bf04      	itt	eq
 8011644:	011b      	lsleq	r3, r3, #4
 8011646:	3004      	addeq	r0, #4
 8011648:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801164c:	bf04      	itt	eq
 801164e:	009b      	lsleq	r3, r3, #2
 8011650:	3002      	addeq	r0, #2
 8011652:	2b00      	cmp	r3, #0
 8011654:	db05      	blt.n	8011662 <__hi0bits+0x3a>
 8011656:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801165a:	f100 0001 	add.w	r0, r0, #1
 801165e:	bf08      	it	eq
 8011660:	2020      	moveq	r0, #32
 8011662:	4770      	bx	lr
 8011664:	2000      	movs	r0, #0
 8011666:	e7e5      	b.n	8011634 <__hi0bits+0xc>

08011668 <__lo0bits>:
 8011668:	6803      	ldr	r3, [r0, #0]
 801166a:	4602      	mov	r2, r0
 801166c:	f013 0007 	ands.w	r0, r3, #7
 8011670:	d00b      	beq.n	801168a <__lo0bits+0x22>
 8011672:	07d9      	lsls	r1, r3, #31
 8011674:	d422      	bmi.n	80116bc <__lo0bits+0x54>
 8011676:	0798      	lsls	r0, r3, #30
 8011678:	bf49      	itett	mi
 801167a:	085b      	lsrmi	r3, r3, #1
 801167c:	089b      	lsrpl	r3, r3, #2
 801167e:	2001      	movmi	r0, #1
 8011680:	6013      	strmi	r3, [r2, #0]
 8011682:	bf5c      	itt	pl
 8011684:	2002      	movpl	r0, #2
 8011686:	6013      	strpl	r3, [r2, #0]
 8011688:	4770      	bx	lr
 801168a:	b299      	uxth	r1, r3
 801168c:	b909      	cbnz	r1, 8011692 <__lo0bits+0x2a>
 801168e:	2010      	movs	r0, #16
 8011690:	0c1b      	lsrs	r3, r3, #16
 8011692:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011696:	bf04      	itt	eq
 8011698:	0a1b      	lsreq	r3, r3, #8
 801169a:	3008      	addeq	r0, #8
 801169c:	0719      	lsls	r1, r3, #28
 801169e:	bf04      	itt	eq
 80116a0:	091b      	lsreq	r3, r3, #4
 80116a2:	3004      	addeq	r0, #4
 80116a4:	0799      	lsls	r1, r3, #30
 80116a6:	bf04      	itt	eq
 80116a8:	089b      	lsreq	r3, r3, #2
 80116aa:	3002      	addeq	r0, #2
 80116ac:	07d9      	lsls	r1, r3, #31
 80116ae:	d403      	bmi.n	80116b8 <__lo0bits+0x50>
 80116b0:	085b      	lsrs	r3, r3, #1
 80116b2:	f100 0001 	add.w	r0, r0, #1
 80116b6:	d003      	beq.n	80116c0 <__lo0bits+0x58>
 80116b8:	6013      	str	r3, [r2, #0]
 80116ba:	4770      	bx	lr
 80116bc:	2000      	movs	r0, #0
 80116be:	4770      	bx	lr
 80116c0:	2020      	movs	r0, #32
 80116c2:	4770      	bx	lr

080116c4 <__i2b>:
 80116c4:	b510      	push	{r4, lr}
 80116c6:	460c      	mov	r4, r1
 80116c8:	2101      	movs	r1, #1
 80116ca:	f7ff feb7 	bl	801143c <_Balloc>
 80116ce:	4602      	mov	r2, r0
 80116d0:	b928      	cbnz	r0, 80116de <__i2b+0x1a>
 80116d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116d6:	4b04      	ldr	r3, [pc, #16]	; (80116e8 <__i2b+0x24>)
 80116d8:	4804      	ldr	r0, [pc, #16]	; (80116ec <__i2b+0x28>)
 80116da:	f7fe fa4b 	bl	800fb74 <__assert_func>
 80116de:	2301      	movs	r3, #1
 80116e0:	6144      	str	r4, [r0, #20]
 80116e2:	6103      	str	r3, [r0, #16]
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	bf00      	nop
 80116e8:	08013bb0 	.word	0x08013bb0
 80116ec:	08013ca4 	.word	0x08013ca4

080116f0 <__multiply>:
 80116f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f4:	4614      	mov	r4, r2
 80116f6:	690a      	ldr	r2, [r1, #16]
 80116f8:	6923      	ldr	r3, [r4, #16]
 80116fa:	460d      	mov	r5, r1
 80116fc:	429a      	cmp	r2, r3
 80116fe:	bfbe      	ittt	lt
 8011700:	460b      	movlt	r3, r1
 8011702:	4625      	movlt	r5, r4
 8011704:	461c      	movlt	r4, r3
 8011706:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801170a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801170e:	68ab      	ldr	r3, [r5, #8]
 8011710:	6869      	ldr	r1, [r5, #4]
 8011712:	eb0a 0709 	add.w	r7, sl, r9
 8011716:	42bb      	cmp	r3, r7
 8011718:	b085      	sub	sp, #20
 801171a:	bfb8      	it	lt
 801171c:	3101      	addlt	r1, #1
 801171e:	f7ff fe8d 	bl	801143c <_Balloc>
 8011722:	b930      	cbnz	r0, 8011732 <__multiply+0x42>
 8011724:	4602      	mov	r2, r0
 8011726:	f240 115d 	movw	r1, #349	; 0x15d
 801172a:	4b41      	ldr	r3, [pc, #260]	; (8011830 <__multiply+0x140>)
 801172c:	4841      	ldr	r0, [pc, #260]	; (8011834 <__multiply+0x144>)
 801172e:	f7fe fa21 	bl	800fb74 <__assert_func>
 8011732:	f100 0614 	add.w	r6, r0, #20
 8011736:	4633      	mov	r3, r6
 8011738:	2200      	movs	r2, #0
 801173a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801173e:	4543      	cmp	r3, r8
 8011740:	d31e      	bcc.n	8011780 <__multiply+0x90>
 8011742:	f105 0c14 	add.w	ip, r5, #20
 8011746:	f104 0314 	add.w	r3, r4, #20
 801174a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801174e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011752:	9202      	str	r2, [sp, #8]
 8011754:	ebac 0205 	sub.w	r2, ip, r5
 8011758:	3a15      	subs	r2, #21
 801175a:	f022 0203 	bic.w	r2, r2, #3
 801175e:	3204      	adds	r2, #4
 8011760:	f105 0115 	add.w	r1, r5, #21
 8011764:	458c      	cmp	ip, r1
 8011766:	bf38      	it	cc
 8011768:	2204      	movcc	r2, #4
 801176a:	9201      	str	r2, [sp, #4]
 801176c:	9a02      	ldr	r2, [sp, #8]
 801176e:	9303      	str	r3, [sp, #12]
 8011770:	429a      	cmp	r2, r3
 8011772:	d808      	bhi.n	8011786 <__multiply+0x96>
 8011774:	2f00      	cmp	r7, #0
 8011776:	dc55      	bgt.n	8011824 <__multiply+0x134>
 8011778:	6107      	str	r7, [r0, #16]
 801177a:	b005      	add	sp, #20
 801177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011780:	f843 2b04 	str.w	r2, [r3], #4
 8011784:	e7db      	b.n	801173e <__multiply+0x4e>
 8011786:	f8b3 a000 	ldrh.w	sl, [r3]
 801178a:	f1ba 0f00 	cmp.w	sl, #0
 801178e:	d020      	beq.n	80117d2 <__multiply+0xe2>
 8011790:	46b1      	mov	r9, r6
 8011792:	2200      	movs	r2, #0
 8011794:	f105 0e14 	add.w	lr, r5, #20
 8011798:	f85e 4b04 	ldr.w	r4, [lr], #4
 801179c:	f8d9 b000 	ldr.w	fp, [r9]
 80117a0:	b2a1      	uxth	r1, r4
 80117a2:	fa1f fb8b 	uxth.w	fp, fp
 80117a6:	fb0a b101 	mla	r1, sl, r1, fp
 80117aa:	4411      	add	r1, r2
 80117ac:	f8d9 2000 	ldr.w	r2, [r9]
 80117b0:	0c24      	lsrs	r4, r4, #16
 80117b2:	0c12      	lsrs	r2, r2, #16
 80117b4:	fb0a 2404 	mla	r4, sl, r4, r2
 80117b8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80117bc:	b289      	uxth	r1, r1
 80117be:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80117c2:	45f4      	cmp	ip, lr
 80117c4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80117c8:	f849 1b04 	str.w	r1, [r9], #4
 80117cc:	d8e4      	bhi.n	8011798 <__multiply+0xa8>
 80117ce:	9901      	ldr	r1, [sp, #4]
 80117d0:	5072      	str	r2, [r6, r1]
 80117d2:	9a03      	ldr	r2, [sp, #12]
 80117d4:	3304      	adds	r3, #4
 80117d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	d01f      	beq.n	8011820 <__multiply+0x130>
 80117e0:	46b6      	mov	lr, r6
 80117e2:	f04f 0a00 	mov.w	sl, #0
 80117e6:	6834      	ldr	r4, [r6, #0]
 80117e8:	f105 0114 	add.w	r1, r5, #20
 80117ec:	880a      	ldrh	r2, [r1, #0]
 80117ee:	f8be b002 	ldrh.w	fp, [lr, #2]
 80117f2:	b2a4      	uxth	r4, r4
 80117f4:	fb09 b202 	mla	r2, r9, r2, fp
 80117f8:	4492      	add	sl, r2
 80117fa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80117fe:	f84e 4b04 	str.w	r4, [lr], #4
 8011802:	f851 4b04 	ldr.w	r4, [r1], #4
 8011806:	f8be 2000 	ldrh.w	r2, [lr]
 801180a:	0c24      	lsrs	r4, r4, #16
 801180c:	fb09 2404 	mla	r4, r9, r4, r2
 8011810:	458c      	cmp	ip, r1
 8011812:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011816:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801181a:	d8e7      	bhi.n	80117ec <__multiply+0xfc>
 801181c:	9a01      	ldr	r2, [sp, #4]
 801181e:	50b4      	str	r4, [r6, r2]
 8011820:	3604      	adds	r6, #4
 8011822:	e7a3      	b.n	801176c <__multiply+0x7c>
 8011824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1a5      	bne.n	8011778 <__multiply+0x88>
 801182c:	3f01      	subs	r7, #1
 801182e:	e7a1      	b.n	8011774 <__multiply+0x84>
 8011830:	08013bb0 	.word	0x08013bb0
 8011834:	08013ca4 	.word	0x08013ca4

08011838 <__pow5mult>:
 8011838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801183c:	4615      	mov	r5, r2
 801183e:	f012 0203 	ands.w	r2, r2, #3
 8011842:	4606      	mov	r6, r0
 8011844:	460f      	mov	r7, r1
 8011846:	d007      	beq.n	8011858 <__pow5mult+0x20>
 8011848:	4c25      	ldr	r4, [pc, #148]	; (80118e0 <__pow5mult+0xa8>)
 801184a:	3a01      	subs	r2, #1
 801184c:	2300      	movs	r3, #0
 801184e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011852:	f7ff fe55 	bl	8011500 <__multadd>
 8011856:	4607      	mov	r7, r0
 8011858:	10ad      	asrs	r5, r5, #2
 801185a:	d03d      	beq.n	80118d8 <__pow5mult+0xa0>
 801185c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801185e:	b97c      	cbnz	r4, 8011880 <__pow5mult+0x48>
 8011860:	2010      	movs	r0, #16
 8011862:	f7fc fa2b 	bl	800dcbc <malloc>
 8011866:	4602      	mov	r2, r0
 8011868:	6270      	str	r0, [r6, #36]	; 0x24
 801186a:	b928      	cbnz	r0, 8011878 <__pow5mult+0x40>
 801186c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011870:	4b1c      	ldr	r3, [pc, #112]	; (80118e4 <__pow5mult+0xac>)
 8011872:	481d      	ldr	r0, [pc, #116]	; (80118e8 <__pow5mult+0xb0>)
 8011874:	f7fe f97e 	bl	800fb74 <__assert_func>
 8011878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801187c:	6004      	str	r4, [r0, #0]
 801187e:	60c4      	str	r4, [r0, #12]
 8011880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011888:	b94c      	cbnz	r4, 801189e <__pow5mult+0x66>
 801188a:	f240 2171 	movw	r1, #625	; 0x271
 801188e:	4630      	mov	r0, r6
 8011890:	f7ff ff18 	bl	80116c4 <__i2b>
 8011894:	2300      	movs	r3, #0
 8011896:	4604      	mov	r4, r0
 8011898:	f8c8 0008 	str.w	r0, [r8, #8]
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	f04f 0900 	mov.w	r9, #0
 80118a2:	07eb      	lsls	r3, r5, #31
 80118a4:	d50a      	bpl.n	80118bc <__pow5mult+0x84>
 80118a6:	4639      	mov	r1, r7
 80118a8:	4622      	mov	r2, r4
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7ff ff20 	bl	80116f0 <__multiply>
 80118b0:	4680      	mov	r8, r0
 80118b2:	4639      	mov	r1, r7
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff fe01 	bl	80114bc <_Bfree>
 80118ba:	4647      	mov	r7, r8
 80118bc:	106d      	asrs	r5, r5, #1
 80118be:	d00b      	beq.n	80118d8 <__pow5mult+0xa0>
 80118c0:	6820      	ldr	r0, [r4, #0]
 80118c2:	b938      	cbnz	r0, 80118d4 <__pow5mult+0x9c>
 80118c4:	4622      	mov	r2, r4
 80118c6:	4621      	mov	r1, r4
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff ff11 	bl	80116f0 <__multiply>
 80118ce:	6020      	str	r0, [r4, #0]
 80118d0:	f8c0 9000 	str.w	r9, [r0]
 80118d4:	4604      	mov	r4, r0
 80118d6:	e7e4      	b.n	80118a2 <__pow5mult+0x6a>
 80118d8:	4638      	mov	r0, r7
 80118da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118de:	bf00      	nop
 80118e0:	08013df8 	.word	0x08013df8
 80118e4:	08013b3a 	.word	0x08013b3a
 80118e8:	08013ca4 	.word	0x08013ca4

080118ec <__lshift>:
 80118ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f0:	460c      	mov	r4, r1
 80118f2:	4607      	mov	r7, r0
 80118f4:	4691      	mov	r9, r2
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	6849      	ldr	r1, [r1, #4]
 80118fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118fe:	68a3      	ldr	r3, [r4, #8]
 8011900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011904:	f108 0601 	add.w	r6, r8, #1
 8011908:	42b3      	cmp	r3, r6
 801190a:	db0b      	blt.n	8011924 <__lshift+0x38>
 801190c:	4638      	mov	r0, r7
 801190e:	f7ff fd95 	bl	801143c <_Balloc>
 8011912:	4605      	mov	r5, r0
 8011914:	b948      	cbnz	r0, 801192a <__lshift+0x3e>
 8011916:	4602      	mov	r2, r0
 8011918:	f240 11d9 	movw	r1, #473	; 0x1d9
 801191c:	4b27      	ldr	r3, [pc, #156]	; (80119bc <__lshift+0xd0>)
 801191e:	4828      	ldr	r0, [pc, #160]	; (80119c0 <__lshift+0xd4>)
 8011920:	f7fe f928 	bl	800fb74 <__assert_func>
 8011924:	3101      	adds	r1, #1
 8011926:	005b      	lsls	r3, r3, #1
 8011928:	e7ee      	b.n	8011908 <__lshift+0x1c>
 801192a:	2300      	movs	r3, #0
 801192c:	f100 0114 	add.w	r1, r0, #20
 8011930:	f100 0210 	add.w	r2, r0, #16
 8011934:	4618      	mov	r0, r3
 8011936:	4553      	cmp	r3, sl
 8011938:	db33      	blt.n	80119a2 <__lshift+0xb6>
 801193a:	6920      	ldr	r0, [r4, #16]
 801193c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011940:	f104 0314 	add.w	r3, r4, #20
 8011944:	f019 091f 	ands.w	r9, r9, #31
 8011948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801194c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011950:	d02b      	beq.n	80119aa <__lshift+0xbe>
 8011952:	468a      	mov	sl, r1
 8011954:	2200      	movs	r2, #0
 8011956:	f1c9 0e20 	rsb	lr, r9, #32
 801195a:	6818      	ldr	r0, [r3, #0]
 801195c:	fa00 f009 	lsl.w	r0, r0, r9
 8011960:	4302      	orrs	r2, r0
 8011962:	f84a 2b04 	str.w	r2, [sl], #4
 8011966:	f853 2b04 	ldr.w	r2, [r3], #4
 801196a:	459c      	cmp	ip, r3
 801196c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011970:	d8f3      	bhi.n	801195a <__lshift+0x6e>
 8011972:	ebac 0304 	sub.w	r3, ip, r4
 8011976:	3b15      	subs	r3, #21
 8011978:	f023 0303 	bic.w	r3, r3, #3
 801197c:	3304      	adds	r3, #4
 801197e:	f104 0015 	add.w	r0, r4, #21
 8011982:	4584      	cmp	ip, r0
 8011984:	bf38      	it	cc
 8011986:	2304      	movcc	r3, #4
 8011988:	50ca      	str	r2, [r1, r3]
 801198a:	b10a      	cbz	r2, 8011990 <__lshift+0xa4>
 801198c:	f108 0602 	add.w	r6, r8, #2
 8011990:	3e01      	subs	r6, #1
 8011992:	4638      	mov	r0, r7
 8011994:	4621      	mov	r1, r4
 8011996:	612e      	str	r6, [r5, #16]
 8011998:	f7ff fd90 	bl	80114bc <_Bfree>
 801199c:	4628      	mov	r0, r5
 801199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80119a6:	3301      	adds	r3, #1
 80119a8:	e7c5      	b.n	8011936 <__lshift+0x4a>
 80119aa:	3904      	subs	r1, #4
 80119ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80119b0:	459c      	cmp	ip, r3
 80119b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80119b6:	d8f9      	bhi.n	80119ac <__lshift+0xc0>
 80119b8:	e7ea      	b.n	8011990 <__lshift+0xa4>
 80119ba:	bf00      	nop
 80119bc:	08013bb0 	.word	0x08013bb0
 80119c0:	08013ca4 	.word	0x08013ca4

080119c4 <__mcmp>:
 80119c4:	4603      	mov	r3, r0
 80119c6:	690a      	ldr	r2, [r1, #16]
 80119c8:	6900      	ldr	r0, [r0, #16]
 80119ca:	b530      	push	{r4, r5, lr}
 80119cc:	1a80      	subs	r0, r0, r2
 80119ce:	d10d      	bne.n	80119ec <__mcmp+0x28>
 80119d0:	3314      	adds	r3, #20
 80119d2:	3114      	adds	r1, #20
 80119d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80119d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80119dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119e4:	4295      	cmp	r5, r2
 80119e6:	d002      	beq.n	80119ee <__mcmp+0x2a>
 80119e8:	d304      	bcc.n	80119f4 <__mcmp+0x30>
 80119ea:	2001      	movs	r0, #1
 80119ec:	bd30      	pop	{r4, r5, pc}
 80119ee:	42a3      	cmp	r3, r4
 80119f0:	d3f4      	bcc.n	80119dc <__mcmp+0x18>
 80119f2:	e7fb      	b.n	80119ec <__mcmp+0x28>
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119f8:	e7f8      	b.n	80119ec <__mcmp+0x28>
	...

080119fc <__mdiff>:
 80119fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a00:	460c      	mov	r4, r1
 8011a02:	4606      	mov	r6, r0
 8011a04:	4611      	mov	r1, r2
 8011a06:	4620      	mov	r0, r4
 8011a08:	4692      	mov	sl, r2
 8011a0a:	f7ff ffdb 	bl	80119c4 <__mcmp>
 8011a0e:	1e05      	subs	r5, r0, #0
 8011a10:	d111      	bne.n	8011a36 <__mdiff+0x3a>
 8011a12:	4629      	mov	r1, r5
 8011a14:	4630      	mov	r0, r6
 8011a16:	f7ff fd11 	bl	801143c <_Balloc>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	b928      	cbnz	r0, 8011a2a <__mdiff+0x2e>
 8011a1e:	f240 2132 	movw	r1, #562	; 0x232
 8011a22:	4b3c      	ldr	r3, [pc, #240]	; (8011b14 <__mdiff+0x118>)
 8011a24:	483c      	ldr	r0, [pc, #240]	; (8011b18 <__mdiff+0x11c>)
 8011a26:	f7fe f8a5 	bl	800fb74 <__assert_func>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a30:	4610      	mov	r0, r2
 8011a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a36:	bfa4      	itt	ge
 8011a38:	4653      	movge	r3, sl
 8011a3a:	46a2      	movge	sl, r4
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011a42:	bfa6      	itte	ge
 8011a44:	461c      	movge	r4, r3
 8011a46:	2500      	movge	r5, #0
 8011a48:	2501      	movlt	r5, #1
 8011a4a:	f7ff fcf7 	bl	801143c <_Balloc>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	b918      	cbnz	r0, 8011a5a <__mdiff+0x5e>
 8011a52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a56:	4b2f      	ldr	r3, [pc, #188]	; (8011b14 <__mdiff+0x118>)
 8011a58:	e7e4      	b.n	8011a24 <__mdiff+0x28>
 8011a5a:	f100 0814 	add.w	r8, r0, #20
 8011a5e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8011a62:	60c5      	str	r5, [r0, #12]
 8011a64:	f04f 0c00 	mov.w	ip, #0
 8011a68:	f10a 0514 	add.w	r5, sl, #20
 8011a6c:	f10a 0010 	add.w	r0, sl, #16
 8011a70:	46c2      	mov	sl, r8
 8011a72:	6926      	ldr	r6, [r4, #16]
 8011a74:	f104 0914 	add.w	r9, r4, #20
 8011a78:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011a7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a80:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011a84:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a88:	fa1f f18b 	uxth.w	r1, fp
 8011a8c:	4461      	add	r1, ip
 8011a8e:	fa1f fc83 	uxth.w	ip, r3
 8011a92:	0c1b      	lsrs	r3, r3, #16
 8011a94:	eba1 010c 	sub.w	r1, r1, ip
 8011a98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011aa0:	b289      	uxth	r1, r1
 8011aa2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011aa6:	454e      	cmp	r6, r9
 8011aa8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011aac:	f84a 3b04 	str.w	r3, [sl], #4
 8011ab0:	d8e6      	bhi.n	8011a80 <__mdiff+0x84>
 8011ab2:	1b33      	subs	r3, r6, r4
 8011ab4:	3b15      	subs	r3, #21
 8011ab6:	f023 0303 	bic.w	r3, r3, #3
 8011aba:	3415      	adds	r4, #21
 8011abc:	3304      	adds	r3, #4
 8011abe:	42a6      	cmp	r6, r4
 8011ac0:	bf38      	it	cc
 8011ac2:	2304      	movcc	r3, #4
 8011ac4:	441d      	add	r5, r3
 8011ac6:	4443      	add	r3, r8
 8011ac8:	461e      	mov	r6, r3
 8011aca:	462c      	mov	r4, r5
 8011acc:	4574      	cmp	r4, lr
 8011ace:	d30e      	bcc.n	8011aee <__mdiff+0xf2>
 8011ad0:	f10e 0103 	add.w	r1, lr, #3
 8011ad4:	1b49      	subs	r1, r1, r5
 8011ad6:	f021 0103 	bic.w	r1, r1, #3
 8011ada:	3d03      	subs	r5, #3
 8011adc:	45ae      	cmp	lr, r5
 8011ade:	bf38      	it	cc
 8011ae0:	2100      	movcc	r1, #0
 8011ae2:	4419      	add	r1, r3
 8011ae4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011ae8:	b18b      	cbz	r3, 8011b0e <__mdiff+0x112>
 8011aea:	6117      	str	r7, [r2, #16]
 8011aec:	e7a0      	b.n	8011a30 <__mdiff+0x34>
 8011aee:	f854 8b04 	ldr.w	r8, [r4], #4
 8011af2:	fa1f f188 	uxth.w	r1, r8
 8011af6:	4461      	add	r1, ip
 8011af8:	1408      	asrs	r0, r1, #16
 8011afa:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8011afe:	b289      	uxth	r1, r1
 8011b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b08:	f846 1b04 	str.w	r1, [r6], #4
 8011b0c:	e7de      	b.n	8011acc <__mdiff+0xd0>
 8011b0e:	3f01      	subs	r7, #1
 8011b10:	e7e8      	b.n	8011ae4 <__mdiff+0xe8>
 8011b12:	bf00      	nop
 8011b14:	08013bb0 	.word	0x08013bb0
 8011b18:	08013ca4 	.word	0x08013ca4

08011b1c <__ulp>:
 8011b1c:	4b11      	ldr	r3, [pc, #68]	; (8011b64 <__ulp+0x48>)
 8011b1e:	400b      	ands	r3, r1
 8011b20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dd02      	ble.n	8011b2e <__ulp+0x12>
 8011b28:	2000      	movs	r0, #0
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4770      	bx	lr
 8011b2e:	425b      	negs	r3, r3
 8011b30:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011b34:	f04f 0000 	mov.w	r0, #0
 8011b38:	f04f 0100 	mov.w	r1, #0
 8011b3c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b40:	da04      	bge.n	8011b4c <__ulp+0x30>
 8011b42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011b46:	fa43 f102 	asr.w	r1, r3, r2
 8011b4a:	4770      	bx	lr
 8011b4c:	f1a2 0314 	sub.w	r3, r2, #20
 8011b50:	2b1e      	cmp	r3, #30
 8011b52:	bfd6      	itet	le
 8011b54:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011b58:	2301      	movgt	r3, #1
 8011b5a:	fa22 f303 	lsrle.w	r3, r2, r3
 8011b5e:	4618      	mov	r0, r3
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop
 8011b64:	7ff00000 	.word	0x7ff00000

08011b68 <__b2d>:
 8011b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b6c:	6907      	ldr	r7, [r0, #16]
 8011b6e:	f100 0914 	add.w	r9, r0, #20
 8011b72:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8011b76:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8011b7a:	f1a7 0804 	sub.w	r8, r7, #4
 8011b7e:	4630      	mov	r0, r6
 8011b80:	f7ff fd52 	bl	8011628 <__hi0bits>
 8011b84:	f1c0 0320 	rsb	r3, r0, #32
 8011b88:	280a      	cmp	r0, #10
 8011b8a:	600b      	str	r3, [r1, #0]
 8011b8c:	491f      	ldr	r1, [pc, #124]	; (8011c0c <__b2d+0xa4>)
 8011b8e:	dc17      	bgt.n	8011bc0 <__b2d+0x58>
 8011b90:	45c1      	cmp	r9, r8
 8011b92:	bf28      	it	cs
 8011b94:	2200      	movcs	r2, #0
 8011b96:	f1c0 0c0b 	rsb	ip, r0, #11
 8011b9a:	fa26 f30c 	lsr.w	r3, r6, ip
 8011b9e:	bf38      	it	cc
 8011ba0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011ba4:	ea43 0501 	orr.w	r5, r3, r1
 8011ba8:	f100 0315 	add.w	r3, r0, #21
 8011bac:	fa06 f303 	lsl.w	r3, r6, r3
 8011bb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8011bb4:	ea43 0402 	orr.w	r4, r3, r2
 8011bb8:	4620      	mov	r0, r4
 8011bba:	4629      	mov	r1, r5
 8011bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bc0:	45c1      	cmp	r9, r8
 8011bc2:	bf2e      	itee	cs
 8011bc4:	2200      	movcs	r2, #0
 8011bc6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011bca:	f1a7 0808 	subcc.w	r8, r7, #8
 8011bce:	f1b0 030b 	subs.w	r3, r0, #11
 8011bd2:	d016      	beq.n	8011c02 <__b2d+0x9a>
 8011bd4:	f1c3 0720 	rsb	r7, r3, #32
 8011bd8:	fa22 f107 	lsr.w	r1, r2, r7
 8011bdc:	45c8      	cmp	r8, r9
 8011bde:	fa06 f603 	lsl.w	r6, r6, r3
 8011be2:	ea46 0601 	orr.w	r6, r6, r1
 8011be6:	bf94      	ite	ls
 8011be8:	2100      	movls	r1, #0
 8011bea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8011bee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8011bf2:	fa02 f003 	lsl.w	r0, r2, r3
 8011bf6:	40f9      	lsrs	r1, r7
 8011bf8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011bfc:	ea40 0401 	orr.w	r4, r0, r1
 8011c00:	e7da      	b.n	8011bb8 <__b2d+0x50>
 8011c02:	4614      	mov	r4, r2
 8011c04:	ea46 0501 	orr.w	r5, r6, r1
 8011c08:	e7d6      	b.n	8011bb8 <__b2d+0x50>
 8011c0a:	bf00      	nop
 8011c0c:	3ff00000 	.word	0x3ff00000

08011c10 <__d2b>:
 8011c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011c14:	2101      	movs	r1, #1
 8011c16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011c1a:	4690      	mov	r8, r2
 8011c1c:	461d      	mov	r5, r3
 8011c1e:	f7ff fc0d 	bl	801143c <_Balloc>
 8011c22:	4604      	mov	r4, r0
 8011c24:	b930      	cbnz	r0, 8011c34 <__d2b+0x24>
 8011c26:	4602      	mov	r2, r0
 8011c28:	f240 310a 	movw	r1, #778	; 0x30a
 8011c2c:	4b24      	ldr	r3, [pc, #144]	; (8011cc0 <__d2b+0xb0>)
 8011c2e:	4825      	ldr	r0, [pc, #148]	; (8011cc4 <__d2b+0xb4>)
 8011c30:	f7fd ffa0 	bl	800fb74 <__assert_func>
 8011c34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011c38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011c3c:	bb2d      	cbnz	r5, 8011c8a <__d2b+0x7a>
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	f1b8 0300 	subs.w	r3, r8, #0
 8011c44:	d026      	beq.n	8011c94 <__d2b+0x84>
 8011c46:	4668      	mov	r0, sp
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	f7ff fd0d 	bl	8011668 <__lo0bits>
 8011c4e:	9900      	ldr	r1, [sp, #0]
 8011c50:	b1f0      	cbz	r0, 8011c90 <__d2b+0x80>
 8011c52:	9a01      	ldr	r2, [sp, #4]
 8011c54:	f1c0 0320 	rsb	r3, r0, #32
 8011c58:	fa02 f303 	lsl.w	r3, r2, r3
 8011c5c:	430b      	orrs	r3, r1
 8011c5e:	40c2      	lsrs	r2, r0
 8011c60:	6163      	str	r3, [r4, #20]
 8011c62:	9201      	str	r2, [sp, #4]
 8011c64:	9b01      	ldr	r3, [sp, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	bf14      	ite	ne
 8011c6a:	2102      	movne	r1, #2
 8011c6c:	2101      	moveq	r1, #1
 8011c6e:	61a3      	str	r3, [r4, #24]
 8011c70:	6121      	str	r1, [r4, #16]
 8011c72:	b1c5      	cbz	r5, 8011ca6 <__d2b+0x96>
 8011c74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c78:	4405      	add	r5, r0
 8011c7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c7e:	603d      	str	r5, [r7, #0]
 8011c80:	6030      	str	r0, [r6, #0]
 8011c82:	4620      	mov	r0, r4
 8011c84:	b002      	add	sp, #8
 8011c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c8e:	e7d6      	b.n	8011c3e <__d2b+0x2e>
 8011c90:	6161      	str	r1, [r4, #20]
 8011c92:	e7e7      	b.n	8011c64 <__d2b+0x54>
 8011c94:	a801      	add	r0, sp, #4
 8011c96:	f7ff fce7 	bl	8011668 <__lo0bits>
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	9b01      	ldr	r3, [sp, #4]
 8011c9e:	6121      	str	r1, [r4, #16]
 8011ca0:	6163      	str	r3, [r4, #20]
 8011ca2:	3020      	adds	r0, #32
 8011ca4:	e7e5      	b.n	8011c72 <__d2b+0x62>
 8011ca6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011caa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011cae:	6038      	str	r0, [r7, #0]
 8011cb0:	6918      	ldr	r0, [r3, #16]
 8011cb2:	f7ff fcb9 	bl	8011628 <__hi0bits>
 8011cb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011cba:	6031      	str	r1, [r6, #0]
 8011cbc:	e7e1      	b.n	8011c82 <__d2b+0x72>
 8011cbe:	bf00      	nop
 8011cc0:	08013bb0 	.word	0x08013bb0
 8011cc4:	08013ca4 	.word	0x08013ca4

08011cc8 <__ratio>:
 8011cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ccc:	4688      	mov	r8, r1
 8011cce:	4669      	mov	r1, sp
 8011cd0:	4681      	mov	r9, r0
 8011cd2:	f7ff ff49 	bl	8011b68 <__b2d>
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	4604      	mov	r4, r0
 8011cda:	460d      	mov	r5, r1
 8011cdc:	4640      	mov	r0, r8
 8011cde:	a901      	add	r1, sp, #4
 8011ce0:	f7ff ff42 	bl	8011b68 <__b2d>
 8011ce4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ce8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011cec:	468b      	mov	fp, r1
 8011cee:	eba3 0c02 	sub.w	ip, r3, r2
 8011cf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011cf6:	1a9b      	subs	r3, r3, r2
 8011cf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	bfd5      	itete	le
 8011d00:	460a      	movle	r2, r1
 8011d02:	462a      	movgt	r2, r5
 8011d04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d08:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d0c:	bfd8      	it	le
 8011d0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d12:	465b      	mov	r3, fp
 8011d14:	4602      	mov	r2, r0
 8011d16:	4639      	mov	r1, r7
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7ee fd73 	bl	8000804 <__aeabi_ddiv>
 8011d1e:	b003      	add	sp, #12
 8011d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d24 <__copybits>:
 8011d24:	3901      	subs	r1, #1
 8011d26:	b570      	push	{r4, r5, r6, lr}
 8011d28:	1149      	asrs	r1, r1, #5
 8011d2a:	6914      	ldr	r4, [r2, #16]
 8011d2c:	3101      	adds	r1, #1
 8011d2e:	f102 0314 	add.w	r3, r2, #20
 8011d32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d3a:	1f05      	subs	r5, r0, #4
 8011d3c:	42a3      	cmp	r3, r4
 8011d3e:	d30c      	bcc.n	8011d5a <__copybits+0x36>
 8011d40:	1aa3      	subs	r3, r4, r2
 8011d42:	3b11      	subs	r3, #17
 8011d44:	f023 0303 	bic.w	r3, r3, #3
 8011d48:	3211      	adds	r2, #17
 8011d4a:	42a2      	cmp	r2, r4
 8011d4c:	bf88      	it	hi
 8011d4e:	2300      	movhi	r3, #0
 8011d50:	4418      	add	r0, r3
 8011d52:	2300      	movs	r3, #0
 8011d54:	4288      	cmp	r0, r1
 8011d56:	d305      	bcc.n	8011d64 <__copybits+0x40>
 8011d58:	bd70      	pop	{r4, r5, r6, pc}
 8011d5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d62:	e7eb      	b.n	8011d3c <__copybits+0x18>
 8011d64:	f840 3b04 	str.w	r3, [r0], #4
 8011d68:	e7f4      	b.n	8011d54 <__copybits+0x30>

08011d6a <__any_on>:
 8011d6a:	f100 0214 	add.w	r2, r0, #20
 8011d6e:	6900      	ldr	r0, [r0, #16]
 8011d70:	114b      	asrs	r3, r1, #5
 8011d72:	4298      	cmp	r0, r3
 8011d74:	b510      	push	{r4, lr}
 8011d76:	db11      	blt.n	8011d9c <__any_on+0x32>
 8011d78:	dd0a      	ble.n	8011d90 <__any_on+0x26>
 8011d7a:	f011 011f 	ands.w	r1, r1, #31
 8011d7e:	d007      	beq.n	8011d90 <__any_on+0x26>
 8011d80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011d84:	fa24 f001 	lsr.w	r0, r4, r1
 8011d88:	fa00 f101 	lsl.w	r1, r0, r1
 8011d8c:	428c      	cmp	r4, r1
 8011d8e:	d10b      	bne.n	8011da8 <__any_on+0x3e>
 8011d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d803      	bhi.n	8011da0 <__any_on+0x36>
 8011d98:	2000      	movs	r0, #0
 8011d9a:	bd10      	pop	{r4, pc}
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	e7f7      	b.n	8011d90 <__any_on+0x26>
 8011da0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011da4:	2900      	cmp	r1, #0
 8011da6:	d0f5      	beq.n	8011d94 <__any_on+0x2a>
 8011da8:	2001      	movs	r0, #1
 8011daa:	e7f6      	b.n	8011d9a <__any_on+0x30>

08011dac <_calloc_r>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	fb02 f501 	mul.w	r5, r2, r1
 8011db2:	4629      	mov	r1, r5
 8011db4:	f7fb ffec 	bl	800dd90 <_malloc_r>
 8011db8:	4604      	mov	r4, r0
 8011dba:	b118      	cbz	r0, 8011dc4 <_calloc_r+0x18>
 8011dbc:	462a      	mov	r2, r5
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	f7fb ff92 	bl	800dce8 <memset>
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	bd38      	pop	{r3, r4, r5, pc}

08011dc8 <__ssputs_r>:
 8011dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dcc:	688e      	ldr	r6, [r1, #8]
 8011dce:	4682      	mov	sl, r0
 8011dd0:	429e      	cmp	r6, r3
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	4690      	mov	r8, r2
 8011dd6:	461f      	mov	r7, r3
 8011dd8:	d838      	bhi.n	8011e4c <__ssputs_r+0x84>
 8011dda:	898a      	ldrh	r2, [r1, #12]
 8011ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011de0:	d032      	beq.n	8011e48 <__ssputs_r+0x80>
 8011de2:	6825      	ldr	r5, [r4, #0]
 8011de4:	6909      	ldr	r1, [r1, #16]
 8011de6:	3301      	adds	r3, #1
 8011de8:	eba5 0901 	sub.w	r9, r5, r1
 8011dec:	6965      	ldr	r5, [r4, #20]
 8011dee:	444b      	add	r3, r9
 8011df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011df8:	106d      	asrs	r5, r5, #1
 8011dfa:	429d      	cmp	r5, r3
 8011dfc:	bf38      	it	cc
 8011dfe:	461d      	movcc	r5, r3
 8011e00:	0553      	lsls	r3, r2, #21
 8011e02:	d531      	bpl.n	8011e68 <__ssputs_r+0xa0>
 8011e04:	4629      	mov	r1, r5
 8011e06:	f7fb ffc3 	bl	800dd90 <_malloc_r>
 8011e0a:	4606      	mov	r6, r0
 8011e0c:	b950      	cbnz	r0, 8011e24 <__ssputs_r+0x5c>
 8011e0e:	230c      	movs	r3, #12
 8011e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e14:	f8ca 3000 	str.w	r3, [sl]
 8011e18:	89a3      	ldrh	r3, [r4, #12]
 8011e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e1e:	81a3      	strh	r3, [r4, #12]
 8011e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e24:	464a      	mov	r2, r9
 8011e26:	6921      	ldr	r1, [r4, #16]
 8011e28:	f7fb ff50 	bl	800dccc <memcpy>
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	6126      	str	r6, [r4, #16]
 8011e3a:	444e      	add	r6, r9
 8011e3c:	6026      	str	r6, [r4, #0]
 8011e3e:	463e      	mov	r6, r7
 8011e40:	6165      	str	r5, [r4, #20]
 8011e42:	eba5 0509 	sub.w	r5, r5, r9
 8011e46:	60a5      	str	r5, [r4, #8]
 8011e48:	42be      	cmp	r6, r7
 8011e4a:	d900      	bls.n	8011e4e <__ssputs_r+0x86>
 8011e4c:	463e      	mov	r6, r7
 8011e4e:	4632      	mov	r2, r6
 8011e50:	4641      	mov	r1, r8
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	f000 fb20 	bl	8012498 <memmove>
 8011e58:	68a3      	ldr	r3, [r4, #8]
 8011e5a:	6822      	ldr	r2, [r4, #0]
 8011e5c:	1b9b      	subs	r3, r3, r6
 8011e5e:	4432      	add	r2, r6
 8011e60:	2000      	movs	r0, #0
 8011e62:	60a3      	str	r3, [r4, #8]
 8011e64:	6022      	str	r2, [r4, #0]
 8011e66:	e7db      	b.n	8011e20 <__ssputs_r+0x58>
 8011e68:	462a      	mov	r2, r5
 8011e6a:	f000 fb2f 	bl	80124cc <_realloc_r>
 8011e6e:	4606      	mov	r6, r0
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d1e1      	bne.n	8011e38 <__ssputs_r+0x70>
 8011e74:	4650      	mov	r0, sl
 8011e76:	6921      	ldr	r1, [r4, #16]
 8011e78:	f7fb ff3e 	bl	800dcf8 <_free_r>
 8011e7c:	e7c7      	b.n	8011e0e <__ssputs_r+0x46>
	...

08011e80 <_svfiprintf_r>:
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	4698      	mov	r8, r3
 8011e86:	898b      	ldrh	r3, [r1, #12]
 8011e88:	4607      	mov	r7, r0
 8011e8a:	061b      	lsls	r3, r3, #24
 8011e8c:	460d      	mov	r5, r1
 8011e8e:	4614      	mov	r4, r2
 8011e90:	b09d      	sub	sp, #116	; 0x74
 8011e92:	d50e      	bpl.n	8011eb2 <_svfiprintf_r+0x32>
 8011e94:	690b      	ldr	r3, [r1, #16]
 8011e96:	b963      	cbnz	r3, 8011eb2 <_svfiprintf_r+0x32>
 8011e98:	2140      	movs	r1, #64	; 0x40
 8011e9a:	f7fb ff79 	bl	800dd90 <_malloc_r>
 8011e9e:	6028      	str	r0, [r5, #0]
 8011ea0:	6128      	str	r0, [r5, #16]
 8011ea2:	b920      	cbnz	r0, 8011eae <_svfiprintf_r+0x2e>
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eac:	e0d1      	b.n	8012052 <_svfiprintf_r+0x1d2>
 8011eae:	2340      	movs	r3, #64	; 0x40
 8011eb0:	616b      	str	r3, [r5, #20]
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb6:	2320      	movs	r3, #32
 8011eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ebc:	2330      	movs	r3, #48	; 0x30
 8011ebe:	f04f 0901 	mov.w	r9, #1
 8011ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801206c <_svfiprintf_r+0x1ec>
 8011eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ece:	4623      	mov	r3, r4
 8011ed0:	469a      	mov	sl, r3
 8011ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ed6:	b10a      	cbz	r2, 8011edc <_svfiprintf_r+0x5c>
 8011ed8:	2a25      	cmp	r2, #37	; 0x25
 8011eda:	d1f9      	bne.n	8011ed0 <_svfiprintf_r+0x50>
 8011edc:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee0:	d00b      	beq.n	8011efa <_svfiprintf_r+0x7a>
 8011ee2:	465b      	mov	r3, fp
 8011ee4:	4622      	mov	r2, r4
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f7ff ff6d 	bl	8011dc8 <__ssputs_r>
 8011eee:	3001      	adds	r0, #1
 8011ef0:	f000 80aa 	beq.w	8012048 <_svfiprintf_r+0x1c8>
 8011ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ef6:	445a      	add	r2, fp
 8011ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8011efa:	f89a 3000 	ldrb.w	r3, [sl]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f000 80a2 	beq.w	8012048 <_svfiprintf_r+0x1c8>
 8011f04:	2300      	movs	r3, #0
 8011f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f0e:	f10a 0a01 	add.w	sl, sl, #1
 8011f12:	9304      	str	r3, [sp, #16]
 8011f14:	9307      	str	r3, [sp, #28]
 8011f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8011f1c:	4654      	mov	r4, sl
 8011f1e:	2205      	movs	r2, #5
 8011f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f24:	4851      	ldr	r0, [pc, #324]	; (801206c <_svfiprintf_r+0x1ec>)
 8011f26:	f7ff fa6f 	bl	8011408 <memchr>
 8011f2a:	9a04      	ldr	r2, [sp, #16]
 8011f2c:	b9d8      	cbnz	r0, 8011f66 <_svfiprintf_r+0xe6>
 8011f2e:	06d0      	lsls	r0, r2, #27
 8011f30:	bf44      	itt	mi
 8011f32:	2320      	movmi	r3, #32
 8011f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f38:	0711      	lsls	r1, r2, #28
 8011f3a:	bf44      	itt	mi
 8011f3c:	232b      	movmi	r3, #43	; 0x2b
 8011f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f42:	f89a 3000 	ldrb.w	r3, [sl]
 8011f46:	2b2a      	cmp	r3, #42	; 0x2a
 8011f48:	d015      	beq.n	8011f76 <_svfiprintf_r+0xf6>
 8011f4a:	4654      	mov	r4, sl
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	f04f 0c0a 	mov.w	ip, #10
 8011f52:	9a07      	ldr	r2, [sp, #28]
 8011f54:	4621      	mov	r1, r4
 8011f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f5a:	3b30      	subs	r3, #48	; 0x30
 8011f5c:	2b09      	cmp	r3, #9
 8011f5e:	d94e      	bls.n	8011ffe <_svfiprintf_r+0x17e>
 8011f60:	b1b0      	cbz	r0, 8011f90 <_svfiprintf_r+0x110>
 8011f62:	9207      	str	r2, [sp, #28]
 8011f64:	e014      	b.n	8011f90 <_svfiprintf_r+0x110>
 8011f66:	eba0 0308 	sub.w	r3, r0, r8
 8011f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	46a2      	mov	sl, r4
 8011f72:	9304      	str	r3, [sp, #16]
 8011f74:	e7d2      	b.n	8011f1c <_svfiprintf_r+0x9c>
 8011f76:	9b03      	ldr	r3, [sp, #12]
 8011f78:	1d19      	adds	r1, r3, #4
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	9103      	str	r1, [sp, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	bfbb      	ittet	lt
 8011f82:	425b      	neglt	r3, r3
 8011f84:	f042 0202 	orrlt.w	r2, r2, #2
 8011f88:	9307      	strge	r3, [sp, #28]
 8011f8a:	9307      	strlt	r3, [sp, #28]
 8011f8c:	bfb8      	it	lt
 8011f8e:	9204      	strlt	r2, [sp, #16]
 8011f90:	7823      	ldrb	r3, [r4, #0]
 8011f92:	2b2e      	cmp	r3, #46	; 0x2e
 8011f94:	d10c      	bne.n	8011fb0 <_svfiprintf_r+0x130>
 8011f96:	7863      	ldrb	r3, [r4, #1]
 8011f98:	2b2a      	cmp	r3, #42	; 0x2a
 8011f9a:	d135      	bne.n	8012008 <_svfiprintf_r+0x188>
 8011f9c:	9b03      	ldr	r3, [sp, #12]
 8011f9e:	3402      	adds	r4, #2
 8011fa0:	1d1a      	adds	r2, r3, #4
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	9203      	str	r2, [sp, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	bfb8      	it	lt
 8011faa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011fae:	9305      	str	r3, [sp, #20]
 8011fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801207c <_svfiprintf_r+0x1fc>
 8011fb4:	2203      	movs	r2, #3
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	7821      	ldrb	r1, [r4, #0]
 8011fba:	f7ff fa25 	bl	8011408 <memchr>
 8011fbe:	b140      	cbz	r0, 8011fd2 <_svfiprintf_r+0x152>
 8011fc0:	2340      	movs	r3, #64	; 0x40
 8011fc2:	eba0 000a 	sub.w	r0, r0, sl
 8011fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8011fca:	9b04      	ldr	r3, [sp, #16]
 8011fcc:	3401      	adds	r4, #1
 8011fce:	4303      	orrs	r3, r0
 8011fd0:	9304      	str	r3, [sp, #16]
 8011fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd6:	2206      	movs	r2, #6
 8011fd8:	4825      	ldr	r0, [pc, #148]	; (8012070 <_svfiprintf_r+0x1f0>)
 8011fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fde:	f7ff fa13 	bl	8011408 <memchr>
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	d038      	beq.n	8012058 <_svfiprintf_r+0x1d8>
 8011fe6:	4b23      	ldr	r3, [pc, #140]	; (8012074 <_svfiprintf_r+0x1f4>)
 8011fe8:	bb1b      	cbnz	r3, 8012032 <_svfiprintf_r+0x1b2>
 8011fea:	9b03      	ldr	r3, [sp, #12]
 8011fec:	3307      	adds	r3, #7
 8011fee:	f023 0307 	bic.w	r3, r3, #7
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	9303      	str	r3, [sp, #12]
 8011ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff8:	4433      	add	r3, r6
 8011ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8011ffc:	e767      	b.n	8011ece <_svfiprintf_r+0x4e>
 8011ffe:	460c      	mov	r4, r1
 8012000:	2001      	movs	r0, #1
 8012002:	fb0c 3202 	mla	r2, ip, r2, r3
 8012006:	e7a5      	b.n	8011f54 <_svfiprintf_r+0xd4>
 8012008:	2300      	movs	r3, #0
 801200a:	f04f 0c0a 	mov.w	ip, #10
 801200e:	4619      	mov	r1, r3
 8012010:	3401      	adds	r4, #1
 8012012:	9305      	str	r3, [sp, #20]
 8012014:	4620      	mov	r0, r4
 8012016:	f810 2b01 	ldrb.w	r2, [r0], #1
 801201a:	3a30      	subs	r2, #48	; 0x30
 801201c:	2a09      	cmp	r2, #9
 801201e:	d903      	bls.n	8012028 <_svfiprintf_r+0x1a8>
 8012020:	2b00      	cmp	r3, #0
 8012022:	d0c5      	beq.n	8011fb0 <_svfiprintf_r+0x130>
 8012024:	9105      	str	r1, [sp, #20]
 8012026:	e7c3      	b.n	8011fb0 <_svfiprintf_r+0x130>
 8012028:	4604      	mov	r4, r0
 801202a:	2301      	movs	r3, #1
 801202c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012030:	e7f0      	b.n	8012014 <_svfiprintf_r+0x194>
 8012032:	ab03      	add	r3, sp, #12
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	462a      	mov	r2, r5
 8012038:	4638      	mov	r0, r7
 801203a:	4b0f      	ldr	r3, [pc, #60]	; (8012078 <_svfiprintf_r+0x1f8>)
 801203c:	a904      	add	r1, sp, #16
 801203e:	f7fb ff9f 	bl	800df80 <_printf_float>
 8012042:	1c42      	adds	r2, r0, #1
 8012044:	4606      	mov	r6, r0
 8012046:	d1d6      	bne.n	8011ff6 <_svfiprintf_r+0x176>
 8012048:	89ab      	ldrh	r3, [r5, #12]
 801204a:	065b      	lsls	r3, r3, #25
 801204c:	f53f af2c 	bmi.w	8011ea8 <_svfiprintf_r+0x28>
 8012050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012052:	b01d      	add	sp, #116	; 0x74
 8012054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012058:	ab03      	add	r3, sp, #12
 801205a:	9300      	str	r3, [sp, #0]
 801205c:	462a      	mov	r2, r5
 801205e:	4638      	mov	r0, r7
 8012060:	4b05      	ldr	r3, [pc, #20]	; (8012078 <_svfiprintf_r+0x1f8>)
 8012062:	a904      	add	r1, sp, #16
 8012064:	f7fc fa28 	bl	800e4b8 <_printf_i>
 8012068:	e7eb      	b.n	8012042 <_svfiprintf_r+0x1c2>
 801206a:	bf00      	nop
 801206c:	08013e04 	.word	0x08013e04
 8012070:	08013e0e 	.word	0x08013e0e
 8012074:	0800df81 	.word	0x0800df81
 8012078:	08011dc9 	.word	0x08011dc9
 801207c:	08013e0a 	.word	0x08013e0a

08012080 <__sfputc_r>:
 8012080:	6893      	ldr	r3, [r2, #8]
 8012082:	b410      	push	{r4}
 8012084:	3b01      	subs	r3, #1
 8012086:	2b00      	cmp	r3, #0
 8012088:	6093      	str	r3, [r2, #8]
 801208a:	da07      	bge.n	801209c <__sfputc_r+0x1c>
 801208c:	6994      	ldr	r4, [r2, #24]
 801208e:	42a3      	cmp	r3, r4
 8012090:	db01      	blt.n	8012096 <__sfputc_r+0x16>
 8012092:	290a      	cmp	r1, #10
 8012094:	d102      	bne.n	801209c <__sfputc_r+0x1c>
 8012096:	bc10      	pop	{r4}
 8012098:	f7fd bcac 	b.w	800f9f4 <__swbuf_r>
 801209c:	6813      	ldr	r3, [r2, #0]
 801209e:	1c58      	adds	r0, r3, #1
 80120a0:	6010      	str	r0, [r2, #0]
 80120a2:	7019      	strb	r1, [r3, #0]
 80120a4:	4608      	mov	r0, r1
 80120a6:	bc10      	pop	{r4}
 80120a8:	4770      	bx	lr

080120aa <__sfputs_r>:
 80120aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ac:	4606      	mov	r6, r0
 80120ae:	460f      	mov	r7, r1
 80120b0:	4614      	mov	r4, r2
 80120b2:	18d5      	adds	r5, r2, r3
 80120b4:	42ac      	cmp	r4, r5
 80120b6:	d101      	bne.n	80120bc <__sfputs_r+0x12>
 80120b8:	2000      	movs	r0, #0
 80120ba:	e007      	b.n	80120cc <__sfputs_r+0x22>
 80120bc:	463a      	mov	r2, r7
 80120be:	4630      	mov	r0, r6
 80120c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120c4:	f7ff ffdc 	bl	8012080 <__sfputc_r>
 80120c8:	1c43      	adds	r3, r0, #1
 80120ca:	d1f3      	bne.n	80120b4 <__sfputs_r+0xa>
 80120cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120d0 <_vfiprintf_r>:
 80120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	460d      	mov	r5, r1
 80120d6:	4614      	mov	r4, r2
 80120d8:	4698      	mov	r8, r3
 80120da:	4606      	mov	r6, r0
 80120dc:	b09d      	sub	sp, #116	; 0x74
 80120de:	b118      	cbz	r0, 80120e8 <_vfiprintf_r+0x18>
 80120e0:	6983      	ldr	r3, [r0, #24]
 80120e2:	b90b      	cbnz	r3, 80120e8 <_vfiprintf_r+0x18>
 80120e4:	f7fe fcfc 	bl	8010ae0 <__sinit>
 80120e8:	4b89      	ldr	r3, [pc, #548]	; (8012310 <_vfiprintf_r+0x240>)
 80120ea:	429d      	cmp	r5, r3
 80120ec:	d11b      	bne.n	8012126 <_vfiprintf_r+0x56>
 80120ee:	6875      	ldr	r5, [r6, #4]
 80120f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120f2:	07d9      	lsls	r1, r3, #31
 80120f4:	d405      	bmi.n	8012102 <_vfiprintf_r+0x32>
 80120f6:	89ab      	ldrh	r3, [r5, #12]
 80120f8:	059a      	lsls	r2, r3, #22
 80120fa:	d402      	bmi.n	8012102 <_vfiprintf_r+0x32>
 80120fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120fe:	f7ff f90a 	bl	8011316 <__retarget_lock_acquire_recursive>
 8012102:	89ab      	ldrh	r3, [r5, #12]
 8012104:	071b      	lsls	r3, r3, #28
 8012106:	d501      	bpl.n	801210c <_vfiprintf_r+0x3c>
 8012108:	692b      	ldr	r3, [r5, #16]
 801210a:	b9eb      	cbnz	r3, 8012148 <_vfiprintf_r+0x78>
 801210c:	4629      	mov	r1, r5
 801210e:	4630      	mov	r0, r6
 8012110:	f7fd fcc2 	bl	800fa98 <__swsetup_r>
 8012114:	b1c0      	cbz	r0, 8012148 <_vfiprintf_r+0x78>
 8012116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012118:	07dc      	lsls	r4, r3, #31
 801211a:	d50e      	bpl.n	801213a <_vfiprintf_r+0x6a>
 801211c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012120:	b01d      	add	sp, #116	; 0x74
 8012122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012126:	4b7b      	ldr	r3, [pc, #492]	; (8012314 <_vfiprintf_r+0x244>)
 8012128:	429d      	cmp	r5, r3
 801212a:	d101      	bne.n	8012130 <_vfiprintf_r+0x60>
 801212c:	68b5      	ldr	r5, [r6, #8]
 801212e:	e7df      	b.n	80120f0 <_vfiprintf_r+0x20>
 8012130:	4b79      	ldr	r3, [pc, #484]	; (8012318 <_vfiprintf_r+0x248>)
 8012132:	429d      	cmp	r5, r3
 8012134:	bf08      	it	eq
 8012136:	68f5      	ldreq	r5, [r6, #12]
 8012138:	e7da      	b.n	80120f0 <_vfiprintf_r+0x20>
 801213a:	89ab      	ldrh	r3, [r5, #12]
 801213c:	0598      	lsls	r0, r3, #22
 801213e:	d4ed      	bmi.n	801211c <_vfiprintf_r+0x4c>
 8012140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012142:	f7ff f8e9 	bl	8011318 <__retarget_lock_release_recursive>
 8012146:	e7e9      	b.n	801211c <_vfiprintf_r+0x4c>
 8012148:	2300      	movs	r3, #0
 801214a:	9309      	str	r3, [sp, #36]	; 0x24
 801214c:	2320      	movs	r3, #32
 801214e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012152:	2330      	movs	r3, #48	; 0x30
 8012154:	f04f 0901 	mov.w	r9, #1
 8012158:	f8cd 800c 	str.w	r8, [sp, #12]
 801215c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801231c <_vfiprintf_r+0x24c>
 8012160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012164:	4623      	mov	r3, r4
 8012166:	469a      	mov	sl, r3
 8012168:	f813 2b01 	ldrb.w	r2, [r3], #1
 801216c:	b10a      	cbz	r2, 8012172 <_vfiprintf_r+0xa2>
 801216e:	2a25      	cmp	r2, #37	; 0x25
 8012170:	d1f9      	bne.n	8012166 <_vfiprintf_r+0x96>
 8012172:	ebba 0b04 	subs.w	fp, sl, r4
 8012176:	d00b      	beq.n	8012190 <_vfiprintf_r+0xc0>
 8012178:	465b      	mov	r3, fp
 801217a:	4622      	mov	r2, r4
 801217c:	4629      	mov	r1, r5
 801217e:	4630      	mov	r0, r6
 8012180:	f7ff ff93 	bl	80120aa <__sfputs_r>
 8012184:	3001      	adds	r0, #1
 8012186:	f000 80aa 	beq.w	80122de <_vfiprintf_r+0x20e>
 801218a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801218c:	445a      	add	r2, fp
 801218e:	9209      	str	r2, [sp, #36]	; 0x24
 8012190:	f89a 3000 	ldrb.w	r3, [sl]
 8012194:	2b00      	cmp	r3, #0
 8012196:	f000 80a2 	beq.w	80122de <_vfiprintf_r+0x20e>
 801219a:	2300      	movs	r3, #0
 801219c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121a4:	f10a 0a01 	add.w	sl, sl, #1
 80121a8:	9304      	str	r3, [sp, #16]
 80121aa:	9307      	str	r3, [sp, #28]
 80121ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121b0:	931a      	str	r3, [sp, #104]	; 0x68
 80121b2:	4654      	mov	r4, sl
 80121b4:	2205      	movs	r2, #5
 80121b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ba:	4858      	ldr	r0, [pc, #352]	; (801231c <_vfiprintf_r+0x24c>)
 80121bc:	f7ff f924 	bl	8011408 <memchr>
 80121c0:	9a04      	ldr	r2, [sp, #16]
 80121c2:	b9d8      	cbnz	r0, 80121fc <_vfiprintf_r+0x12c>
 80121c4:	06d1      	lsls	r1, r2, #27
 80121c6:	bf44      	itt	mi
 80121c8:	2320      	movmi	r3, #32
 80121ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121ce:	0713      	lsls	r3, r2, #28
 80121d0:	bf44      	itt	mi
 80121d2:	232b      	movmi	r3, #43	; 0x2b
 80121d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121d8:	f89a 3000 	ldrb.w	r3, [sl]
 80121dc:	2b2a      	cmp	r3, #42	; 0x2a
 80121de:	d015      	beq.n	801220c <_vfiprintf_r+0x13c>
 80121e0:	4654      	mov	r4, sl
 80121e2:	2000      	movs	r0, #0
 80121e4:	f04f 0c0a 	mov.w	ip, #10
 80121e8:	9a07      	ldr	r2, [sp, #28]
 80121ea:	4621      	mov	r1, r4
 80121ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121f0:	3b30      	subs	r3, #48	; 0x30
 80121f2:	2b09      	cmp	r3, #9
 80121f4:	d94e      	bls.n	8012294 <_vfiprintf_r+0x1c4>
 80121f6:	b1b0      	cbz	r0, 8012226 <_vfiprintf_r+0x156>
 80121f8:	9207      	str	r2, [sp, #28]
 80121fa:	e014      	b.n	8012226 <_vfiprintf_r+0x156>
 80121fc:	eba0 0308 	sub.w	r3, r0, r8
 8012200:	fa09 f303 	lsl.w	r3, r9, r3
 8012204:	4313      	orrs	r3, r2
 8012206:	46a2      	mov	sl, r4
 8012208:	9304      	str	r3, [sp, #16]
 801220a:	e7d2      	b.n	80121b2 <_vfiprintf_r+0xe2>
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	1d19      	adds	r1, r3, #4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	9103      	str	r1, [sp, #12]
 8012214:	2b00      	cmp	r3, #0
 8012216:	bfbb      	ittet	lt
 8012218:	425b      	neglt	r3, r3
 801221a:	f042 0202 	orrlt.w	r2, r2, #2
 801221e:	9307      	strge	r3, [sp, #28]
 8012220:	9307      	strlt	r3, [sp, #28]
 8012222:	bfb8      	it	lt
 8012224:	9204      	strlt	r2, [sp, #16]
 8012226:	7823      	ldrb	r3, [r4, #0]
 8012228:	2b2e      	cmp	r3, #46	; 0x2e
 801222a:	d10c      	bne.n	8012246 <_vfiprintf_r+0x176>
 801222c:	7863      	ldrb	r3, [r4, #1]
 801222e:	2b2a      	cmp	r3, #42	; 0x2a
 8012230:	d135      	bne.n	801229e <_vfiprintf_r+0x1ce>
 8012232:	9b03      	ldr	r3, [sp, #12]
 8012234:	3402      	adds	r4, #2
 8012236:	1d1a      	adds	r2, r3, #4
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	9203      	str	r2, [sp, #12]
 801223c:	2b00      	cmp	r3, #0
 801223e:	bfb8      	it	lt
 8012240:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012244:	9305      	str	r3, [sp, #20]
 8012246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801232c <_vfiprintf_r+0x25c>
 801224a:	2203      	movs	r2, #3
 801224c:	4650      	mov	r0, sl
 801224e:	7821      	ldrb	r1, [r4, #0]
 8012250:	f7ff f8da 	bl	8011408 <memchr>
 8012254:	b140      	cbz	r0, 8012268 <_vfiprintf_r+0x198>
 8012256:	2340      	movs	r3, #64	; 0x40
 8012258:	eba0 000a 	sub.w	r0, r0, sl
 801225c:	fa03 f000 	lsl.w	r0, r3, r0
 8012260:	9b04      	ldr	r3, [sp, #16]
 8012262:	3401      	adds	r4, #1
 8012264:	4303      	orrs	r3, r0
 8012266:	9304      	str	r3, [sp, #16]
 8012268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801226c:	2206      	movs	r2, #6
 801226e:	482c      	ldr	r0, [pc, #176]	; (8012320 <_vfiprintf_r+0x250>)
 8012270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012274:	f7ff f8c8 	bl	8011408 <memchr>
 8012278:	2800      	cmp	r0, #0
 801227a:	d03f      	beq.n	80122fc <_vfiprintf_r+0x22c>
 801227c:	4b29      	ldr	r3, [pc, #164]	; (8012324 <_vfiprintf_r+0x254>)
 801227e:	bb1b      	cbnz	r3, 80122c8 <_vfiprintf_r+0x1f8>
 8012280:	9b03      	ldr	r3, [sp, #12]
 8012282:	3307      	adds	r3, #7
 8012284:	f023 0307 	bic.w	r3, r3, #7
 8012288:	3308      	adds	r3, #8
 801228a:	9303      	str	r3, [sp, #12]
 801228c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228e:	443b      	add	r3, r7
 8012290:	9309      	str	r3, [sp, #36]	; 0x24
 8012292:	e767      	b.n	8012164 <_vfiprintf_r+0x94>
 8012294:	460c      	mov	r4, r1
 8012296:	2001      	movs	r0, #1
 8012298:	fb0c 3202 	mla	r2, ip, r2, r3
 801229c:	e7a5      	b.n	80121ea <_vfiprintf_r+0x11a>
 801229e:	2300      	movs	r3, #0
 80122a0:	f04f 0c0a 	mov.w	ip, #10
 80122a4:	4619      	mov	r1, r3
 80122a6:	3401      	adds	r4, #1
 80122a8:	9305      	str	r3, [sp, #20]
 80122aa:	4620      	mov	r0, r4
 80122ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122b0:	3a30      	subs	r2, #48	; 0x30
 80122b2:	2a09      	cmp	r2, #9
 80122b4:	d903      	bls.n	80122be <_vfiprintf_r+0x1ee>
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d0c5      	beq.n	8012246 <_vfiprintf_r+0x176>
 80122ba:	9105      	str	r1, [sp, #20]
 80122bc:	e7c3      	b.n	8012246 <_vfiprintf_r+0x176>
 80122be:	4604      	mov	r4, r0
 80122c0:	2301      	movs	r3, #1
 80122c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80122c6:	e7f0      	b.n	80122aa <_vfiprintf_r+0x1da>
 80122c8:	ab03      	add	r3, sp, #12
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	462a      	mov	r2, r5
 80122ce:	4630      	mov	r0, r6
 80122d0:	4b15      	ldr	r3, [pc, #84]	; (8012328 <_vfiprintf_r+0x258>)
 80122d2:	a904      	add	r1, sp, #16
 80122d4:	f7fb fe54 	bl	800df80 <_printf_float>
 80122d8:	4607      	mov	r7, r0
 80122da:	1c78      	adds	r0, r7, #1
 80122dc:	d1d6      	bne.n	801228c <_vfiprintf_r+0x1bc>
 80122de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122e0:	07d9      	lsls	r1, r3, #31
 80122e2:	d405      	bmi.n	80122f0 <_vfiprintf_r+0x220>
 80122e4:	89ab      	ldrh	r3, [r5, #12]
 80122e6:	059a      	lsls	r2, r3, #22
 80122e8:	d402      	bmi.n	80122f0 <_vfiprintf_r+0x220>
 80122ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122ec:	f7ff f814 	bl	8011318 <__retarget_lock_release_recursive>
 80122f0:	89ab      	ldrh	r3, [r5, #12]
 80122f2:	065b      	lsls	r3, r3, #25
 80122f4:	f53f af12 	bmi.w	801211c <_vfiprintf_r+0x4c>
 80122f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122fa:	e711      	b.n	8012120 <_vfiprintf_r+0x50>
 80122fc:	ab03      	add	r3, sp, #12
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	462a      	mov	r2, r5
 8012302:	4630      	mov	r0, r6
 8012304:	4b08      	ldr	r3, [pc, #32]	; (8012328 <_vfiprintf_r+0x258>)
 8012306:	a904      	add	r1, sp, #16
 8012308:	f7fc f8d6 	bl	800e4b8 <_printf_i>
 801230c:	e7e4      	b.n	80122d8 <_vfiprintf_r+0x208>
 801230e:	bf00      	nop
 8012310:	08013be4 	.word	0x08013be4
 8012314:	08013c04 	.word	0x08013c04
 8012318:	08013bc4 	.word	0x08013bc4
 801231c:	08013e04 	.word	0x08013e04
 8012320:	08013e0e 	.word	0x08013e0e
 8012324:	0800df81 	.word	0x0800df81
 8012328:	080120ab 	.word	0x080120ab
 801232c:	08013e0a 	.word	0x08013e0a

08012330 <nan>:
 8012330:	2000      	movs	r0, #0
 8012332:	4901      	ldr	r1, [pc, #4]	; (8012338 <nan+0x8>)
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	7ff80000 	.word	0x7ff80000

0801233c <__sread>:
 801233c:	b510      	push	{r4, lr}
 801233e:	460c      	mov	r4, r1
 8012340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012344:	f000 f8e8 	bl	8012518 <_read_r>
 8012348:	2800      	cmp	r0, #0
 801234a:	bfab      	itete	ge
 801234c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801234e:	89a3      	ldrhlt	r3, [r4, #12]
 8012350:	181b      	addge	r3, r3, r0
 8012352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012356:	bfac      	ite	ge
 8012358:	6563      	strge	r3, [r4, #84]	; 0x54
 801235a:	81a3      	strhlt	r3, [r4, #12]
 801235c:	bd10      	pop	{r4, pc}

0801235e <__swrite>:
 801235e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012362:	461f      	mov	r7, r3
 8012364:	898b      	ldrh	r3, [r1, #12]
 8012366:	4605      	mov	r5, r0
 8012368:	05db      	lsls	r3, r3, #23
 801236a:	460c      	mov	r4, r1
 801236c:	4616      	mov	r6, r2
 801236e:	d505      	bpl.n	801237c <__swrite+0x1e>
 8012370:	2302      	movs	r3, #2
 8012372:	2200      	movs	r2, #0
 8012374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012378:	f000 f87c 	bl	8012474 <_lseek_r>
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	4632      	mov	r2, r6
 8012380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012384:	81a3      	strh	r3, [r4, #12]
 8012386:	4628      	mov	r0, r5
 8012388:	463b      	mov	r3, r7
 801238a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012392:	f000 b823 	b.w	80123dc <_write_r>

08012396 <__sseek>:
 8012396:	b510      	push	{r4, lr}
 8012398:	460c      	mov	r4, r1
 801239a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801239e:	f000 f869 	bl	8012474 <_lseek_r>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	89a3      	ldrh	r3, [r4, #12]
 80123a6:	bf15      	itete	ne
 80123a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80123aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123b2:	81a3      	strheq	r3, [r4, #12]
 80123b4:	bf18      	it	ne
 80123b6:	81a3      	strhne	r3, [r4, #12]
 80123b8:	bd10      	pop	{r4, pc}

080123ba <__sclose>:
 80123ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123be:	f000 b827 	b.w	8012410 <_close_r>

080123c2 <__ascii_wctomb>:
 80123c2:	4603      	mov	r3, r0
 80123c4:	4608      	mov	r0, r1
 80123c6:	b141      	cbz	r1, 80123da <__ascii_wctomb+0x18>
 80123c8:	2aff      	cmp	r2, #255	; 0xff
 80123ca:	d904      	bls.n	80123d6 <__ascii_wctomb+0x14>
 80123cc:	228a      	movs	r2, #138	; 0x8a
 80123ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123d2:	601a      	str	r2, [r3, #0]
 80123d4:	4770      	bx	lr
 80123d6:	2001      	movs	r0, #1
 80123d8:	700a      	strb	r2, [r1, #0]
 80123da:	4770      	bx	lr

080123dc <_write_r>:
 80123dc:	b538      	push	{r3, r4, r5, lr}
 80123de:	4604      	mov	r4, r0
 80123e0:	4608      	mov	r0, r1
 80123e2:	4611      	mov	r1, r2
 80123e4:	2200      	movs	r2, #0
 80123e6:	4d05      	ldr	r5, [pc, #20]	; (80123fc <_write_r+0x20>)
 80123e8:	602a      	str	r2, [r5, #0]
 80123ea:	461a      	mov	r2, r3
 80123ec:	f7f0 fa40 	bl	8002870 <_write>
 80123f0:	1c43      	adds	r3, r0, #1
 80123f2:	d102      	bne.n	80123fa <_write_r+0x1e>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	b103      	cbz	r3, 80123fa <_write_r+0x1e>
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	bd38      	pop	{r3, r4, r5, pc}
 80123fc:	200013f8 	.word	0x200013f8

08012400 <abort>:
 8012400:	2006      	movs	r0, #6
 8012402:	b508      	push	{r3, lr}
 8012404:	f000 f8c2 	bl	801258c <raise>
 8012408:	2001      	movs	r0, #1
 801240a:	f7f0 fa0a 	bl	8002822 <_exit>
	...

08012410 <_close_r>:
 8012410:	b538      	push	{r3, r4, r5, lr}
 8012412:	2300      	movs	r3, #0
 8012414:	4d05      	ldr	r5, [pc, #20]	; (801242c <_close_r+0x1c>)
 8012416:	4604      	mov	r4, r0
 8012418:	4608      	mov	r0, r1
 801241a:	602b      	str	r3, [r5, #0]
 801241c:	f7f0 fa44 	bl	80028a8 <_close>
 8012420:	1c43      	adds	r3, r0, #1
 8012422:	d102      	bne.n	801242a <_close_r+0x1a>
 8012424:	682b      	ldr	r3, [r5, #0]
 8012426:	b103      	cbz	r3, 801242a <_close_r+0x1a>
 8012428:	6023      	str	r3, [r4, #0]
 801242a:	bd38      	pop	{r3, r4, r5, pc}
 801242c:	200013f8 	.word	0x200013f8

08012430 <_fstat_r>:
 8012430:	b538      	push	{r3, r4, r5, lr}
 8012432:	2300      	movs	r3, #0
 8012434:	4d06      	ldr	r5, [pc, #24]	; (8012450 <_fstat_r+0x20>)
 8012436:	4604      	mov	r4, r0
 8012438:	4608      	mov	r0, r1
 801243a:	4611      	mov	r1, r2
 801243c:	602b      	str	r3, [r5, #0]
 801243e:	f7f0 fa3e 	bl	80028be <_fstat>
 8012442:	1c43      	adds	r3, r0, #1
 8012444:	d102      	bne.n	801244c <_fstat_r+0x1c>
 8012446:	682b      	ldr	r3, [r5, #0]
 8012448:	b103      	cbz	r3, 801244c <_fstat_r+0x1c>
 801244a:	6023      	str	r3, [r4, #0]
 801244c:	bd38      	pop	{r3, r4, r5, pc}
 801244e:	bf00      	nop
 8012450:	200013f8 	.word	0x200013f8

08012454 <_isatty_r>:
 8012454:	b538      	push	{r3, r4, r5, lr}
 8012456:	2300      	movs	r3, #0
 8012458:	4d05      	ldr	r5, [pc, #20]	; (8012470 <_isatty_r+0x1c>)
 801245a:	4604      	mov	r4, r0
 801245c:	4608      	mov	r0, r1
 801245e:	602b      	str	r3, [r5, #0]
 8012460:	f7f0 fa3c 	bl	80028dc <_isatty>
 8012464:	1c43      	adds	r3, r0, #1
 8012466:	d102      	bne.n	801246e <_isatty_r+0x1a>
 8012468:	682b      	ldr	r3, [r5, #0]
 801246a:	b103      	cbz	r3, 801246e <_isatty_r+0x1a>
 801246c:	6023      	str	r3, [r4, #0]
 801246e:	bd38      	pop	{r3, r4, r5, pc}
 8012470:	200013f8 	.word	0x200013f8

08012474 <_lseek_r>:
 8012474:	b538      	push	{r3, r4, r5, lr}
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	4611      	mov	r1, r2
 801247c:	2200      	movs	r2, #0
 801247e:	4d05      	ldr	r5, [pc, #20]	; (8012494 <_lseek_r+0x20>)
 8012480:	602a      	str	r2, [r5, #0]
 8012482:	461a      	mov	r2, r3
 8012484:	f7f0 fa34 	bl	80028f0 <_lseek>
 8012488:	1c43      	adds	r3, r0, #1
 801248a:	d102      	bne.n	8012492 <_lseek_r+0x1e>
 801248c:	682b      	ldr	r3, [r5, #0]
 801248e:	b103      	cbz	r3, 8012492 <_lseek_r+0x1e>
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	bd38      	pop	{r3, r4, r5, pc}
 8012494:	200013f8 	.word	0x200013f8

08012498 <memmove>:
 8012498:	4288      	cmp	r0, r1
 801249a:	b510      	push	{r4, lr}
 801249c:	eb01 0402 	add.w	r4, r1, r2
 80124a0:	d902      	bls.n	80124a8 <memmove+0x10>
 80124a2:	4284      	cmp	r4, r0
 80124a4:	4623      	mov	r3, r4
 80124a6:	d807      	bhi.n	80124b8 <memmove+0x20>
 80124a8:	1e43      	subs	r3, r0, #1
 80124aa:	42a1      	cmp	r1, r4
 80124ac:	d008      	beq.n	80124c0 <memmove+0x28>
 80124ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124b6:	e7f8      	b.n	80124aa <memmove+0x12>
 80124b8:	4601      	mov	r1, r0
 80124ba:	4402      	add	r2, r0
 80124bc:	428a      	cmp	r2, r1
 80124be:	d100      	bne.n	80124c2 <memmove+0x2a>
 80124c0:	bd10      	pop	{r4, pc}
 80124c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124ca:	e7f7      	b.n	80124bc <memmove+0x24>

080124cc <_realloc_r>:
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	4607      	mov	r7, r0
 80124d0:	4614      	mov	r4, r2
 80124d2:	460e      	mov	r6, r1
 80124d4:	b921      	cbnz	r1, 80124e0 <_realloc_r+0x14>
 80124d6:	4611      	mov	r1, r2
 80124d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80124dc:	f7fb bc58 	b.w	800dd90 <_malloc_r>
 80124e0:	b922      	cbnz	r2, 80124ec <_realloc_r+0x20>
 80124e2:	f7fb fc09 	bl	800dcf8 <_free_r>
 80124e6:	4625      	mov	r5, r4
 80124e8:	4628      	mov	r0, r5
 80124ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ec:	f000 f86a 	bl	80125c4 <_malloc_usable_size_r>
 80124f0:	42a0      	cmp	r0, r4
 80124f2:	d20f      	bcs.n	8012514 <_realloc_r+0x48>
 80124f4:	4621      	mov	r1, r4
 80124f6:	4638      	mov	r0, r7
 80124f8:	f7fb fc4a 	bl	800dd90 <_malloc_r>
 80124fc:	4605      	mov	r5, r0
 80124fe:	2800      	cmp	r0, #0
 8012500:	d0f2      	beq.n	80124e8 <_realloc_r+0x1c>
 8012502:	4631      	mov	r1, r6
 8012504:	4622      	mov	r2, r4
 8012506:	f7fb fbe1 	bl	800dccc <memcpy>
 801250a:	4631      	mov	r1, r6
 801250c:	4638      	mov	r0, r7
 801250e:	f7fb fbf3 	bl	800dcf8 <_free_r>
 8012512:	e7e9      	b.n	80124e8 <_realloc_r+0x1c>
 8012514:	4635      	mov	r5, r6
 8012516:	e7e7      	b.n	80124e8 <_realloc_r+0x1c>

08012518 <_read_r>:
 8012518:	b538      	push	{r3, r4, r5, lr}
 801251a:	4604      	mov	r4, r0
 801251c:	4608      	mov	r0, r1
 801251e:	4611      	mov	r1, r2
 8012520:	2200      	movs	r2, #0
 8012522:	4d05      	ldr	r5, [pc, #20]	; (8012538 <_read_r+0x20>)
 8012524:	602a      	str	r2, [r5, #0]
 8012526:	461a      	mov	r2, r3
 8012528:	f7f0 f985 	bl	8002836 <_read>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	d102      	bne.n	8012536 <_read_r+0x1e>
 8012530:	682b      	ldr	r3, [r5, #0]
 8012532:	b103      	cbz	r3, 8012536 <_read_r+0x1e>
 8012534:	6023      	str	r3, [r4, #0]
 8012536:	bd38      	pop	{r3, r4, r5, pc}
 8012538:	200013f8 	.word	0x200013f8

0801253c <_raise_r>:
 801253c:	291f      	cmp	r1, #31
 801253e:	b538      	push	{r3, r4, r5, lr}
 8012540:	4604      	mov	r4, r0
 8012542:	460d      	mov	r5, r1
 8012544:	d904      	bls.n	8012550 <_raise_r+0x14>
 8012546:	2316      	movs	r3, #22
 8012548:	6003      	str	r3, [r0, #0]
 801254a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012552:	b112      	cbz	r2, 801255a <_raise_r+0x1e>
 8012554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012558:	b94b      	cbnz	r3, 801256e <_raise_r+0x32>
 801255a:	4620      	mov	r0, r4
 801255c:	f000 f830 	bl	80125c0 <_getpid_r>
 8012560:	462a      	mov	r2, r5
 8012562:	4601      	mov	r1, r0
 8012564:	4620      	mov	r0, r4
 8012566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801256a:	f000 b817 	b.w	801259c <_kill_r>
 801256e:	2b01      	cmp	r3, #1
 8012570:	d00a      	beq.n	8012588 <_raise_r+0x4c>
 8012572:	1c59      	adds	r1, r3, #1
 8012574:	d103      	bne.n	801257e <_raise_r+0x42>
 8012576:	2316      	movs	r3, #22
 8012578:	6003      	str	r3, [r0, #0]
 801257a:	2001      	movs	r0, #1
 801257c:	e7e7      	b.n	801254e <_raise_r+0x12>
 801257e:	2400      	movs	r4, #0
 8012580:	4628      	mov	r0, r5
 8012582:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012586:	4798      	blx	r3
 8012588:	2000      	movs	r0, #0
 801258a:	e7e0      	b.n	801254e <_raise_r+0x12>

0801258c <raise>:
 801258c:	4b02      	ldr	r3, [pc, #8]	; (8012598 <raise+0xc>)
 801258e:	4601      	mov	r1, r0
 8012590:	6818      	ldr	r0, [r3, #0]
 8012592:	f7ff bfd3 	b.w	801253c <_raise_r>
 8012596:	bf00      	nop
 8012598:	200000d4 	.word	0x200000d4

0801259c <_kill_r>:
 801259c:	b538      	push	{r3, r4, r5, lr}
 801259e:	2300      	movs	r3, #0
 80125a0:	4d06      	ldr	r5, [pc, #24]	; (80125bc <_kill_r+0x20>)
 80125a2:	4604      	mov	r4, r0
 80125a4:	4608      	mov	r0, r1
 80125a6:	4611      	mov	r1, r2
 80125a8:	602b      	str	r3, [r5, #0]
 80125aa:	f7f0 f92a 	bl	8002802 <_kill>
 80125ae:	1c43      	adds	r3, r0, #1
 80125b0:	d102      	bne.n	80125b8 <_kill_r+0x1c>
 80125b2:	682b      	ldr	r3, [r5, #0]
 80125b4:	b103      	cbz	r3, 80125b8 <_kill_r+0x1c>
 80125b6:	6023      	str	r3, [r4, #0]
 80125b8:	bd38      	pop	{r3, r4, r5, pc}
 80125ba:	bf00      	nop
 80125bc:	200013f8 	.word	0x200013f8

080125c0 <_getpid_r>:
 80125c0:	f7f0 b918 	b.w	80027f4 <_getpid>

080125c4 <_malloc_usable_size_r>:
 80125c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125c8:	1f18      	subs	r0, r3, #4
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	bfbc      	itt	lt
 80125ce:	580b      	ldrlt	r3, [r1, r0]
 80125d0:	18c0      	addlt	r0, r0, r3
 80125d2:	4770      	bx	lr

080125d4 <_init>:
 80125d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d6:	bf00      	nop
 80125d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125da:	bc08      	pop	{r3}
 80125dc:	469e      	mov	lr, r3
 80125de:	4770      	bx	lr

080125e0 <_fini>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	bf00      	nop
 80125e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e6:	bc08      	pop	{r3}
 80125e8:	469e      	mov	lr, r3
 80125ea:	4770      	bx	lr
